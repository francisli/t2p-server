#!/usr/bin/env node
/* eslint-disable no-console, no-await-in-loop */
const fetch = require('node-fetch');
const fs = require('fs-extra');
const mkdirp = require('mkdirp');
const path = require('path');
const readline = require('readline');
const XLSX = require('xlsx');
const { URLSearchParams } = require('url');
const _ = require('lodash');
const uuid = require('uuid/v4');
const models = require('../models');

function downloadWorkbook(url) {
  return new Promise((resolve, reject) => {
    mkdirp.sync(path.resolve(__dirname, '../tmp'));
    const filename = path.resolve(__dirname, '../tmp/file.xlsx');
    const file = fs.createWriteStream(filename);
    fetch(url)
      .then((response) => {
        response.body.on('end', () => {
          resolve(filename);
        });
        response.body.pipe(file);
      })
      .catch((err) => reject(err));
  });
}

function readInput(rl, prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, (answer) => {
      resolve(answer);
    });
  });
}

function login(server, email, password) {
  const params = new URLSearchParams();
  params.append('email', email);
  params.append('password', password);
  return fetch(`${server}/login`, {
    method: 'post',
    body: params,
    redirect: 'manual',
  }).then((res) => {
    let cookies = res.headers.raw()['set-cookie'];
    cookies = cookies
      .map((entry) => {
        const parts = entry.split(';');
        const cookiePart = parts[0];
        return cookiePart;
      })
      .join(';');
    return cookies;
  });
}

function post(server, subdomain, cookies, route, data) {
  return fetch(`${server}${route}`, {
    method: 'post',
    body: JSON.stringify(data),
    headers: {
      'Content-Type': 'application/json',
      Cookie: cookies,
      'X-Agency-Subdomain': subdomain,
    },
  }).then((res) => {
    if (!res.ok) {
      return res.text().then((text) => {
        throw text;
      });
    }
    return res.json();
  });
}

async function importRows(server, email, password, sheet) {
  /// get a superuser account
  const superuser = await models.User.findOne({
    where: { isAdmin: true },
    rejectOnEmpty: true,
  });
  /// create a demo canonical agency record
  const [agency] = await models.Agency.findOrCreate({
    where: {
      stateUniqueId: 'DEMO-001',
      number: 'DEMO-001',
      name: 'Demo Agency',
      stateId: '06',
      data: {
        'sAgency.01': {
          _text: 'DEMO001',
        },
        'sAgency.02': {
          _text: 'DEMO001',
        },
        'sAgency.03': {
          _text: 'Demo Agency',
        },
      },
      updatedById: superuser.id,
      createdById: superuser.id,
    },
  });
  console.log(agency);
  /// register the demo agency and its owner user
  const subdomain = 'demo';
  const demoAgency = await post(
    server,
    '',
    '',
    `/api/agencies/${agency.id}/claim`,
    {
      subdomain,
      firstName: 'Demo',
      lastName: 'User',
      email,
      position: 'Admin',
      password,
    }
  );
  console.log(demoAgency);

  /// log in to server
  const cookie = await login(server, email, password);

  /// create a new demo scene
  const scene = await post(server, subdomain, cookie, '/api/scenes', {
    name: 'Demo Scene',
    desc: 'Demo data from Tech to Protect challenge',
    isMCI: true,
    lat: '37.785834',
    lng: '-122.406417',
  });
  console.log(scene);

  /// the priority strings used in this spreadsheet, mapped in order
  /// from high to low, intended to map to the corresponding SALT priorities
  const PRIORITIES = ['Red', 'Yellow', 'Green', 'Gray', 'Deceased'];
  const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });
  /// remove header rows
  rows.splice(0, 3);
  /// process each row...
  let i = 0;
  for (const row of rows) {
    /// get unique PIN for the patient
    let pin = row[0];
    if (!pin) {
      /// empty row marks end of input...
      break;
    }
    pin = models.Patient.generatePIN(pin);
    console.log(`[${i}] PIN: ${pin}`);
    /// collect initial vitals and status
    const lastName = (row[1] || '').trim();
    const firstName = (row[2] || '').trim();
    const age = row[3];
    const respiratoryRate = row[4];
    const pulse = row[5];
    const capillaryRefill = row[6];
    const bloodPressure = (row[7] || '').trim();
    let text = (row[8] || '').trim();
    let priority = PRIORITIES.indexOf((row[9] || '').trim());
    if (priority < 0 || priority >= PRIORITIES.length) {
      console.error(`Unrecognized priority: ${row[9]}`);
      process.exit(1);
    }
    let location = (row[10] || '').trim();
    let portraitFile = (row[19] || '').trim();
    const portraitFilePath = path.resolve(
      __dirname,
      '../public/uploads',
      portraitFile
    );
    if (fs.existsSync(portraitFilePath)) {
      mkdirp.sync(path.resolve(__dirname, '../tmp/uploads'));
      portraitFile = `${uuid()}.png`;
      fs.copySync(
        portraitFilePath,
        path.resolve(__dirname, `../tmp/uploads/${portraitFile}`)
      );
    } else {
      portraitFile = null;
    }
    const lat = (`${row[20] || ''}` || '').trim();
    const lng = (`${row[21] || ''}` || '').trim();
    /// TODO handle back-dating timestamp row[11] for demo purposes
    /// create initial patient/observation record
    await post(server, subdomain, cookie, '/api/patients', {
      sceneId: scene.id,
      pin,
      lastName,
      firstName,
      age,
      respiratoryRate,
      pulse,
      capillaryRefill,
      bloodPressure,
      text,
      priority,
      location,
      lat,
      lng,
      portraitFile,
      version: 1,
    });

    /// create second observation
    text = (row[12] || '').trim();
    priority = PRIORITIES.indexOf((row[13] || '').trim());
    location = (row[14] || '').trim();
    /// TODO handle back-dating timestamp row[15] for demo purposes
    const payload = {};
    if (text !== '') {
      payload.text = text;
    }
    if (priority >= 0 && priority < PRIORITIES.length) {
      payload.priority = priority;
    }
    if (location !== '' && location !== 'Same') {
      payload.location = location;
    }
    if (!_.isEmpty(payload)) {
      payload.pin = pin;
      payload.sceneId = scene.id;
      payload.version = 2;
      await post(server, subdomain, cookie, '/api/patients', payload);
    }
    i += 1;
  }
}

async function parseWorkbook() {
  /// download file, if url
  let filename = process.argv[2];
  if (filename.startsWith('http')) {
    console.log('Downloading workbook...');
    filename = await downloadWorkbook(filename);
  }

  /// read Excel workbook
  console.log('Parsing workbook...');
  const workbook = XLSX.readFile(filename);

  /// set up console input/output
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  let server = await readInput(
    rl,
    'Select a server to import into [http://lvh.me:3000]: '
  );
  if (server === '') {
    server = 'http://lvh.me:3000';
  }
  const email = await readInput(rl, 'Email: ');
  const password = await readInput(rl, 'Password: ');

  /// enumerate all the sheets in the workbook
  let i = 1;
  for (const sheetName of workbook.SheetNames) {
    console.log(`${i}. ${sheetName}`);
    i += 1;
  }

  /// prompt user for sheet selection
  let sheet = await readInput(rl, 'Select a sheet to import [1]: ');
  if (sheet === '') {
    sheet = '1';
  }
  i = parseInt(sheet, 10) - 1;
  importRows(server, email, password, workbook.Sheets[workbook.SheetNames[i]])
    .then(() => {
      console.log('Done!');
    })
    .catch((error) => {
      console.log(error);
    })
    .finally(() => {
      /// clean up and exit
      rl.close();
      process.exit();
    });
}

if (process.argv.length < 3) {
  console.log('Usage: bin/seed-demo path/to/file.xlsx');
  process.exit(1);
}

parseWorkbook();
