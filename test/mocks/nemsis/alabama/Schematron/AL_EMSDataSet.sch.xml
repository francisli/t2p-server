<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="//www.nemsis.org/media/nemsis_v3/master/Schematron/utilities/html/schematronHtml.xsl"?>
<sch:schema
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  queryBinding="xslt2"
  id="EMSDataSet"
  schemaVersion="3.4.0.160713CP2_v7-4"
  see="https://epcr-submission.adph.state.al.us"
  >

  <sch:title>NEMSIS ISO Schematron file for EMSDataSet for Alabama</sch:title>

  <sch:ns prefix="nem" uri="http://www.nemsis.org"/>
  <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>

  <!-- "Initialize" variables used by nemsisDiagnostic. -->
  <sch:let name="nemsisElements" value="()"/>
  <sch:let name="nemsisElementsMissing" value="''"/>
  <sch:let name="nemsisElementsMissingContext" value="()"/>
  
  <sch:let name="v6_release_date" value="xs:dateTime('2020-01-01T00:00:00-05:00')"/>

  <!-- Set up key for NEMSIS element name lookup list (look up XML element name to retrieve NEMSIS element name). -->
	<xsl:variable name="nemSch_lookup_elements">
		<?DSDL_INCLUDE_START includes/lookup_elements.xml#nemSch_lookup_elements?>
			<nemSch_lookup_elements xmlns="http://www.nemsis.org" xml:id="nemSch_lookup_elements">
				<element name="dAgency.01">EMS Agency Unique State ID</element>
				<element name="dAgency.02">EMS Agency Number</element>
				<element name="dAgency.03">EMS Agency Name</element>
				<element name="dAgency.04">EMS Agency State</element>
				<element name="dAgency.05">EMS Agency Service Area States</element>
				<element name="dAgency.06">EMS Agency Service Area County(ies)</element>
				<element name="dAgency.07">EMS Agency Census Tracts</element>
				<element name="dAgency.08">EMS Agency Service Area ZIP Codes</element>
				<element name="dAgency.09">Primary Type of Service</element>
				<element name="dAgency.10">Other Types of Service</element>
				<element name="dAgency.11">Level of Service</element>
				<element name="dAgency.12">Organization Status</element>
				<element name="dAgency.13">Organizational Type</element>
				<element name="dAgency.14">EMS Agency Organizational Tax Status</element>
				<element name="dAgency.15">Statistical Calendar Year</element>
				<element name="dAgency.16">Total Primary Service Area Size</element>
				<element name="dAgency.17">Total Service Area Population</element>
				<element name="dAgency.18">911 EMS Call Center Volume per Year</element>
				<element name="dAgency.19">EMS Dispatch Volume per Year</element>
				<element name="dAgency.20">EMS Patient Transport Volume per Year</element>
				<element name="dAgency.21">EMS Patient Contact Volume per Year</element>
				<element name="dAgency.22">EMS Billable Calls per Year</element>
				<element name="dAgency.23">EMS Agency Time Zone</element>
				<element name="dAgency.24">EMS Agency Daylight Savings Time Use</element>
				<element name="dAgency.25">National Provider Identifier</element>
				<element name="dAgency.26">Fire Department ID Number</element>
				<element name="dConfiguration.01">State Associated with the Certification/Licensure Levels</element>
				<element name="dConfiguration.02">State Certification/Licensure Levels</element>
				<element name="dConfiguration.03">Procedures Permitted by the State</element>
				<element name="dConfiguration.04">Medications Permitted by the State</element>
				<element name="dConfiguration.05">Protocols Permitted by the State</element>
				<element name="dConfiguration.06">EMS Certification Levels Permitted to Perform Each Procedure</element>
				<element name="dConfiguration.07">EMS Agency Procedures</element>
				<element name="dConfiguration.08">EMS Certification Levels Permitted to Administer Each Medication</element>
				<element name="dConfiguration.09">EMS Agency Medications</element>
				<element name="dConfiguration.10">EMS Agency Protocols</element>
				<element name="dConfiguration.11">EMS Agency Specialty Service Capability</element>
				<element name="dConfiguration.12">Billing Status</element>
				<element name="dConfiguration.13">Emergency Medical Dispatch (EMD) Provided to EMS Agency Service Area</element>
				<element name="dConfiguration.14">EMD Vendor</element>
				<element name="dConfiguration.15">Patient Monitoring Capability(ies)</element>
				<element name="dConfiguration.16">Crew Call Sign</element>
				<element name="dConfiguration.17">Dispatch Center (CAD) Name or ID</element>
				<element name="dContact.01">Agency Contact Type</element>
				<element name="dContact.02">Agency Contact Last Name</element>
				<element name="dContact.03">Agency Contact First Name</element>
				<element name="dContact.04">Agency Contact Middle Name/Initial</element>
				<element name="dContact.05">Agency Contact Address</element>
				<element name="dContact.06">Agency Contact City</element>
				<element name="dContact.07">Agency Contact State</element>
				<element name="dContact.08">Agency Contact ZIP Code</element>
				<element name="dContact.09">Agency Contact Country</element>
				<element name="dContact.10">Agency Contact Phone Number</element>
				<element name="dContact.11">Agency Contact Email Address</element>
				<element name="dContact.12">EMS Agency Contact Web Address</element>
				<element name="dContact.13">Agency Medical Director Degree</element>
				<element name="dContact.14">Agency Medical Director Board Certification Type</element>
				<element name="dContact.15">Medical Director Compensation</element>
				<element name="dContact.16">EMS Medical Director Fellowship Trained Status</element>
				<element name="dCustomConfiguration.01">Custom Data Element Title</element>
				<element name="dCustomConfiguration.02">Custom Definition</element>
				<element name="dCustomConfiguration.03">Custom Data Type</element>
				<element name="dCustomConfiguration.04">Custom Data Element Recurrence</element>
				<element name="dCustomConfiguration.05">Custom Data Element Usage</element>
				<element name="dCustomConfiguration.06">Custom Data Element Potential Values</element>
				<element name="dCustomConfiguration.07">Custom Data Element Potential NOT Values (NV)</element>
				<element name="dCustomConfiguration.08">Custom Data Element Potential Pertinent Negative Values (PN)</element>
				<element name="dCustomConfiguration.09">Custom Data Element Grouping ID</element>
				<element name="dCustomResults.01">Custom Data Element Result</element>
				<element name="dCustomResults.02">Custom Element ID Referenced</element>
				<element name="dCustomResults.03">CorrelationID of DemographicReport Element or Group</element>
				<element name="dDevice.01">Medical Device Serial Number</element>
				<element name="dDevice.02">Medical Device Name or ID</element>
				<element name="dDevice.03">Medical Device Type</element>
				<element name="dDevice.04">Medical Device Manufacturer</element>
				<element name="dDevice.05">Medical Device Model Number</element>
				<element name="dDevice.06">Medical Device Purchase Date</element>
				<element name="dFacility.01">Type of Facility</element>
				<element name="dFacility.02">Facility Name</element>
				<element name="dFacility.03">Facility Location Code</element>
				<element name="dFacility.04">Hospital Designations</element>
				<element name="dFacility.05">Facility National Provider Identifier</element>
				<element name="dFacility.06">Facility Room, Suite, or Apartment</element>
				<element name="dFacility.07">Facility Street Address</element>
				<element name="dFacility.08">Facility City</element>
				<element name="dFacility.09">Facility State</element>
				<element name="dFacility.10">Facility ZIP Code</element>
				<element name="dFacility.11">Facility County</element>
				<element name="dFacility.12">Facility Country</element>
				<element name="dFacility.13">Facility GPS Location</element>
				<element name="dFacility.14">Facility US National Grid Coordinates</element>
				<element name="dFacility.15">Facility Phone Number</element>
				<element name="dLocation.01">EMS Location Type</element>
				<element name="dLocation.02">EMS Location Name</element>
				<element name="dLocation.03">EMS Location Number</element>
				<element name="dLocation.04">EMS Location GPS</element>
				<element name="dLocation.05">EMS Location US National Grid Coordinates</element>
				<element name="dLocation.06">EMS Location Address</element>
				<element name="dLocation.07">EMS Location City</element>
				<element name="dLocation.08">EMS Location State</element>
				<element name="dLocation.09">EMS Station or Location ZIP Code</element>
				<element name="dLocation.10">EMS Location County</element>
				<element name="dLocation.11">EMS Location Country</element>
				<element name="dLocation.12">EMS Location Phone Number</element>
				<element name="dPersonnel.01">EMS Personnel's Last Name</element>
				<element name="dPersonnel.02">EMS Personnel's First Name</element>
				<element name="dPersonnel.03">EMS Personnel's Middle Name/Initial</element>
				<element name="dPersonnel.04">EMS Personnel's Mailing Address</element>
				<element name="dPersonnel.05">EMS Personnel's City of Residence</element>
				<element name="dPersonnel.06">EMS Personnel's State</element>
				<element name="dPersonnel.07">EMS Personnel's ZIP Code</element>
				<element name="dPersonnel.08">EMS Personnel's Country</element>
				<element name="dPersonnel.09">EMS Personnel's Phone Number</element>
				<element name="dPersonnel.10">EMS Personnel's Email Address</element>
				<element name="dPersonnel.11">EMS Personnel's Date of Birth</element>
				<element name="dPersonnel.12">EMS Personnel's Gender</element>
				<element name="dPersonnel.13">EMS Personnel's Race</element>
				<element name="dPersonnel.14">EMS Personnel's Citizenship</element>
				<element name="dPersonnel.15">EMS Personnel's Highest Educational Degree</element>
				<element name="dPersonnel.16">EMS Personnel's Degree Subject/Field of Study</element>
				<element name="dPersonnel.17">EMS Personnel's Motor Vehicle License Type</element>
				<element name="dPersonnel.18">EMS Personnel's Immunization Status</element>
				<element name="dPersonnel.19">EMS Personnel's Immunization Year</element>
				<element name="dPersonnel.20">EMS Personnel's Foreign Language Ability</element>
				<element name="dPersonnel.21">EMS Personnel's Agency ID Number</element>
				<element name="dPersonnel.22">EMS Personnel's State of Licensure</element>
				<element name="dPersonnel.23">EMS Personnel's State's Licensure ID Number</element>
				<element name="dPersonnel.24">EMS Personnel's State EMS Certification Licensure Level</element>
				<element name="dPersonnel.25">EMS Personnel's State EMS Current Certification Date</element>
				<element name="dPersonnel.26">EMS Personnel's Initial State's Licensure Issue Date</element>
				<element name="dPersonnel.27">EMS Personnel's Current State's Licensure Expiration Date</element>
				<element name="dPersonnel.28">EMS Personnel's National Registry Number</element>
				<element name="dPersonnel.29">EMS Personnel's National Registry Certification Level</element>
				<element name="dPersonnel.30">EMS Personnel's Current National Registry Expiration Date</element>
				<element name="dPersonnel.31">EMS Personnel's Employment Status</element>
				<element name="dPersonnel.32">EMS Personnel's Employment Status Date</element>
				<element name="dPersonnel.33">EMS Personnel's Hire Date</element>
				<element name="dPersonnel.34">EMS Personnel's Primary EMS Job Role</element>
				<element name="dPersonnel.35">EMS Personnel's Other Job Responsibilities</element>
				<element name="dPersonnel.36">EMS Personnel's Total Length of Service in Years</element>
				<element name="dPersonnel.37">EMS Personnel's Date Length of Service Documented</element>
				<element name="dPersonnel.38">EMS Personnel's Practice Level</element>
				<element name="dPersonnel.39">Date of Personnel's Certification or Licensure for Agency</element>
				<element name="dState.01">State Required Element</element>
				<element name="dVehicle.01">Unit/Vehicle Number</element>
				<element name="dVehicle.02">Vehicle Identification Number</element>
				<element name="dVehicle.03">EMS Unit Call Sign</element>
				<element name="dVehicle.04">Vehicle Type</element>
				<element name="dVehicle.05">Crew State Certification/Licensure Levels</element>
				<element name="dVehicle.06">Number of Each EMS Personnel Level on Normal 911 Ambulance Response</element>
				<element name="dVehicle.07">Number of Each EMS Personnel Level on Normal 911 Response (Non-Transport) Vehicle</element>
				<element name="dVehicle.08">Number of Each EMS Personnel Level on Normal Medical (Non-911) Transport Ambulance</element>
				<element name="dVehicle.09">Vehicle Initial Cost</element>
				<element name="dVehicle.10">Vehicle Model Year</element>
				<element name="dVehicle.11">Year Miles/Kilometers Hours Accrued</element>
				<element name="dVehicle.12">Annual Vehicle Hours</element>
				<element name="dVehicle.13">Annual Vehicle Miles/Kilometers</element>
				<element name="eAirway.01">Indications for Invasive Airway</element>
				<element name="eAirway.02">Date/Time Airway Device Placement Confirmation</element>
				<element name="eAirway.03">Airway Device Being Confirmed</element>
				<element name="eAirway.04">Airway Device Placement Confirmed Method</element>
				<element name="eAirway.05">Tube Depth</element>
				<element name="eAirway.06">Type of Individual Confirming Airway Device Placement</element>
				<element name="eAirway.07">Crew Member ID</element>
				<element name="eAirway.08">Airway Complications Encountered</element>
				<element name="eAirway.09">Suspected Reasons for Failed Airway Management</element>
				<element name="eAirway.10">Date/Time Decision to Manage the Patient with an Invasive Airway</element>
				<element name="eAirway.11">Date/Time Invasive Airway Placement Attempts Abandoned</element>
				<element name="eArrest.01">Cardiac Arrest</element>
				<element name="eArrest.02">Cardiac Arrest Etiology</element>
				<element name="eArrest.03">Resuscitation Attempted By EMS</element>
				<element name="eArrest.04">Arrest Witnessed By</element>
				<element name="eArrest.05">CPR Care Provided Prior to EMS Arrival</element>
				<element name="eArrest.06">Who Provided CPR Prior to EMS Arrival</element>
				<element name="eArrest.07">AED Use Prior to EMS Arrival</element>
				<element name="eArrest.08">Who Used AED Prior to EMS Arrival</element>
				<element name="eArrest.09">Type of CPR Provided</element>
				<element name="eArrest.11">First Monitored Arrest Rhythm of the Patient</element>
				<element name="eArrest.12">Any Return of Spontaneous Circulation</element>
				<element name="eArrest.13">Neurological Outcome at Hospital Discharge</element>
				<element name="eArrest.14">Date/Time of Cardiac Arrest</element>
				<element name="eArrest.15">Date/Time Resuscitation Discontinued</element>
				<element name="eArrest.16">Reason CPR/Resuscitation Discontinued</element>
				<element name="eArrest.17">Cardiac Rhythm on Arrival at Destination</element>
				<element name="eArrest.18">End of EMS Cardiac Arrest Event</element>
				<element name="eArrest.19">Date/Time of Initial CPR</element>
				<element name="eCrew.01">Crew Member ID</element>
				<element name="eCrew.02">Crew Member Level</element>
				<element name="eCrew.03">Crew Member Response Role</element>
				<element name="eCustomConfiguration.01">Custom Data Element Title</element>
				<element name="eCustomConfiguration.02">Custom Definition</element>
				<element name="eCustomConfiguration.03">Custom Data Type</element>
				<element name="eCustomConfiguration.04">Custom Data Element Recurrence</element>
				<element name="eCustomConfiguration.05">Custom Data Element Usage</element>
				<element name="eCustomConfiguration.06">Custom Data Element Potential Values</element>
				<element name="eCustomConfiguration.07">Custom Data Element Potential NOT Values (NV)</element>
				<element name="eCustomConfiguration.08">Custom Data Element Potential Pertinent Negative Values (PN)</element>
				<element name="eCustomConfiguration.09">Custom Data Element Grouping ID</element>
				<element name="eCustomResults.01">Custom Data Element Result</element>
				<element name="eCustomResults.02">Custom Element ID Referenced</element>
				<element name="eCustomResults.03">CorrelationID of PatientCareReport Element or Group</element>
				<element name="eDevice.01">Medical Device Serial Number</element>
				<element name="eDevice.02">Date/Time of Event (per Medical Device)</element>
				<element name="eDevice.03">Medical Device Event Type</element>
				<element name="eDevice.04">Medical Device Waveform Graphic Type</element>
				<element name="eDevice.05">Medical Device Waveform Graphic</element>
				<element name="eDevice.06">Medical Device Mode (Manual, AED, Pacing, CO2, O2, etc)</element>
				<element name="eDevice.07">Medical Device ECG Lead</element>
				<element name="eDevice.08">Medical Device ECG Interpretation</element>
				<element name="eDevice.09">Type of Shock</element>
				<element name="eDevice.10">Shock or Pacing Energy</element>
				<element name="eDevice.11">Total Number of Shocks Delivered</element>
				<element name="eDevice.12">Pacing Rate</element>
				<element name="eDispatch.01">Complaint Reported by Dispatch</element>
				<element name="eDispatch.02">EMD Performed</element>
				<element name="eDispatch.03">EMD Card Number</element>
				<element name="eDispatch.04">Dispatch Center Name or ID</element>
				<element name="eDispatch.05">Dispatch Priority (Patient Acuity)</element>
				<element name="eDispatch.06">Unit Dispatched CAD Record ID</element>
				<element name="eDisposition.01">Destination/Transferred To, Name</element>
				<element name="eDisposition.02">Destination/Transferred To, Code</element>
				<element name="eDisposition.03">Destination Street Address</element>
				<element name="eDisposition.04">Destination City</element>
				<element name="eDisposition.05">Destination State</element>
				<element name="eDisposition.06">Destination County</element>
				<element name="eDisposition.07">Destination ZIP Code</element>
				<element name="eDisposition.08">Destination Country</element>
				<element name="eDisposition.09">Destination GPS Location</element>
				<element name="eDisposition.10">Destination Location US National Grid Coordinates </element>
				<element name="eDisposition.11">Number of Patients Transported in this EMS Unit</element>
				<element name="eDisposition.12">Incident/Patient Disposition</element>
				<element name="eDisposition.13">How Patient Was Moved to Ambulance</element>
				<element name="eDisposition.14">Position of Patient During Transport</element>
				<element name="eDisposition.15">How Patient Was Transported From Ambulance</element>
				<element name="eDisposition.16">EMS Transport Method</element>
				<element name="eDisposition.17">Transport Mode from Scene</element>
				<element name="eDisposition.18">Additional Transport Mode Descriptors</element>
				<element name="eDisposition.19">Final Patient Acuity</element>
				<element name="eDisposition.20">Reason for Choosing Destination</element>
				<element name="eDisposition.21">Type of Destination</element>
				<element name="eDisposition.22">Hospital In-Patient Destination</element>
				<element name="eDisposition.23">Hospital Capability</element>
				<element name="eDisposition.24">Destination Team Pre-Arrival Alert or Activation</element>
				<element name="eDisposition.25">Date/Time of Destination Prearrival Alert or Activation</element>
				<element name="eDisposition.26">Disposition Instructions Provided</element>
				<element name="eExam.01">Estimated Body Weight in Kilograms</element>
				<element name="eExam.02">Length Based Tape Measure</element>
				<element name="eExam.03">Date/Time of Assessment</element>
				<element name="eExam.04">Skin Assessment</element>
				<element name="eExam.05">Head Assessment</element>
				<element name="eExam.06">Face Assessment</element>
				<element name="eExam.07">Neck Assessment</element>
				<element name="eExam.08">Chest/Lungs Assessment</element>
				<element name="eExam.09">Heart Assessment</element>
				<element name="eExam.10">Abdominal Assessment Finding Location</element>
				<element name="eExam.11">Abdomen Assessment</element>
				<element name="eExam.12">Pelvis/Genitourinary Assessment</element>
				<element name="eExam.13">Back and Spine Assessment Finding Location</element>
				<element name="eExam.14">Back and Spine Assessment</element>
				<element name="eExam.15">Extremity Assessment Finding Location</element>
				<element name="eExam.16">Extremities Assessment</element>
				<element name="eExam.17">Eye Assessment Finding Location</element>
				<element name="eExam.18">Eye Assessment</element>
				<element name="eExam.19">Mental Status Assessment</element>
				<element name="eExam.20">Neurological Assessment</element>
				<element name="eExam.21">Stroke/CVA Symptoms Resolved</element>
				<element name="eHistory.01">Barriers to Patient Care</element>
				<element name="eHistory.02">Last Name of Patient's Practitioner</element>
				<element name="eHistory.03">First Name of Patient's Practitioner</element>
				<element name="eHistory.04">Middle Name/Initial of Patient's Practitioner</element>
				<element name="eHistory.05">Advance Directives</element>
				<element name="eHistory.06">Medication Allergies</element>
				<element name="eHistory.07">Environmental/Food Allergies</element>
				<element name="eHistory.08">Medical/Surgical History</element>
				<element name="eHistory.09">Medical History Obtained From</element>
				<element name="eHistory.10">The Patient's Type of Immunization</element>
				<element name="eHistory.11">Immunization Year</element>
				<element name="eHistory.12">Current Medications</element>
				<element name="eHistory.13">Current Medication Dose</element>
				<element name="eHistory.14">Current Medication Dosage Unit</element>
				<element name="eHistory.15">Current Medication Administration Route</element>
				<element name="eHistory.16">Presence of Emergency Information Form</element>
				<element name="eHistory.17">Alcohol/Drug Use Indicators</element>
				<element name="eHistory.18">Pregnancy</element>
				<element name="eHistory.19">Last Oral Intake</element>
				<element name="eInjury.01">Cause of Injury</element>
				<element name="eInjury.02">Mechanism of Injury</element>
				<element name="eInjury.03">Trauma Center Criteria</element>
				<element name="eInjury.04">Vehicular, Pedestrian, or Other Injury Risk Factor</element>
				<element name="eInjury.05">Main Area of the Vehicle Impacted by the Collision</element>
				<element name="eInjury.06">Location of Patient in Vehicle</element>
				<element name="eInjury.07">Use of Occupant Safety Equipment</element>
				<element name="eInjury.08">Airbag Deployment</element>
				<element name="eInjury.09">Height of Fall (feet)</element>
				<element name="eInjury.10">OSHA Personal Protective Equipment Used</element>
				<element name="eInjury.11">ACN System/Company Providing ACN Data</element>
				<element name="eInjury.12">ACN Incident ID</element>
				<element name="eInjury.13">ACN Call Back Phone Number</element>
				<element name="eInjury.14">Date/Time of ACN Incident</element>
				<element name="eInjury.15">ACN Incident Location</element>
				<element name="eInjury.16">ACN Incident Vehicle Body Type</element>
				<element name="eInjury.17">ACN Incident Vehicle Manufacturer</element>
				<element name="eInjury.18">ACN Incident Vehicle Make</element>
				<element name="eInjury.19">ACN Incident Vehicle Model</element>
				<element name="eInjury.20">ACN Incident Vehicle Model Year</element>
				<element name="eInjury.21">ACN Incident Multiple Impacts</element>
				<element name="eInjury.22">ACN Incident Delta Velocity</element>
				<element name="eInjury.23">ACN High Probability of Injury</element>
				<element name="eInjury.24">ACN Incident PDOF</element>
				<element name="eInjury.25">ACN Incident Rollover</element>
				<element name="eInjury.26">ACN Vehicle Seat Location</element>
				<element name="eInjury.27">Seat Occupied</element>
				<element name="eInjury.28">ACN Incident Seatbelt Use</element>
				<element name="eInjury.29">ACN Incident Airbag Deployed</element>
				<element name="eLabs.01">Date/Time of Laboratory or Imaging Result</element>
				<element name="eLabs.02">Study/Result Prior to this Unit's EMS Care</element>
				<element name="eLabs.03">Laboratory Result Type</element>
				<element name="eLabs.04">Laboratory Result</element>
				<element name="eLabs.05">Imaging Study Type</element>
				<element name="eLabs.06">Imaging Study Results</element>
				<element name="eLabs.07">Imaging Study File or Waveform Graphic Type</element>
				<element name="eLabs.08">Imaging Study File or Waveform Graphic</element>
				<element name="eMedications.01">Date/Time Medication Administered</element>
				<element name="eMedications.02">Medication Administered Prior to this Unit's EMS Care</element>
				<element name="eMedications.03">Medication Given</element>
				<element name="eMedications.04">Medication Administered Route</element>
				<element name="eMedications.05">Medication Dosage</element>
				<element name="eMedications.06">Medication Dosage Units</element>
				<element name="eMedications.07">Response to Medication</element>
				<element name="eMedications.08">Medication Complication</element>
				<element name="eMedications.09">Medication Crew (Healthcare Professionals) ID</element>
				<element name="eMedications.10">Role/Type of Person Administering Medication</element>
				<element name="eMedications.11">Medication Authorization</element>
				<element name="eMedications.12">Medication Authorizing Physician</element>
				<element name="eNarrative.01">Patient Care Report Narrative</element>
				<element name="eOther.01">Review Requested</element>
				<element name="eOther.02">Potential System of Care/Specialty/Registry Patient</element>
				<element name="eOther.03">Personal Protective Equipment Used</element>
				<element name="eOther.04">EMS Professional (Crew Member) ID</element>
				<element name="eOther.05">Suspected EMS Work Related Exposure, Injury, or Death</element>
				<element name="eOther.06">The Type of Work-Related Injury, Death or Suspected Exposure</element>
				<element name="eOther.07">Natural, Suspected, Intentional, or Unintentional Disaster</element>
				<element name="eOther.08">Crew Member Completing this Report</element>
				<element name="eOther.09">External Electronic Document Type</element>
				<element name="eOther.10">File Attachment Type</element>
				<element name="eOther.11">File Attachment Image</element>
				<element name="eOther.12">Type of Person Signing</element>
				<element name="eOther.13">Signature Reason</element>
				<element name="eOther.14">Type Of Patient Representative</element>
				<element name="eOther.15">Signature Status</element>
				<element name="eOther.16">Signature File Name</element>
				<element name="eOther.17">Signature File Type</element>
				<element name="eOther.18">Signature Graphic</element>
				<element name="eOther.19">Date/Time of Signature</element>
				<element name="eOther.20">Signature Last Name</element>
				<element name="eOther.21">Signature First Name</element>
				<element name="eOutcome.01">Emergency Department Disposition</element>
				<element name="eOutcome.02">Hospital Disposition</element>
				<element name="eOutcome.03">External Report ID/Number Type</element>
				<element name="eOutcome.04">External Report ID/Number</element>
				<element name="eOutcome.05">Other Report Registry Type</element>
				<element name="eOutcome.06">Emergency Department Chief Complaint</element>
				<element name="eOutcome.07">First ED Systolic Blood Pressure</element>
				<element name="eOutcome.08">Emergency Department Recorded Cause of Injury</element>
				<element name="eOutcome.09">Emergency Department Procedures</element>
				<element name="eOutcome.10">Emergency Department Diagnosis</element>
				<element name="eOutcome.11">Date/Time of Hospital Admission</element>
				<element name="eOutcome.12">Hospital Procedures</element>
				<element name="eOutcome.13">Hospital Diagnosis</element>
				<element name="eOutcome.14">Total ICU Length of Stay</element>
				<element name="eOutcome.15">Total Ventilator Days</element>
				<element name="eOutcome.16">Date/Time of Hospital Discharge</element>
				<element name="eOutcome.17">Outcome at Hospital Discharge</element>
				<element name="ePatient.01">EMS Patient ID</element>
				<element name="ePatient.02">Last Name</element>
				<element name="ePatient.03">First Name</element>
				<element name="ePatient.04">Middle Initial/Name</element>
				<element name="ePatient.05">Patient's Home Address</element>
				<element name="ePatient.06">Patient's Home City</element>
				<element name="ePatient.07">Patient's Home County</element>
				<element name="ePatient.08">Patient's Home State</element>
				<element name="ePatient.09">Patient's Home ZIP Code</element>
				<element name="ePatient.10">Patient's Country of Residence</element>
				<element name="ePatient.11">Patient Home Census Tract</element>
				<element name="ePatient.12">Social Security Number</element>
				<element name="ePatient.13">Gender</element>
				<element name="ePatient.14">Race</element>
				<element name="ePatient.15">Age</element>
				<element name="ePatient.16">Age Units</element>
				<element name="ePatient.17">Date of Birth</element>
				<element name="ePatient.18">Patient's Phone Number</element>
				<element name="ePatient.19">Patient's Email Address</element>
				<element name="ePatient.20">State Issuing Driver's License</element>
				<element name="ePatient.21">Driver's License Number</element>
				<element name="ePayment.01">Primary Method of Payment</element>
				<element name="ePayment.02">Physician Certification Statement</element>
				<element name="ePayment.03">Date Physician Certification Statement Signed</element>
				<element name="ePayment.04">Reason for Physician Certification Statement</element>
				<element name="ePayment.05">Healthcare Provider Type Signing Physician Certification Statement</element>
				<element name="ePayment.06">Last Name of Individual Signing Physician Certification Statement</element>
				<element name="ePayment.07">First Name of Individual Signing Physician Certification Statement</element>
				<element name="ePayment.08">Patient Resides in Service Area</element>
				<element name="ePayment.09">Insurance Company ID</element>
				<element name="ePayment.10">Insurance Company Name</element>
				<element name="ePayment.11">Insurance Company Billing Priority</element>
				<element name="ePayment.12">Insurance Company Address</element>
				<element name="ePayment.13">Insurance Company City</element>
				<element name="ePayment.14">Insurance Company State</element>
				<element name="ePayment.15">Insurance Company ZIP Code</element>
				<element name="ePayment.16">Insurance Company Country</element>
				<element name="ePayment.17">Insurance Group ID</element>
				<element name="ePayment.18">Insurance Policy ID Number</element>
				<element name="ePayment.19">Last Name of the Insured</element>
				<element name="ePayment.20">First Name of the Insured</element>
				<element name="ePayment.21">Middle Initial/Name of the Insured</element>
				<element name="ePayment.22">Relationship to the Insured</element>
				<element name="ePayment.23">Closest Relative/Guardian Last Name</element>
				<element name="ePayment.24">Closest Relative/ Guardian First Name</element>
				<element name="ePayment.25">Closest Relative/ Guardian Middle Initial/Name</element>
				<element name="ePayment.26">Closest Relative/ Guardian Street Address</element>
				<element name="ePayment.27">Closest Relative/ Guardian City</element>
				<element name="ePayment.28">Closest Relative/ Guardian State</element>
				<element name="ePayment.29">Closest Relative/ Guardian ZIP Code</element>
				<element name="ePayment.30">Closest Relative/ Guardian Country</element>
				<element name="ePayment.31">Closest Relative/ Guardian Phone Number</element>
				<element name="ePayment.32">Closest Relative/ Guardian Relationship</element>
				<element name="ePayment.33">Patient's Employer</element>
				<element name="ePayment.34">Patient's Employer's Address</element>
				<element name="ePayment.35">Patient's Employer's City</element>
				<element name="ePayment.36">Patient's Employer's State</element>
				<element name="ePayment.37">Patient's Employer's ZIP Code</element>
				<element name="ePayment.38">Patient's Employer's Country</element>
				<element name="ePayment.39">Patient's Employer's Primary Phone Number</element>
				<element name="ePayment.40">Response Urgency</element>
				<element name="ePayment.41">Patient Transport Assessment</element>
				<element name="ePayment.42">Specialty Care Transport Care Provider</element>
				<element name="ePayment.44">Ambulance Transport Reason Code</element>
				<element name="ePayment.45">Round Trip Purpose Description</element>
				<element name="ePayment.46">Stretcher Purpose Description</element>
				<element name="ePayment.47">Ambulance Conditions Indicator</element>
				<element name="ePayment.48">Mileage to Closest Hospital Facility</element>
				<element name="ePayment.49">ALS Assessment Performed and Warranted</element>
				<element name="ePayment.50">CMS Service Level</element>
				<element name="ePayment.51">EMS Condition Code</element>
				<element name="ePayment.52">CMS Transportation Indicator</element>
				<element name="ePayment.53">Transport Authorization Code</element>
				<element name="ePayment.54">Prior Authorization Code Payer</element>
				<element name="ePayment.55">Supply Item Used Name</element>
				<element name="ePayment.56">Number of Supply Item(s) Used</element>
				<element name="ePayment.57">Payer Type</element>
				<element name="ePayment.58">Insurance Group Name</element>
				<element name="eProcedures.01">Date/Time Procedure Performed</element>
				<element name="eProcedures.02">Procedure Performed Prior to this Unit's EMS Care</element>
				<element name="eProcedures.03">Procedure</element>
				<element name="eProcedures.04">Size of Procedure Equipment</element>
				<element name="eProcedures.05">Number of Procedure Attempts</element>
				<element name="eProcedures.06">Procedure Successful</element>
				<element name="eProcedures.07">Procedure Complication</element>
				<element name="eProcedures.08">Response to Procedure</element>
				<element name="eProcedures.09">Procedure Crew Members ID</element>
				<element name="eProcedures.10">Role/Type of Person Performing the Procedure</element>
				<element name="eProcedures.11">Procedure Authorization</element>
				<element name="eProcedures.12">Procedure Authorizing Physician</element>
				<element name="eProcedures.13">Vascular Access Location</element>
				<element name="eProtocols.01">Protocols Used</element>
				<element name="eProtocols.02">Protocol Age Category</element>
				<element name="eRecord.01">Patient Care Report Number</element>
				<element name="eRecord.02">Software Creator</element>
				<element name="eRecord.03">Software Name</element>
				<element name="eRecord.04">Software Version</element>
				<element name="eResponse.01">EMS Agency Number</element>
				<element name="eResponse.02">EMS Agency Name</element>
				<element name="eResponse.03">Incident Number</element>
				<element name="eResponse.04">EMS Response Number</element>
				<element name="eResponse.05">Type of Service Requested</element>
				<element name="eResponse.06">Standby Purpose</element>
				<element name="eResponse.07">Primary Role of the Unit</element>
				<element name="eResponse.08">Type of Dispatch Delay</element>
				<element name="eResponse.09">Type of Response Delay</element>
				<element name="eResponse.10">Type of Scene Delay</element>
				<element name="eResponse.11">Type of Transport Delay</element>
				<element name="eResponse.12">Type of Turn-Around Delay</element>
				<element name="eResponse.13">EMS Vehicle (Unit) Number</element>
				<element name="eResponse.14">EMS Unit Call Sign</element>
				<element name="eResponse.15">Level of Care of This Unit</element>
				<element name="eResponse.16">Vehicle Dispatch Location</element>
				<element name="eResponse.17">Vehicle Dispatch GPS Location</element>
				<element name="eResponse.18">Vehicle Dispatch Location US National Grid Coordinates</element>
				<element name="eResponse.19">Beginning Odometer Reading of Responding Vehicle</element>
				<element name="eResponse.20">On-Scene Odometer Reading of Responding Vehicle</element>
				<element name="eResponse.21">Patient Destination Odometer Reading of Responding Vehicle</element>
				<element name="eResponse.22">Ending Odometer Reading of Responding Vehicle</element>
				<element name="eResponse.23">Response Mode to Scene</element>
				<element name="eResponse.24">Additional Response Mode Descriptors</element>
				<element name="eScene.01">First EMS Unit on Scene</element>
				<element name="eScene.02">Other EMS or Public Safety Agencies at Scene</element>
				<element name="eScene.03">Other EMS or Public Safety Agency ID Number</element>
				<element name="eScene.04">Type of Other Service at Scene</element>
				<element name="eScene.05">Date/Time Initial Responder Arrived on Scene</element>
				<element name="eScene.06">Number of Patients at Scene</element>
				<element name="eScene.07">Mass Casualty Incident</element>
				<element name="eScene.08">Triage Classification for MCI Patient</element>
				<element name="eScene.09">Incident Location Type</element>
				<element name="eScene.10">Incident Facility Code</element>
				<element name="eScene.11">Scene GPS Location</element>
				<element name="eScene.12">Scene US National Grid Coordinates</element>
				<element name="eScene.13">Incident Facility or Location Name</element>
				<element name="eScene.14">Mile Post or Major Roadway</element>
				<element name="eScene.15">Incident Street Address</element>
				<element name="eScene.16">Incident Apartment, Suite, or Room</element>
				<element name="eScene.17">Incident City</element>
				<element name="eScene.18">Incident State</element>
				<element name="eScene.19">Incident ZIP Code</element>
				<element name="eScene.20">Scene Cross Street or Directions</element>
				<element name="eScene.21">Incident County</element>
				<element name="eScene.22">Incident Country</element>
				<element name="eScene.23">Incident Census Tract</element>
				<element name="eSituation.01">Date/Time of Symptom Onset</element>
				<element name="eSituation.02">Possible Injury</element>
				<element name="eSituation.03">Complaint Type</element>
				<element name="eSituation.04">Complaint</element>
				<element name="eSituation.05">Duration of Complaint</element>
				<element name="eSituation.06">Time Units of Duration of Complaint</element>
				<element name="eSituation.07">Chief Complaint Anatomic Location</element>
				<element name="eSituation.08">Chief Complaint Organ System</element>
				<element name="eSituation.09">Primary Symptom</element>
				<element name="eSituation.10">Other Associated Symptoms</element>
				<element name="eSituation.11">Provider's Primary Impression</element>
				<element name="eSituation.12">Provider's Secondary Impressions</element>
				<element name="eSituation.13">Initial Patient Acuity</element>
				<element name="eSituation.14">Work-Related Illness/Injury</element>
				<element name="eSituation.15">Patient's Occupational Industry</element>
				<element name="eSituation.16">Patient's Occupation</element>
				<element name="eSituation.17">Patient Activity</element>
				<element name="eSituation.18">Date/Time Last Known Well</element>
				<element name="eState.01">State Required Element</element>
				<element name="eTimes.01">PSAP Call Date/Time</element>
				<element name="eTimes.02">Dispatch Notified Date/Time</element>
				<element name="eTimes.03">Unit Notified by Dispatch Date/Time</element>
				<element name="eTimes.04">Dispatch Acknowledged Date/Time</element>
				<element name="eTimes.05">Unit En Route Date/Time</element>
				<element name="eTimes.06">Unit Arrived on Scene Date/Time</element>
				<element name="eTimes.07">Arrived at Patient Date/Time</element>
				<element name="eTimes.08">Transfer of EMS Patient Care Date/Time</element>
				<element name="eTimes.09">Unit Left Scene Date/Time</element>
				<element name="eTimes.10">Arrival at Destination Landing Area Date/Time</element>
				<element name="eTimes.11">Patient Arrived at Destination Date/Time</element>
				<element name="eTimes.12">Destination Patient Transfer of Care Date/Time</element>
				<element name="eTimes.13">Unit Back in Service Date/Time</element>
				<element name="eTimes.14">Unit Canceled Date/Time</element>
				<element name="eTimes.15">Unit Back at Home Location Date/Time</element>
				<element name="eTimes.16">EMS Call Completed Date/Time</element>
				<element name="eVitals.01">Date/Time Vital Signs Taken</element>
				<element name="eVitals.02">Obtained Prior to this Unit's EMS Care</element>
				<element name="eVitals.03">Cardiac Rhythm / Electrocardiography (ECG)</element>
				<element name="eVitals.04">ECG Type</element>
				<element name="eVitals.05">Method of ECG Interpretation</element>
				<element name="eVitals.06">SBP (Systolic Blood Pressure)</element>
				<element name="eVitals.07">DBP (Diastolic Blood Pressure)</element>
				<element name="eVitals.08">Method of Blood Pressure Measurement</element>
				<element name="eVitals.09">Mean Arterial Pressure</element>
				<element name="eVitals.10">Heart Rate</element>
				<element name="eVitals.11">Method of Heart Rate Measurement</element>
				<element name="eVitals.12">Pulse Oximetry</element>
				<element name="eVitals.13">Pulse Rhythm</element>
				<element name="eVitals.14">Respiratory Rate</element>
				<element name="eVitals.15">Respiratory Effort</element>
				<element name="eVitals.16">End Tidal Carbon Dioxide (ETCO2)</element>
				<element name="eVitals.17">Carbon Monoxide (CO)</element>
				<element name="eVitals.18">Blood Glucose Level</element>
				<element name="eVitals.19">Glasgow Coma Score-Eye</element>
				<element name="eVitals.20">Glasgow Coma Score-Verbal</element>
				<element name="eVitals.21">Glasgow Coma Score-Motor</element>
				<element name="eVitals.22">Glasgow Coma Score-Qualifier</element>
				<element name="eVitals.23">Total Glasgow Coma Score</element>
				<element name="eVitals.24">Temperature</element>
				<element name="eVitals.25">Temperature Method</element>
				<element name="eVitals.26">Level of Responsiveness (AVPU)</element>
				<element name="eVitals.27">Pain Scale Score</element>
				<element name="eVitals.28">Pain Scale Type</element>
				<element name="eVitals.29">Stroke Scale Score</element>
				<element name="eVitals.30">Stroke Scale Type</element>
				<element name="eVitals.31">Reperfusion Checklist</element>
				<element name="eVitals.32">APGAR</element>
				<element name="eVitals.33">Revised Trauma Score</element>
			</nemSch_lookup_elements>
		<?DSDL_INCLUDE_END includes/lookup_elements.xml#nemSch_lookup_elements?>
	</xsl:variable>

	<sch:let name="nemSch_elements" value="$nemSch_lookup_elements//*:nemSch_lookup_elements"/>
	<xsl:key name="nemSch_key_elements" match="nem:element" use="@name"/>


  <!-- PHASES -->

  <!-- Place phase elements here (optional). -->


  <!-- PATTERNS to require NEMSIS optional elements -->

  <sch:pattern id="al_no_submission_from_non_alabama_agency_pattern">

		<sch:title>Require PCR to be from an Alabama licensed agency</sch:title>
		
		<sch:rule id="al_no_submission_from_non_alabama_agency_rule" context="nem:DemographicGroup">

			<sch:let name="nemsisElements" value="ancestor-or-self::nem:DemographicGroup/nem:dAgency.04"/>

			<sch:let name="dAgency.04" value="ancestor-or-self::nem:DemographicGroup/nem:dAgency.04[. = '01']" />
			
			<sch:assert id="al_no_submission_from_non_alabama_agency_assert" role="[FATAL]" diagnostics="nemsisDiagnostic" test="$dAgency.04">
				<sch:value-of select="key('nemSch_key_elements', 'dAgency.04', $nemSch_elements)"/> must be Alabama.
			</sch:assert>
		
		</sch:rule>

	</sch:pattern>
	
	<!-- RESCUEAggregator-346 BEGIN -->
	<sch:pattern id="al_eDisposition02_check_pattern">
		
		<sch:title>Require eDisposition.02 to be in correct format</sch:title>
		
		<sch:rule id="al_eDisposition02_check_pattern_rule" context="nem:PatientCareReport/nem:eDisposition/nem:eDisposition.DestinationGroup">
		
			<sch:let name="nemsisElements" value="ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.DestinationGroup"/>
			
			<sch:let name="rule_is_active" value="xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= $v6_release_date"/>
			<sch:let name="disposition_is_out_of_state" value="nem:eDisposition.05 != '01'"/>
			<sch:let name="edisposition02_has_value" value="nem:eDisposition.02 != ''"/>
			<sch:let name="in_state_pattern" value="'^[A-Z][0-9]{4}$'"/>
			<sch:let name="out_of_state_pattern" value="'^[A-Z]{3}[0-9]{3}$'"/>
			<sch:let name="edisposition02_pattern_matches_in_state" value="matches(nem:eDisposition.02, $in_state_pattern)" />
			<sch:let name="edisposition02_pattern_matches_out_of_state" value="matches(nem:eDisposition.02, $out_of_state_pattern)" />
			
			<sch:assert id="al_eDisposition02_check_pattern_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($rule_is_active) or not($edisposition02_has_value) or $disposition_is_out_of_state or $edisposition02_pattern_matches_in_state">
				<sch:value-of select="key('nemSch_key_elements', 'eDisposition.02', $nemSch_elements)"/> is not in the correct format for an in-state facility.
			</sch:assert>
			
			<sch:assert id="al_eDisposition02_check_pattern_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($rule_is_active) or not($edisposition02_has_value) or not($disposition_is_out_of_state) or $edisposition02_pattern_matches_out_of_state">
				<sch:value-of select="key('nemSch_key_elements', 'eDisposition.02', $nemSch_elements)"/> is not in the correct format for an out-of-state facility.
			</sch:assert>
		
		</sch:rule>

	</sch:pattern>
	<!-- RESCUEAggregator-346 END -->
	
	<!-- RESCUEAggregator-342 BEGIN -->
	<sch:pattern id="al_eDisposition02_should_exist">
		
		<sch:title>eDisposition.02 should be recorded if eDisposition.12 indicates patient transport</sch:title>
		
		<sch:rule id="al_eDisposition02_should_exist_rule" context="nem:PatientCareReport/nem:eDisposition">
			
			<sch:let name="nemsisElementsMissing" value="ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.DestinationGroup/nem:eDisposition.02"/>
			<sch:let name="nemsisElementsMissingContext" value="ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.DestinationGroup"/>
			
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- no_transport: No patient or Without Transport, No Treatment/Transport Required, Released, or Transferred. -->
			<sch:let name="no_transport" value="if($no_patient or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212015, 4212019, 4212021, 4212025, 4212027, 4212029, 4212031)]) then true() else false()"/>
			<sch:let name="no_emstransport" value="if($no_transport or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212035, 4212037, 4212043)]) then true() else false()"/>
			
			<sch:let name="rule_is_active" value="xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= $v6_release_date"/>
			
			<sch:let name="eDisposition02" value="nem:eDisposition.DestinationGroup/nem:eDisposition.02[. != '']"/>
			<sch:let name="eDisposition21" value="nem:eDisposition.21[. = ('4221003', '4221005', '4221023')]"/>
					
			<sch:assert id="al_eDisposition02_should_exist_assert" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($rule_is_active) or not($no_emstransport) or not($eDisposition21) or $eDisposition02">
				<sch:value-of select="key('nemSch_key_elements', 'eDisposition.02', $nemSch_elements)"/> should have a value when
				<sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/> and/or
				<sch:value-of select="key('nemSch_key_elements', 'eDisposition.21', $nemSch_elements)"/> indicates a transport to a facility occurred.
			</sch:assert>
		
		</sch:rule>

	</sch:pattern>
	<!-- RESCUEAggregator-342 END -->
	
	<!-- RESCUEAggregator-312 BEGIN -->
	<sch:pattern id="al_procedures_crew_member_exists">
	
		<sch:title>Crew member performing procedure should exist in crew member list</sch:title>
		
		<sch:rule id="al_procedures_crew_member_exists_rule" context="nem:PatientCareReport/nem:eProcedures/nem:eProcedures.ProcedureGroup[nem:eProcedures.02 = '9923001']">
		
			<sch:let name="nemsisElements" value="nem:eProcedures.10"/>
		
			<sch:let name="rule_is_active" value="xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= $v6_release_date"/>
			<sch:let name="crew_member_administering" value="nem:eProcedures.09[. != '']"/>
			<sch:let name="crew_group" value="ancestor-or-self::nem:PatientCareReport/nem:eCrew/nem:eCrew.CrewGroup" />
			<sch:let name="crew_member_exists" value="for $crew_member in $crew_group return $crew_member/nem:eCrew.01[. = $crew_member_administering]"/>
			
			<sch:assert id="al_procedures_crew_member_procedures_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($rule_is_active) or not($crew_member_administering) or $crew_member_exists">
				The crew member that performed this procedure is not in the crew list.
			</sch:assert>
		
		</sch:rule>
	
	</sch:pattern>
	
	<sch:pattern id="al_medications_crew_member_exists">
	
		<sch:title>Crew member administering medication should exist in crew member list</sch:title>
		
		<sch:rule id="al_medications_crew_member_exists_rule" context="nem:PatientCareReport/nem:eMedications/nem:eMedications.MedicationGroup[nem:eMedications.02 = '9923001']">
		
			<sch:let name="nemsisElements" value="nem:eMedications.10"/>
			
			<sch:let name="rule_is_active" value="xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= $v6_release_date"/>
			<sch:let name="crew_member_administering" value="nem:eMedications.09[. != '']"/>
			<sch:let name="crew_group" value="ancestor-or-self::nem:PatientCareReport/nem:eCrew/nem:eCrew.CrewGroup" />
			<sch:let name="crew_member_exists" value="for $crew_member in $crew_group return $crew_member/nem:eCrew.01[. = $crew_member_administering]"/>
			
			<sch:assert id="al_medications_crew_member_medications_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($rule_is_active) or not($crew_member_administering) or $crew_member_exists">
				The crew member that administered this medication is not in the crew list.
			</sch:assert>
		
		</sch:rule>
	
	</sch:pattern>
	
	<sch:pattern id="al_prohibited_procedures_for_license_level">
		
		<sch:title>Crew member should have license to perform certain procedures</sch:title>
		
		<sch:rule id="al_prohibited_procedures_for_license_level_rule" context="nem:PatientCareReport/nem:eProcedures/nem:eProcedures.ProcedureGroup">
			
			<sch:let name="rule_is_active" value="xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= $v6_release_date"/>
			
			<sch:let name="nemsisElements" value="nem:eProcedures.10"/>
			
			<sch:let name="procedure_performed" value="nem:eProcedures.03"/>
			
			<sch:let name="crew_member_is_emt" value="nem:eProcedures.10[. = '9905005']"/>
			<sch:let name="crew_member_is_intermediate" value="nem:eProcedures.10[. = '9905011']"/>
			<sch:let name="crew_member_is_advanced_emt" value="nem:eProcedures.10[. = '9905001']"/>
			<sch:let name="crew_member_is_paramedic" value="nem:eProcedures.10[. = '9905007']"/>
			<sch:let name="crew_member_is_cc_paramedic" value="nem:eProcedures.10[. = '9905031']"/>
			<sch:let name="crew_member_is_emr" value="nem:eProcedures.10[. = '9905003']"/>
			
			<sch:let name="procedures_prohibited_emt" value="('233516009','233550000','397892004','405430002','58825001','232689008','232690004','232692007','241689008',
														   '392247006','55841001','116762002','182705007','18590009','230937006','235425002','34475007','36708009',
														   '385857005','406164000','42340005','55628002','77938009','86265008','87750000','182777000','225708008',
														   '232674004','232679009','250980009','418613003','425808002','428803005','429163003','450601000124103',
														   '673005','78121007','128968000','2267008','232673005','232685002','232708009','233519002','233526002',
														   '392230005','396540005','397874007','405427009','405442007','410024004','424287005','424979004','42550007',
														   '430824005','450611000124100')"/>
			<sch:let name="procedures_prohibited_intermediate" value="('233516009','233550000','397892004','405430002','58825001','232689008','232690004','232692007',
														    '241689008','392247006','55841001','116762002','182705007','18590009','230937006','235425002',
															'34475007','36708009','385857005','406164000','42340005','55628002','77938009','86265008','87750000')"/>
			<sch:let name="procedures_prohibited_advanced_emt" value="('116762002','182705007','18590009','230937006','232689008','232690004','232692007','233516009',
														    '233550000','235425002','241689008','34475007','36708009','385857005','392247006','397892004',
															'405430002','406164000','42340005','55628002','55841001','58825001','77938009','86265008',
															'87750000','182777000','225708008','232674004','232679009','250980009','418613003','425808002',
															'428803005','429163003','450601000124103','673005','78121007')"/>
			<sch:let name="procedures_prohibited_paramedic" value="('232689008','232690004','232692007','233516009','233550000','241689008','392247006','397892004','405430002','55841001','58825001')"/>
			<sch:let name="procedures_prohibited_cc_paramedic" value="('233516009','233550000','397892004','405430002','58825001')"/>
			
			<sch:let name="emt_prohibited_procedure_used" value="$crew_member_is_emt and (some $procedure in $procedures_prohibited_emt satisfies $procedure = $procedure_performed)"/>
			<sch:let name="intermediate_prohibited_procedure_used" value="$crew_member_is_intermediate and (some $procedure in $procedures_prohibited_intermediate satisfies $procedure = $procedure_performed)"/>
			<sch:let name="advanced_emt_prohibited_procedure_used" value="$crew_member_is_advanced_emt and (some $procedure in $procedures_prohibited_advanced_emt satisfies $procedure = $procedure_performed)"/>
			<sch:let name="paramedic_prohibited_procedure_used" value="$crew_member_is_paramedic and (some $procedure in $procedures_prohibited_paramedic satisfies $procedure = $procedure_performed)"/>
			<sch:let name="cc_paramedic_prohibited_procedure_used" value="$crew_member_is_cc_paramedic and (some $procedure in $procedures_prohibited_cc_paramedic satisfies $procedure = $procedure_performed)"/>
					
			<sch:assert id="al_prohibited_procedures_for_license_level_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($rule_is_active) or not($crew_member_is_emr)">
				The <sch:value-of select="key('nemSch_key_elements', 'eProcedures.10', $nemSch_elements)"/> selected is not qualified to perform this procedure.
			</sch:assert>
					
			<sch:assert id="al_prohibited_procedures_for_license_level_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($rule_is_active) or (not($emt_prohibited_procedure_used) and
																																   not($intermediate_prohibited_procedure_used) and
																																   not($advanced_emt_prohibited_procedure_used) and 
																																   not($paramedic_prohibited_procedure_used) and
																																   not($cc_paramedic_prohibited_procedure_used))">
				The <sch:value-of select="key('nemSch_key_elements', 'eProcedures.10', $nemSch_elements)"/> selected is not qualified to perform this procedure.
			</sch:assert>
		
		</sch:rule>
	
	</sch:pattern>
	
	<sch:pattern id="al_prohibited_medications_for_license_level">
		
		<sch:title>Crew members should have the appropriate license to administer certain medications</sch:title>
		
		<sch:rule id="al_prohibited_medications_for_license_level_rule" context="nem:PatientCareReport/nem:eMedications/nem:eMedications.MedicationGroup">
			
			<sch:let name="rule_is_active" value="xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= $v6_release_date"/>
			
			<sch:let name="nemsisElements" value="nem:eMedications.10"/>
			
			<sch:let name="medication_administered" value="nem:eMedications.03"/>
			
			<sch:let name="crew_member_is_emt" value="nem:eMedications.10[. = '9905005']"/>
			<sch:let name="crew_member_is_intermediate" value="nem:eMedications.10[. = '9905011']"/>
			<sch:let name="crew_member_is_advanced_emt" value="nem:eMedications.10[. = '9905001']"/>
			<sch:let name="crew_member_is_paramedic" value="nem:eMedications.10[. = '9905007']"/>
			<sch:let name="crew_member_is_cc_paramedic" value="nem:eMedications.10[. = '9905031']"/>
			<sch:let name="crew_member_is_emr" value="nem:eMedications.10[. = '9905003']"/>
			
			<sch:let name="medications_prohibited_emt" value="('237653','296','435','703','1901','1908','3322',
															   '3498','3616','3628','328316','49737','4177','4278',
															   '4337','4603','4832','5093','5224','5470','3423','5514',
															   '214199','6130','6185','6387','6470','6585','6628',
															   '6902','6918','6960','7052','7396','7476','7486','7512',
															   '26225','8163','8745','68139','36676','10154','10368',
															   '10454','71535','1223','3443','4457','313002','314610',
															   '1008377','1659108','1795477')"/>
			<sch:let name="medications_prohibited_intermediate" value="('296','703','1901','1908','3322','3616','3628',
																	    '328316','49737','4177','4278','4337','4603',
																		'4832','5093','5224','5470','3423','5514','214199',
																		'6130','6185','6387','6470','6585','6628','6902',
																		'6918','6960','7052','7396','7476','7486','7512',
																		'8163','8745','68139','36676','10154','10368','71535',
																		'1223','3443','4457','314610','1659108')"/>
			<sch:let name="medications_prohibited_advanced_emt" value="('296','703','1901','1908','3322','3616','3628',
																	    '328316','49737','4177','4278','4337','4603',
																		'4832','5093','5224','5470','3423','5514','214199',
																		'6130','6185','6387','6470','6585','6628','6902',
																		'6918','6960','7052','7396','7476','7486','7512',
																		'8163','8745','68139','36676','10154','10368','71535',
																		'1223','3443','4457','314610','1659108')"/>
			<sch:let name="medications_prohibited_paramedic" value="()"/>
			<sch:let name="medications_prohibited_cc_paramedic" value="()"/>
			
			<sch:let name="emt_prohibited_medication_used" value="$crew_member_is_emt and (some $medication in $medications_prohibited_emt satisfies $medication = $medication_administered)"/>
			<sch:let name="intermediate_prohibited_medication_used" value="$crew_member_is_intermediate and (some $medication in $medications_prohibited_intermediate satisfies $medication = $medication_administered)"/>
			<sch:let name="advanced_emt_prohibited_medication_used" value="$crew_member_is_advanced_emt and (some $medication in $medications_prohibited_advanced_emt satisfies $medication = $medication_administered)"/>
			<sch:let name="paramedic_prohibited_medication_used" value="$crew_member_is_paramedic and (some $medication in $medications_prohibited_paramedic satisfies $medication = $medication_administered)"/>
			<sch:let name="cc_paramedic_prohibited_medication_used" value="$crew_member_is_cc_paramedic and (some $medication in $medications_prohibited_cc_paramedic satisfies $medication = $medication_administered)"/>
			
			<sch:assert id="al_prohibited_medications_for_license_level_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($rule_is_active) or not($crew_member_is_emr)">
				The <sch:value-of select="key('nemSch_key_elements', 'eMedications.10', $nemSch_elements)"/> selected is not qualified to administer this medication.
			</sch:assert>
					
			<sch:assert id="al_prohibited_medications_for_license_level_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($rule_is_active) or (not($emt_prohibited_medication_used) and
																																   not($intermediate_prohibited_medication_used) and
																																   not($advanced_emt_prohibited_medication_used) and 
																																   not($paramedic_prohibited_medication_used) and
																																   not($cc_paramedic_prohibited_medication_used))">
				The <sch:value-of select="key('nemSch_key_elements', 'eMedications.10', $nemSch_elements)"/> selected is not qualified to administer this medication.
			</sch:assert>
		
		</sch:rule>
	
	</sch:pattern>
	<!-- RESCUEAggregator-312 END -->
	
  
  <sch:pattern id="al_utr_abstract">
		<sch:title>Abstract rules.</sch:title>

		<sch:rule id="al_abstract_rule_eDisposition.12" abstract="true">

			<!-- Disposition flags copied from national rule nemSch_consistency_eDisposition.12_all. -->
		  
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>

			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>

			<!-- no_treatment: No patient or No Resuscitation Attempted, Patient Refused Evaluation/Care, or No Treatment/Transport Required. (Note: it is possible but not necessary that treatment was given in the case of Patient Refused Evaluation/Care.) -->
			<sch:let name="no_treatment" value="if($no_patient or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212013, 4212015, 4212021, 4212023, 4212025)]) then true() else false()"/>

			<!-- no_transport: No patient or Without Transport, No Treatment/Transport Required, Released, or Transferred. -->
			<sch:let name="no_transport" value="if($no_patient or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212015, 4212019, 4212021, 4212025, 4212027, 4212029, 4212031)]) then true() else false()"/>

			<!-- no_emstransport: No transport or Transported by Law Enforcement, Transported by Private Vehicle, Transport Non-Patient. -->
			<sch:let name="no_emstransport" value="if($no_transport or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212035, 4212037, 4212043)]) then true() else false()"/>
			
			<!-- Set flags based on eResponse.05 Type of Service Requested. -->

			<!-- no_911: eResponse.05 Type of Service Requested is not "911 Response (Scene)". -->
			<sch:let name="no_911" value="if(ancestor-or-self::nem:PatientCareReport/nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05 != 2205001) then true() else false()"/>
			
			<!-- no_interfacility_medical_transport: eResponse.05 Type of Service Requested is not "Interfacility Transport" or "Medical Transport". -->
			<sch:let name="no_interfacility_medical_transport" value="if(ancestor-or-self::nem:PatientCareReport/nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05 != (2205005, 2205007)) then true() else false()"/>

			<sch:report id="al_abstract_report_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="false()">
				Dummy report needed to make this rule valid. This report will never succeed.
			</sch:report>

		</sch:rule>

	</sch:pattern>
  
  <sch:pattern id="al_always_required_pattern_1">

		<sch:title>Certain elements are always required</sch:title>

		<sch:rule id="al_requirement_eCrew.01_eCrew.02_eCrew.03_rule_1" context="nem:eCrew.CrewGroup">

			<sch:let name="eCrew.01" value="if(normalize-space(nem:eCrew.01) != '' or nem:eCrew.01[@NV]) then '' else key('nemSch_key_elements', 'eCrew.01', $nemSch_elements)"/>
			<sch:let name="eCrew.02" value="if(normalize-space(nem:eCrew.02) != '' or nem:eCrew.02[@NV]) then '' else key('nemSch_key_elements', 'eCrew.02', $nemSch_elements)"/>
			<sch:let name="eCrew.03" value="if(nem:eCrew.03 != '' or nem:eCrew.03[@NV]) then '' else key('nemSch_key_elements', 'eCrew.03', $nemSch_elements)"/>

			<sch:let name="nemsisElementsMissing" value="string-join((.[$eCrew.01]/'eCrew.01', .[$eCrew.02]/'eCrew.02', .[$eCrew.03]/'eCrew.03'), ' ')"/>

			<!-- This assert is based on Rules 117 and 118, migrated from the v2 validations -->
			<!-- eCrew.01 and eCrew.02 are both Optional (Recommended) and Nillable with NVs. According to the xsd, the elements will either be present with a value, present with no value (with a NV), or not be present at all. We must test to see if there is a data value (which will also test for the presence of the element). -->
			<!-- This rule was modified on 8/3/2016 to include eCrew.03 for Alabama-->
			<sch:assert id="al_requirement_eCrew.01_eCrew.02_eCrew.03_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eCrew.01)">
				<sch:value-of select="key('nemSch_key_elements', 'eCrew.01', $nemSch_elements)"/> should be recorded.
			</sch:assert>
			
			<sch:assert id="al_requirement_eCrew.01_eCrew.02_eCrew.03_assert_2" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eCrew.02)">
				<sch:value-of select="key('nemSch_key_elements', 'eCrew.02', $nemSch_elements)"/> should be recorded.
			</sch:assert>
			
			<sch:assert id="al_requirement_eCrew.01_eCrew.02_eCrew.03_assert_3" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eCrew.03)">
				<sch:value-of select="key('nemSch_key_elements', 'eCrew.03', $nemSch_elements)"/> should be recorded.
			</sch:assert>

		</sch:rule>
		
		<sch:rule id="al_always_required_crew_group_rule_1" context="nem:eCrew">
		
			<!-- This rule is based on always required rules - eCrew.01, eCrew.02, eCrew.03 -->
			
			<sch:let name="nemsisElementsMissing" value="'eCrew.01 eCrew.02 eCrew.03'"/>
			<sch:let name="nemsisElementsMissingContext" value="nem:eCrew.CrewGroup"/>
			
			<sch:assert id="al_always_required_crew_group_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eCrew.CrewGroup">
				<sch:value-of select="key('nemSch_key_elements', 'eCrew.01', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eCrew.02', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eCrew.03', $nemSch_elements)"/> are required.
			</sch:assert>
		
		</sch:rule>				
		
		<!-- Make sure eCrew sections exists -->
		<sch:rule id="al_always_required_eCrew_rule_1" context="nem:PatientCareReport">		
			
			<sch:let name="nemsisElementsMissing" value="'eCrew.01 eCrew.02 eCrew.03'"/>
			<sch:let name="nemsisElementsMissingContext" value="nem:eCrew/nem:eCrew.CrewGroup"/>
			
			<sch:assert id="al_always_required_eCrew_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eCrew">
				Crew Member(s) must be included.
			</sch:assert>
		
		</sch:rule>

		<!-- eOther.08 required -->
		<sch:rule id="al_always_required_eOther.08_rule_1" context="nem:eOther">
				
			<!-- look for either a value or NV-->
			<sch:let name="eOther.08" value="if(nem:eOther.08 != '' or nem:eOther.08[@NV]) then '' else key('nemSch_key_elements', 'eOther.08', $nemSch_elements)"/>
			
			<sch:let name="nemsisElements" value="nem:eOther.08[$eOther.08]"/>
			<sch:let name="nemsisElementsMissing" value="'eOther.08'"/>
			
			<sch:assert id="al_always_required_eOther.08_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eOther.08)">
				<sch:value-of select="key('nemSch_key_elements', 'eOther.08', $nemSch_elements)"/> is required.
			</sch:assert>
		
		</sch:rule>		
			
	</sch:pattern>


	<sch:pattern id="al_always_required_pattern_2">

		<sch:title>Starting 07/16/2018, Incident County and State elements are always required</sch:title>
		
		<sch:rule id="al_always_required_eScene_rule" context="nem:eScene">

			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= xs:dateTime('2018-07-16T00:00:00-05:00')) then true() else false()" />
			<sch:let name="eScene.18" value="if(nem:eScene.18 != '') then true() else false()"/>
			<sch:let name="eScene.21" value="if(nem:eScene.21 != '') then true() else false()"/>
			
			<sch:let name="nemsisElements" value="nem:eScene.18[not($eScene.18)], nem:eScene.21[not($eScene.21)]"/>
			
			<sch:assert id="al_always_required_eScene.18_eScene.21_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or ($eScene.18 and $eScene.21)">
				<sch:value-of select="key('nemSch_key_elements', 'eScene.21', $nemSch_elements)"/> and <sch:value-of select="key('nemSch_key_elements', 'eScene.18', $nemSch_elements)"/> are required.
			</sch:assert>
		
		</sch:rule>
			
	</sch:pattern>
	
	<sch:pattern id="al_required_with_patient_eSituation_02_pattern">
		<sch:title>Certain elements are required when Possible Injury is Yes.</sch:title>
		<sch:rule id="al_required_with_patient_eInjury.02" context="nem:PatientCareReport">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!--Check to see if eSituation.02 is 'yes' first, and if it is and there is a patient, make eInjury.02 required -->
			<sch:let name="eSituation.02" value="if(nem:eSituation/nem:eSituation.02 != ('9922005')) then '' else key('nemSch_key_elements', 'eSituation.02', $nemSch_elements)"/>
			<sch:let name="eInjury.02" value="if($eSituation.02 and not($no_patient)) then (if(not(nem:eInjury/nem:eInjury.02) or nem:eInjury/nem:eInjury.02 = '') then key('nemSch_key_elements', 'eInjury.02', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eSituation/nem:eSituation.02, nem:eInjury/nem:eInjury.02" />
			<sch:let name="nemsisElementsMissing" value="'eInjury.02'" />
			<sch:let name="nemsisElementsMissingContext" value="nem:eInjury" />
			
			<sch:assert id="al_required_with_patient_eInjury.02_assert" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eInjury.02)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/> and <sch:value-of select="key('nemSch_key_elements', 'eSituation.02', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eInjury.02', $nemSch_elements)"/> is required.
			</sch:assert>
		
		</sch:rule>
		
	</sch:pattern>

	<!-- RESCUEAggregator-386 START -->
	<sch:pattern id="al_required_with_patient_ePatientAgeGroup">
		<sch:title>Patient age is required when there is patient contact or treatment.</sch:title>

		<sch:rule id="al_required_with_patient_ePatient.15" context="nem:ePatient.15">			

			<sch:let name="nemsisElements" value="." />

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_required_with_patient_ePatientAgeGroup_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_patient or $no_treatment or .[not(@NV)]">
				<sch:value-of select="key('nemSch_key_elements', 'ePatient.15', $nemSch_elements)"/> should be recorded when <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/> indicates there is patient contact or treatment.
			</sch:assert>

		</sch:rule>

		<sch:rule id="al_required_with_patient_ePatient.16" context="nem:ePatient.16">			

			<sch:let name="nemsisElements" value="." />

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_required_with_patient_ePatientAgeGroup_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_patient or $no_treatment or .[not(@NV)]">
				<sch:value-of select="key('nemSch_key_elements', 'ePatient.16', $nemSch_elements)"/> should be recorded when <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/> indicates there is patient contact or treatment.
			</sch:assert>

		</sch:rule>
	</sch:pattern>
	<!-- RESCUEAggregator-386 END -->

	<sch:pattern id="al_required_with_patient_eExam.01_pattern">
		<sch:title>Estimated Body Weight is required when a patient is 15 years old or younger.</sch:title>
		<sch:rule id="al_required_with_patient_eExam.01_rule_1" context="nem:eExam">
		<!-- Require eExam_01 if patient is <= 15 years old -->

			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= xs:dateTime('2020-03-02T00:00:00-06:00')) then true() else false()" />
			
			<sch:let name="nemsisElementsMissing" value="'eExam.01'"/>

			<sch:let name="patientIsUnder16Years" value="(ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.AgeGroup/nem:ePatient.16[not (. = '') and not(@NV) and . != '2516009']) or (ancestor::nem:PatientCareReport/nem:ePatient/nem:ePatient.AgeGroup/nem:ePatient.15[not (. = '') and not(@NV) and . &lt; 16])" />
						
			<sch:let name="weightRecorded" value="if(nem:eExam.01 != '') then true() else false()" />

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_required_with_patient_eExam.01_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or $no_patient or not($patientIsUnder16Years) or $weightRecorded">
				If a patient is 15 years old or younger, <sch:value-of select="key('nemSch_key_elements', 'eExam.01', $nemSch_elements)"/> must be recorded.
			</sch:assert>
			
		</sch:rule>

	</sch:pattern>
		
	<sch:pattern id="al_required_with_confirmation_group_pattern">
		<sch:title>Crew Member ID is required for an Airway Confirmation.</sch:title>
		<!-- if a there is a confirmation group in eAirway, make eAirway.07 required -->
		<sch:rule id="al_required_with_confirmation_group_eAirway.07_rule_1" context="nem:eAirway.ConfirmationGroup">
			
			<sch:let name="nemsisElementsMissing" value="'eAirway.07'"/>
			
			<sch:assert id="al_required_with_confirmation_group_eAirway.07_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eAirway.07 != '' or nem:eAirway.07[@NV]">
				<sch:value-of select="key('nemSch_key_elements', 'eAirway.07', $nemSch_elements)"/> is required.
			</sch:assert>
			
		</sch:rule>
	
	</sch:pattern>
	
	<sch:pattern id="al_required_if_suspected_injury_pattern">
		<sch:title>EMS Professional (Crew Member) ID is required when Suspected EMS Work Related Exposure, Injury, or Death is Yes.</sch:title>
		<!-- if eOther.05 = yes (9923003), then require eOther.04 -->
		<sch:rule id="al_required_if_suspected_injury_rule_1" context="nem:eOther.EMSCrewMemberGroup">
		
			<sch:let name="eOther.05" value="if(nem:eOther.05 != ('9923003')) then '' else key('nemSch_key_elements', 'eOther.05', $nemSch_elements)"/>
			<sch:let name="eOther.04" value="if(not($eOther.05) or ($eOther.05 and nem:eOther.04 != '')) then '' else key('nemSch_key_elements', 'eOther.04', $nemSch_elements)"/>
			
			<sch:let name="nemsisElementsMissing" value="'eOther.04'"/>
		
			<sch:assert id="al_required_if_suspected_injury_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eOther.04)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eOther.05', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eOther.04', $nemSch_elements)"/> should be recorded.
			</sch:assert>
			
		</sch:rule>
		
	</sch:pattern>
	
	<sch:pattern id="al_required_with_transport_pattern">
		<sch:title>Certain elements are required when there is a transport by the EMS unit.</sch:title>
		
		<sch:rule id="al_required_with_transport_rule_1" context="nem:eDisposition.DestinationGroup">	
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			<!-- no_transport: No patient or Without Transport, No Treatment/Transport Required, Released, or Transferred. -->
			<sch:let name="no_transport" value="if($no_patient or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212015, 4212019, 4212021, 4212025, 4212027, 4212029, 4212031)]) then true() else false()"/>
			<!-- no_emstransport: No transport or Transported by Law Enforcement, Transported by Private Vehicle, Transport Non-Patient. -->
			<sch:let name="no_emstransport" value="if($no_transport or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212035, 4212037, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on conditional rule - eDisposition.01: If Disposition is transport -->
			<sch:let name="eDisposition.01" value="if(not($no_emstransport)) then (if (not(nem:eDisposition.01) or nem:eDisposition.01[@xsi:nil = 'true' and not(@NV)]) then key('nemSch_key_elements', 'eDisposition.01', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on conditional rule - eDisposition.02: If Disposition is transport -->
			<sch:let name="eDisposition.02" value="if(not($no_emstransport)) then (if (not(nem:eDisposition.02) or nem:eDisposition.02[@xsi:nil = 'true' and not(@NV)]) then key('nemSch_key_elements', 'eDisposition.01', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on conditional rule - eDisposition.03: If Disposition is transport -->
			<sch:let name="eDisposition.03" value="if(not($no_emstransport)) then (if (not(nem:eDisposition.03)) then key('nemSch_key_elements', 'eDisposition.03', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on conditional rule - eDisposition.04: If Disposition is transport -->
			<sch:let name="eDisposition.04" value="if(not($no_emstransport)) then (if (not(nem:eDisposition.04)) then key('nemSch_key_elements', 'eDisposition.04', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eDisposition.01[$eDisposition.01], nem:eDisposition.02[$eDisposition.02], nem:eDisposition.03[$eDisposition.03], nem:eDisposition.04[$eDisposition.04]"/>
			<sch:let name="nemsisElementsMissing" value="string-join((.[$eDisposition.01]/'eDisposition.01', .[$eDisposition.02]/'eDisposition.02', .[$eDisposition.03]/'eDisposition.03', .[$eDisposition.04]/'eDisposition.04'), ' ')"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_transport_eDisposition.01_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eDisposition.01 or $eDisposition.02 or $eDisposition.03 or $eDisposition.04)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="string-join(($eDisposition.01, $eDisposition.02, $eDisposition.03, $eDisposition.04)[. != ''], ', ')"/>
			</sch:assert>
			
		</sch:rule>
		
	</sch:pattern>
	
	<sch:pattern id="al_required_with_conditions_pattern">
		<sch:title>Certain elements are required in special conditions.</sch:title>
		
		<sch:rule id="al_required_with_eDisposition.12_canceled_eTimes.14_rule_1" context="nem:eTimes">
		
			<sch:let name="run_canceled" value="if (ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212007, 4212009, 4212011)]) then true() else false()" />
			
			<!-- This assert flag is based on conditional rule - eDisposition.04: If Disposition is transport -->
			<sch:let name="eTimes.14_value" value="if($run_canceled) then (if (not(nem:eTimes.14)) then key('nemSch_key_elements', 'eTimes.14', $nemSch_elements) else '') else ''"/>
			<sch:let name="eTimes.14_novalue" value="if(not($run_canceled)) then (if (nem:eTimes.14) then key('nemSch_key_elements', 'eTimes.14', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eTimes.14[$eTimes.14_novalue]"/>
			<sch:let name="nemsisElementsMissing" value=".[$eTimes.14_value]/'eTimes.14'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_eDisposition.12_canceled_eTimes.14_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eTimes.14_value)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eTimes.14_value"/>
			</sch:assert>

			<sch:assert id="al_required_with_eDisposition.12_canceled_eTimes.14_assert_2" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eTimes.14_novalue)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should not have a value:
				<sch:value-of select="$eTimes.14_novalue"/>
			</sch:assert>
			
		</sch:rule>
		
	</sch:pattern>

	<sch:pattern id="al_required_with_transfer_pattern_1">
		<sch:title>Certain elements are required when there is a transfer of patient care.</sch:title>

		<sch:rule id="al_required_with_transfer_eTimes.08_rule_1" context="nem:eTimes">
			
			<!-- Check for eTimes.08 if eDisposition.12 is Patient Treated, Transferred Care to Another EMS Unit -->
			<sch:let name="eTimes.08" value="if( ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212031)] ) then (if (not(nem:eTimes.08) or nem:eTimes.08 = '') then key('nemSch_key_elements', 'eTimes.08', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eTimes.08[$eTimes.08]"/>
			<sch:let name="nemsisElementsMissing" value="'eTimes.08'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_eTimes.08_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eTimes.08)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eTimes.08"/>
			</sch:assert>
			
		</sch:rule>

	</sch:pattern>
  
 	<sch:pattern id="al_required_with_patient_pattern_1">
		<sch:title>Certain elements are required when there is a patient.</sch:title>
		
		<sch:rule id="al_required_with_patient_ePatient.PatientNameGroup_rule_1" context="nem:ePatient">
			<!-- This rule is based on Conditional rules - ePatient.02 and ePatient.03: If Disposition is patient -->
			
			<sch:let name="nemsisElementsMissing" value="'ePatient.02 ePatient.03'"/>
			<!-- ePatient.PatientNameGroup will not be in the xPath for ePatient.02 and ePatient.03 in the diagnostics because it isn't in the actual XML -->
			<sch:let name="nemsisElementsMissingContext" value="nem:ePatient.PatientNameGroup"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that there should be a PatientNameGroup if there is a patient. -->
			<sch:assert id="al_required_with_patient_PatientNameGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or nem:ePatient.PatientNameGroup">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="key('nemSch_key_elements', 'ePatient.02', $nemSch_elements)"/> and <sch:value-of select="key('nemSch_key_elements', 'ePatient.03', $nemSch_elements)"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_ePatient.02_ePatient.03_rule_1" context="nem:ePatient.PatientNameGroup">

			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- This assert flag is based on Conditional rule - ePatient.02: If Disposition is patient -->
			<sch:let name="ePatient.02" value="if(not($no_patient)) then (if (not(nem:ePatient.02) or nem:ePatient.02[@xsi:nil = 'true' and not(@PN)]) then key('nemSch_key_elements', 'ePatient.02', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - ePatient.03: If Disposition is patient -->
			<sch:let name="ePatient.03" value="if(not($no_patient)) then (if (not(nem:ePatient.03) or nem:ePatient.03[@xsi:nil = 'true' and not(@PN)]) then key('nemSch_key_elements', 'ePatient.03', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:ePatient.02[$ePatient.02], nem:ePatient.03[$ePatient.03]"/>
			<sch:let name="nemsisElementsMissing" value="string-join((.[$ePatient.02]/'ePatient.02', .[$ePatient.03]/'ePatient.03'), ' ')"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_ePatient.02_ePatient.03_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ePatient.02 or $ePatient.03)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="string-join(($ePatient.02, $ePatient.03)[. != ''], ', ')"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eScene.17_rule_1" context="nem:eScene">			
			
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. Excluding including Patient Refused Eval/Care (Without Transport). -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on Conditional rule - eScene.17: If Disposition is patient -->
			<sch:let name="eScene.17" value="if(not($no_patient)) then (if (not(nem:eScene.17) or nem:eScene.17 = '') then key('nemSch_key_elements', 'eScene.17', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eScene.17"/>
			<sch:let name="nemsisElementsMissing" value="'eScene.17'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_eScene.17_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eScene.17)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eScene.17"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eSituation.PatientComplaintGroup_rule_1" context="nem:eSituation">		
			
			<!-- This rule is based on Conditional rules - eSituation.04, eSituation.05 and eSituation.06: If Disposition is patient -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<sch:let name="not_911_or_intercept_service" value="ancestor::nem:PatientCareReport/nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. &gt; 2205003]"/>
			
			<sch:let name="patient_is_oriented" value="some $element in ancestor::nem:PatientCareReport/nem:eVitals/nem:eVitals.VitalGroup satisfies $element/nem:eVitals.GlasgowScoreGroup/nem:eVitals.20[. = '5']"/>
			<sch:let name="patient_is_adult" value="if(not($no_patient) and ancestor::nem:PatientCareReport/nem:ePatient/nem:ePatient.AgeGroup/nem:ePatient.16[not(. = '') and not(@NV) and . = 2516009] and ancestor::nem:PatientCareReport/nem:ePatient/nem:ePatient.AgeGroup/nem:ePatient.15[not(. = '') and not(@NV) and . &gt;= 18]) then true() else false()"/>			
			
			<sch:let name="nemsisElementsMissing" value="'eSituation.04 eSituation.05 eSituation.06'"/>
			<!-- eSituation.PatientComplaintGroup will not be in the xPath for eSituation.04, eSituation.05 and eSituation.06 in the diagnostics because it isn't in the actual XML -->
			<sch:let name="nemsisElementsMissingContext" value="nem:eSituation.PatientComplaintGroup"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that there should be a PatientComplaintGroup if there is a patient. -->
			<sch:assert id="al_required_with_patient_eSituation.PatientComplaintGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or $not_911_or_intercept_service or nem:eSituation.PatientComplaintGroup or not($patient_is_oriented and $patient_is_adult)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.20', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="key('nemSch_key_elements', 'eSituation.04', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eSituation.05', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eSituation.06', $nemSch_elements)"/>
			</sch:assert>
			
			<sch:assert id="al_required_with_patient_eSituation.PatientComplaintGroup_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_patient or $not_911_or_intercept_service or nem:eSituation.PatientComplaintGroup or ($patient_is_oriented and $patient_is_adult)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.20', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="key('nemSch_key_elements', 'eSituation.04', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eSituation.05', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eSituation.06', $nemSch_elements)"/>
			</sch:assert>
		
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eHistory.06_eHistory.18_rule_1" context="nem:eHistory">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- This assert flag is based on Conditional rule - eHistory.06: If Disposition is patient -->
			<sch:let name="eHistory.06" value="if(not($no_patient)) then (if (not(nem:eHistory.06) or nem:eHistory.06[@xsi:nil = 'true' and not(@PN) and not(@NV)]) then key('nemSch_key_elements', 'eHistory.06', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eHistory.18: If Disposition is patient -->
			<sch:let name="eHistory.18" value="if(not($no_patient)) then (if ( ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.13[not(@NV) and . = '9906001'] and (not(nem:eHistory.18) or nem:eHistory.18[@xsi:nil = 'true' and not(@PN)])) then key('nemSch_key_elements', 'eHistory.18', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eHistory.06[$eHistory.06]"/>
			<sch:let name="nemsisElementsMissing" value="string-join((.[$eHistory.06]/'eHistory.06', .[$eHistory.18]/'eHistory.18'), ' ')"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_eHistory.06_eHistory.18_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eHistory.06)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eHistory.06"/>
			</sch:assert>

			<sch:assert id="al_required_with_patient_eHistory.06_eHistory.18_assert_2" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eHistory.18)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/> and <sch:value-of select="key('nemSch_key_elements', 'ePatient.13', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eHistory.18"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eHistory.12_rule_1" context="nem:eHistory.CurrentMedsGroup">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on Conditional rule - eHistory.12: If Disposition is patient -->
			<sch:let name="eHistory.12" value="if(not($no_patient)) then (if (not(nem:eHistory.12) or nem:eHistory.12[@xsi:nil = 'true' and not(@PN) and not(@NV)]) then key('nemSch_key_elements', 'eHistory.12', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eHistory.12[$eHistory.12]"/>
			<sch:let name="nemsisElementsMissing" value="'eHistory.12'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_eHistory.12" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eHistory.12)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eHistory.12"/>
			</sch:assert>
		
		</sch:rule>
				
		<sch:rule id="al_required_with_patient_eExam_rule_1" context="nem:PatientCareReport">
			<!-- This rule is based on Conditional rules - eExam fields: If Disposition is patient -->
			
			<sch:let name="nemsisElementsMissing" value="'eExam.03 eExam.04 eExam.05 eExam.06 eExam.07 eExam.08 eExam.09 eExam.11 eExam.12 eExam.14 eExam.16 eExam.18 eExam.19 eExam.20'"/>
			<!-- eExam and any of its children will not be in the xPath for in the diagnostics because it isn't in the actual XML -->
			<sch:let name="nemsisElementsMissingContext" value="nem:eExam"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that there should be an eExam section if there is a patient. -->
			<sch:assert id="al_required_with_patient_eExam_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or nem:eExam">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="key('nemSch_key_elements', 'eExam.03', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.04', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.05', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.06', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.07', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.08', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.09', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.11', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.14', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.16', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.18', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.19', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.20', $nemSch_elements)"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eExam.AssessmentGroup_rule_1" context="nem:eExam">
			<!-- This rule is based on Conditional rules - eExam.AssessmentGroup fields: If Disposition is patient -->
			
			<sch:let name="nemsisElementsMissing" value="'eExam.03 eExam.04 eExam.05 eExam.06 eExam.07 eExam.08 eExam.09 eExam.11 eExam.12 eExam.14 eExam.16 eExam.18 eExam.19 eExam.20'"/>
			<!-- eExam.AssessmentGroup and any of its children will not be in the xPath for in the diagnostics because it isn't in the actual XML -->
			<sch:let name="nemsisElementsMissingContext" value="nem:eExam.AssessmentGroup"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that there should be an eExam section if there is a patient. -->
			<sch:assert id="al_required_with_patient_eExam.AssessmentGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or nem:eExam.AssessmentGroup">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="key('nemSch_key_elements', 'eExam.03', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.04', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.05', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.06', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.07', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.08', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.09', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.11', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.14', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.16', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.18', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.19', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.20', $nemSch_elements)"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eExam.AssessmentGroup_elements_rule_1" context="nem:eExam.AssessmentGroup">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- This assert flag is based on Conditional rule - eExam.03: If Disposition is patient -->
			<sch:let name="eExam.03" value="if(not($no_patient)) then (if (not(nem:eExam.03)) then key('nemSch_key_elements', 'eExam.03', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eExam.04: If Disposition is patient -->
			<sch:let name="eExam.04" value="if(not($no_patient)) then (if (not(nem:eExam.04)) then key('nemSch_key_elements', 'eExam.04', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eExam.05: If Disposition is patient -->
			<sch:let name="eExam.05" value="if(not($no_patient)) then (if (not(nem:eExam.05)) then key('nemSch_key_elements', 'eExam.05', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eExam.06: If Disposition is patient -->
			<sch:let name="eExam.06" value="if(not($no_patient)) then (if (not(nem:eExam.06)) then key('nemSch_key_elements', 'eExam.06', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eExam.07: If Disposition is patient -->
			<sch:let name="eExam.07" value="if(not($no_patient)) then (if (not(nem:eExam.07)) then key('nemSch_key_elements', 'eExam.07', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eExam.08: If Disposition is patient -->
			<sch:let name="eExam.08" value="if(not($no_patient)) then (if (not(nem:eExam.08)) then key('nemSch_key_elements', 'eExam.08', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eExam.09: If Disposition is patient -->
			<sch:let name="eExam.09" value="if(not($no_patient)) then (if (not(nem:eExam.09)) then key('nemSch_key_elements', 'eExam.09', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eExam.12: If Disposition is patient -->
			<sch:let name="eExam.12" value="if(not($no_patient)) then (if (not(nem:eExam.12)) then key('nemSch_key_elements', 'eExam.12', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eExam.19: If Disposition is patient -->
			<sch:let name="eExam.19" value="if(not($no_patient)) then (if (not(nem:eExam.19)) then key('nemSch_key_elements', 'eExam.19', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eExam.20: If Disposition is patient -->
			<sch:let name="eExam.20" value="if(not($no_patient)) then (if (not(nem:eExam.20)) then key('nemSch_key_elements', 'eExam.20', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eExam.03[$eExam.03], nem:eExam.04[$eExam.04], nem:eExam.05[$eExam.05], nem:eExam.06[$eExam.06], nem:eExam.07[$eExam.07], nem:eExam.08[$eExam.08], nem:eExam.09[$eExam.09], nem:eExam.12[$eExam.12], nem:eExam.19[$eExam.19], nem:eExam.20[$eExam.20]"/>
			<sch:let name="nemsisElementsMissing" value="string-join((.[$eExam.03]/'eExam.03', .[$eExam.04]/'eExam.04', .[$eExam.05]/'eExam.05', .[$eExam.06]/'eExam.06', .[$eExam.07]/'eExam.07', .[$eExam.08]/'eExam.08', .[$eExam.09]/'eExam.09', .[$eExam.12]/'eExam.12', .[$eExam.19]/'eExam.19', .[$eExam.20]/'eExam.20'), ' ')"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_eExam.AssessmentGroup_elements" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eExam.03 or $eExam.04 or $eExam.05 or $eExam.06 or $eExam.07 or $eExam.08 or $eExam.09 or $eExam.12 or $eExam.19 or $eExam.20)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="string-join(($eExam.03, $eExam.04, $eExam.05, $eExam.06, $eExam.07, $eExam.08, $eExam.09, $eExam.12, $eExam.19, $eExam.20)[. != ''], ', ')"/>
			</sch:assert>
			
		</sch:rule>		
	</sch:pattern>
	
	<sch:pattern id="al_required_with_patient_eScene.14-15_pattern">
	
		<sch:title>If there is a patient, either 'Mile Post or Major Roadway' or 'Incident Street Address' should have a value.</sch:title>
		<sch:rule id="al_required_with_patient_eScene.14-15_rule_1" context="nem:eScene">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on Conditional rule - eScene.14: If Disposition is patient -->
			<sch:let name="eScene.14" value="if(not($no_patient)) then (if (normalize-space(nem:eScene.14) = '') then key('nemSch_key_elements', 'eScene.14', $nemSch_elements) else '') else ''"/>
			<!-- This assert flag is based on Conditional rule - eScene.15: If Disposition is patient -->
			<sch:let name="eScene.15" value="if(not($no_patient)) then (if (normalize-space(nem:eScene.15) = '') then key('nemSch_key_elements', 'eScene.15', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eScene.14[$eScene.14], nem:eScene.15[$eScene.15]"/>
			<sch:let name="nemsisElementsMissing" value="string-join((.[$eScene.14]/'eScene.14', .[$eScene.15]/'eScene.15'), ' ')"/>
			
			<sch:assert id="al_required_with_patient_eScene.14_eScene.15_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eScene.14 and $eScene.15)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, either 
				<sch:value-of select="$eScene.14"/> or <sch:value-of select="$eScene.15"/> should have a value
			</sch:assert>
		
		</sch:rule>
	
	</sch:pattern>
	
	<!--For rules that have same context as other rules-->
	<sch:pattern id="al_required_with_patient_pattern_2">
		
		<sch:title>Certain elements are required when there is a patient.</sch:title>
				
		<sch:rule id="al_required_with_patient_ePatient.17_rule_1" context="nem:ePatient">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- This assert flag is based on Conditional rule - ePatient.17: If Disposition is patient -->
			<sch:let name="ePatient.17" value="if(not($no_patient)) then (if (not(nem:ePatient.17) or nem:ePatient.17[@xsi:nil = 'true' and not(@PN)]) then key('nemSch_key_elements', 'ePatient.17', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:ePatient.17[$ePatient.17]"/>
			<sch:let name="nemsisElementsMissing" value=".[$ePatient.17]/'ePatient.17'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_ePatient.17_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ePatient.17)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$ePatient.17"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eHistory.CurrentMedsGroup_rule_1" context="nem:eHistory">
			<!-- This rule is based on Conditional rules - eHistory.12: If Disposition is patient -->
			
			<sch:let name="nemsisElementsMissing" value="'eHistory.12'"/>
			<!-- eHistory.CurrentMedsGroup will not be in the xPath for eHistory.12 in the diagnostics because it isn't in the actual XML -->
			<sch:let name="nemsisElementsMissingContext" value="nem:eHistory.CurrentMedsGroup"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that there should be a eHistory.CurrentMedsGroup if there is a patient. -->
			<sch:assert id="al_required_with_patient_eHistory.CurrentMedsGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or nem:eHistory.CurrentMedsGroup">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="key('nemSch_key_elements', 'eHistory.12', $nemSch_elements)"/>
			</sch:assert>
		
		</sch:rule>
			
		<sch:rule id="al_required_with_patient_eExam.AbdomenGroup_rule_1" context="nem:eExam.AssessmentGroup">
			<!-- This rule is based on Conditional rules - eExam.AssessmentGroup fields: If Disposition is patient -->
			
			<sch:let name="nemsisElementsMissing" value="'eExam.11'"/>
			<!-- eExam.AbdomenGroup and any of its children will not be in the xPath for in the diagnostics because it isn't in the actual XML -->
			<sch:let name="nemsisElementsMissingContext" value="nem:eExam.AbdomenGroup"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that there should be an eExam.AbdomenGroup section if there is a patient. -->
			<sch:assert id="al_required_with_patient_eExam.AbdomenGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or nem:eExam.AbdomenGroup">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="key('nemSch_key_elements', 'eExam.11', $nemSch_elements)"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eExam.11_rule_1" context="nem:eExam.AbdomenGroup">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on Conditional rule - eExam.11: If Disposition is patient -->
			<sch:let name="eExam.11" value="if(not($no_patient)) then (if (not(nem:eExam.11)) then key('nemSch_key_elements', 'eExam.11', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eExam.11[$eExam.11]"/>
			<sch:let name="nemsisElementsMissing" value="'eExam.11'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_eExam.11_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eExam.11)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eExam.11"/>
			</sch:assert>
			
		</sch:rule>		
		
	</sch:pattern>
	
	<sch:pattern id="al_required_with_patient_pattern_3">
		<sch:title>Certain elements are required when there is a patient.</sch:title>
		
		<sch:rule id="al_required_with_patient_eExam.SpineGroup_rule_1" context="nem:eExam.AssessmentGroup">
			<!-- This rule is based on Conditional rules - eExam.AssessmentGroup fields: If Disposition is patient -->
			
			<sch:let name="nemsisElementsMissing" value="'eExam.14'"/>
			<!-- eExam.SpineGroup and any of its children will not be in the xPath for in the diagnostics because it isn't in the actual XML -->
			<sch:let name="nemsisElementsMissingContext" value="nem:eExam.SpineGroup"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that there should be an eExam section if there is a patient. -->
			<sch:assert id="al_required_with_patient_eExam.SpineGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or nem:eExam.SpineGroup">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="key('nemSch_key_elements', 'eExam.14', $nemSch_elements)"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eExam.14_rule_1" context="nem:eExam.SpineGroup">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- This assert flag is based on Conditional rule - eExam.14: If Disposition is patient -->
			<sch:let name="eExam.14" value="if(not($no_patient)) then (if (not(nem:eExam.14)) then key('nemSch_key_elements', 'eExam.14', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eExam.14[$eExam.14]"/>
			<sch:let name="nemsisElementsMissing" value="'eExam.14'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_eExam.14_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eExam.14)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eExam.14"/>
			</sch:assert>
			
		</sch:rule>
		
	</sch:pattern>
	
	<sch:pattern id="al_required_with_patient_pattern_4">
		<sch:title>Certain elements are required when there is a patient.</sch:title>
		
		<sch:rule id="al_required_with_patient_eExam.ExtremityGroup_rule_1" context="nem:eExam.AssessmentGroup">
			<!-- This rule is based on Conditional rules - eExam.AssessmentGroup fields: If Disposition is patient -->
			
			<sch:let name="nemsisElementsMissing" value="'eExam.16'"/>
			<!-- eExam.ExtremityGroup and any of its children will not be in the xPath for in the diagnostics because it isn't in the actual XML -->
			<sch:let name="nemsisElementsMissingContext" value="nem:eExam.ExtremityGroup"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that there should be an eExam section if there is a patient. -->
			<sch:assert id="al_required_with_patient_eExam.ExtremityGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or nem:eExam.ExtremityGroup">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="key('nemSch_key_elements', 'eExam.16', $nemSch_elements)"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_required_with_patient_eExam.16_rule_1" context="nem:eExam.ExtremityGroup">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- This assert flag is based on Conditional rule - eExam.16: If Disposition is patient -->
			<sch:let name="eExam.16" value="if(not($no_patient)) then (if (not(nem:eExam.16)) then key('nemSch_key_elements', 'eExam.16', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eExam.16[$eExam.16]"/>
			<sch:let name="nemsisElementsMissing" value="'eExam.16'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_eExam.16_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eExam.16)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eExam.16"/>
			</sch:assert>
			
		</sch:rule>
	
	</sch:pattern>
	
	<sch:pattern id="al_required_with_patient_pattern_5">
		<sch:title>Certain elements are required when there is a patient.</sch:title>
		
		<sch:rule id="al_required_with_patient_eExam.EyeGroup_rule_1" context="nem:eExam.AssessmentGroup">
			<!-- This rule is based on Conditional rules - eExam.AssessmentGroup fields: If Disposition is patient -->
			
			<sch:let name="nemsisElementsMissing" value="'eExam.18'"/>
			<!-- eExam.EyeGroup and any of its children will not be in the xPath for in the diagnostics because it isn't in the actual XML -->
			<sch:let name="nemsisElementsMissingContext" value="nem:eExam.EyeGroup"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that there should be an eExam section if there is a patient. -->
			<sch:assert id="al_required_with_patient_eExam.EyeGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or nem:eExam.EyeGroup">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="key('nemSch_key_elements', 'eExam.18', $nemSch_elements)"/>
			</sch:assert>
			
		</sch:rule>		
		
		<sch:rule id="al_required_with_patient_eExam.18_rule_1" context="nem:eExam.EyeGroup">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on Conditional rule - eExam.18: If Disposition is patient -->
			<sch:let name="eExam.18" value="if(not($no_patient)) then (if (not(nem:eExam.18)) then key('nemSch_key_elements', 'eExam.18', $nemSch_elements) else '') else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eExam.18[$eExam.18]"/>
			<sch:let name="nemsisElementsMissing" value="'eExam.18'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_required_with_patient_eExam.18_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eExam.18)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should have a value:
				<sch:value-of select="$eExam.18"/>
			</sch:assert>
			
		</sch:rule>
	</sch:pattern>

	<!-- PATTERNS migrated from Alabama EMSDataSet v2 (mXXX) Validations -->
	
	<sch:pattern id="al_restriction_eVitals.06">
		
		<sch:title>SBP should be between 0 and 299</sch:title>
	
		<sch:rule id="al_restriction_eVitals.06_rule_1" context="nem:eVitals.VitalGroup[some $element in .//* satisfies normalize-space($element) != '']/nem:eVitals.BloodPressureGroup">
	
			<sch:let name="nemsisElements" value="nem:eVitals.06"/>
			<sch:let name="sbpIsNum" value="number(nem:eVitals.06) = number(nem:eVitals.06)"/>
			
			<!-- This assert is based on Rule 136, migrated from the v2 validations -->
			<sch:assert id="al_restriction_eVitals.06_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($sbpIsNum and (number(nem:eVitals.06) &lt; 0 or number(nem:eVitals.06) &gt; 299))">
				<sch:value-of select="key('nemSch_key_elements', 'eVitals.06', $nemSch_elements)"/> should be between 0 and 299.
			</sch:assert>
	
		</sch:rule>

	</sch:pattern>
  
	<sch:pattern id="al_restriction_eVitals.06_eVitals.07">
		
		<sch:title>SBP should be higher than DBP</sch:title>
	
		<sch:rule id="al_restriction_eVitals.06_eVitals.07_rule_1" context="nem:eVitals.VitalGroup[some $element in .//* satisfies normalize-space($element) != '']/nem:eVitals.BloodPressureGroup">
	
			<sch:let name="nemsisElements" value="nem:eVitals.06, nem:eVitals.07"/>
			<sch:let name="dbpIsNum" value="number(nem:eVitals.07) = number(nem:eVitals.07)"/>
	  
			<!-- NOTE: Must test to see if DBP (eVitals.07) is a number since it can be suffixed with a 'p' or 'P' -->
	
			<!-- This assert is based on Rule 137, migrated from the v2 validations -->
			<sch:assert id="al_restriction_eVitals.06_eVitals.07_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($dbpIsNum and number(nem:eVitals.06) &lt; number(nem:eVitals.07))">
				<sch:value-of select="key('nemSch_key_elements', 'eVitals.06', $nemSch_elements)"/> should be higher than <sch:value-of select="key('nemSch_key_elements', 'eVitals.07', $nemSch_elements)"/>.
			</sch:assert>
	
		</sch:rule>

	</sch:pattern>
  
	<sch:pattern id="al_restriction_eVitals.07">
		
		<sch:title>DBP should be a number between 0 and 299 for all blood pressure measurement methods other than Cuff-Manual Palpated Only. It should only be p or P for Cuff-Manual Palpated Only.</sch:title>

		<sch:rule id="al_restriction_eVitals.07_rule_palpated" context="nem:eVitals.VitalGroup[some $element in .//* satisfies normalize-space($element) != '']/nem:eVitals.BloodPressureGroup[nem:eVitals.08 = '3308009']">
	
			<sch:let name="nemsisElements" value="nem:eVitals.07, nem:eVitals.08"/>
	
			<sch:assert id="al_restriction_eVitals.07_assert_palpated" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eVitals.07[@PN] or nem:eVitals.07[. = ('p', 'P')]">
				<sch:value-of select="key('nemSch_key_elements', 'eVitals.07', $nemSch_elements)"/> should be 'p' or 'P' when <sch:value-of select="key('nemSch_key_elements', 'eVitals.08', $nemSch_elements)"/> is Cuff-Manual Palpated Only.
			</sch:assert>
	
		</sch:rule>
	
		<sch:rule id="al_restriction_eVitals.07_rule_non-palpated" context="nem:eVitals.VitalGroup[some $element in .//* satisfies normalize-space($element) != '']/nem:eVitals.BloodPressureGroup">
	
			<sch:let name="nemsisElements" value="nem:eVitals.07"/>
			<sch:let name="dbpIsNum" value="number(nem:eVitals.07) = number(nem:eVitals.07)"/>
	  
			<!-- NOTE: Must test to see if DBP (eVitals.07) is a number since it can be suffixed with a 'p' or 'P' -->
	
			<!-- This assert is based on Rule 138, migrated from the v2 validations -->
			<sch:assert id="al_restriction_eVitals.07_assert_non-palpated" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not(nem:eVitals.07) or nem:eVitals.07[@NV] or nem:eVitals.07[@PN] or ($dbpIsNum and number(nem:eVitals.07) &gt; -1 and number(nem:eVitals.07) &lt; 300)">
				<sch:value-of select="key('nemSch_key_elements', 'eVitals.07', $nemSch_elements)"/> should be a number between 0 and 299.
			</sch:assert>
	
		</sch:rule>

	</sch:pattern>
  
	<sch:pattern id="al_restriction_eVitals.10">
		
		<sch:title>Heart Rate should be between 0 and 299</sch:title>
	
		<sch:rule id="al_restriction_eVitals.10_rule_1" context="nem:eVitals.VitalGroup[some $element in .//* satisfies normalize-space($element) != '']/nem:eVitals.HeartRateGroup">
	
			<sch:let name="nemsisElements" value="nem:eVitals.10"/>
			<sch:let name="hrIsNum" value="number(nem:eVitals.10) = number(nem:eVitals.10)"/>
	
			<!-- This assert is based on Rule 139, migrated from the v2 validations -->
			<sch:assert id="al_restriction_eVitals.10_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($hrIsNum and (number(nem:eVitals.10) &lt; 0 or number(nem:eVitals.10) &gt; 299))">
				<sch:value-of select="key('nemSch_key_elements', 'eVitals.10', $nemSch_elements)"/> should be between 0 and 299.
			</sch:assert>
	
		</sch:rule>

	</sch:pattern>
  
	<sch:pattern id="al_restriction_eVitals.14">
		
		<sch:title>Respiratory Rate should be between 0 and 99</sch:title>
	
		<sch:rule id="al_restriction_eVitals.14_rule_1" context="nem:eVitals.VitalGroup[some $element in .//* satisfies normalize-space($element) != '']">
	
			<sch:let name="nemsisElements" value="nem:eVitals.14"/>
			<sch:let name="rrIsNum" value="number(nem:eVitals.14) = number(nem:eVitals.14)"/>
	
			<!-- This assert is based on Rule 140, migrated from the v2 validations -->
			<sch:assert id="al_restriction_eVitals.14_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($rrIsNum and (number(nem:eVitals.14) &lt; 0 or number(nem:eVitals.14) &gt; 99))">
				<sch:value-of select="key('nemSch_key_elements', 'eVitals.14', $nemSch_elements)"/> should be between 0 and 99.
			</sch:assert>
	
		</sch:rule>

	</sch:pattern>
  
	<sch:pattern id="nemSch_consistency_eScene">
		
		<!-- This is the inverse of rule "nemSch_consistency_eScene.07_mci" (which satisfies Rule 61, migrated from the v2 validations), found in the NEMSIS National EMS (PCR/Event) Dataset (nemSch) Schematron File -->
		<!-- This validates consistency between eScene.06 Number of Patients at Scene and eScene.07 Mass Casualty Incident. -->
		
		<sch:title>eScene.06 Number of Patients at Scene should be "Multiple" when eScene.07 Mass Casualty Incident is "Yes"</sch:title>

		<!-- This rule fires when eScene.07 Mass Casualty Incident is "Yes". -->
		<sch:rule id="al_consistency_eScene.07_not_mci_rule_1" context="nem:eScene.07[. = '9923003']">

			<sch:let name="nemsisElements" value="(../nem:eScene.06, .)"/>

			<!-- This assert is based on Rule 62, migrated from the v2 validations -->
			<!-- Assert that eScene.06 Number of Patients at Scene should be "Multiple".  -->
			<sch:assert id="al_consistency_eScene.07_not_mci_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="../nem:eScene.06 = '2707001'">
				When <sch:value-of select="key('nemSch_key_elements', 'eScene.07', $nemSch_elements)"/> is "Yes", <sch:value-of select="key('nemSch_key_elements', 'eScene.06', $nemSch_elements)"/> should be "Multiple".
			</sch:assert>

		</sch:rule>

	</sch:pattern>
  
	<sch:pattern id="al_requirement_eTimes.02">
		
		<sch:title>Dispatch Notified Date/Time is required</sch:title>

		<sch:rule id="al_requirement_eTimes.02_rule_1" context="nem:eTimes">

			<sch:let name="nemsisElementsMissing" value="'eTimes.02'"/>

			<!-- This assert is based on Rule 121, migrated from the v2 validations -->
			<!-- eTimes.02 is Optional and Non-Nillable with no PNs or NVs. According to the xsd, the element will either be present with a value, or not be present at all. We must test for the presence of the element.  -->
			<sch:assert id="al_requirement_eTimes.02_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eTimes.02">
				<sch:value-of select="key('nemSch_key_elements', 'eTimes.02', $nemSch_elements)"/> should be recorded.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
  	
	<sch:pattern id="al_consistency_eProcedures.03">

		<sch:title>Certain eProcedures.ProcedureGroup element values must be recorded if eProcedures.03 is recorded without a PN.</sch:title>

		<sch:rule id="al_consistency_eProcedures.03_rule_1" context="nem:eProcedures.03[. != '']">
		
			<sch:let name="eProcedures.03_PN" value="../nem:eProcedures.03[@PN]" />
			<sch:let name="eProcedures.02_yes" value="if (../nem:eProcedures.02 = '9923003') then true() else false()"/>
			<sch:let name="numprocIsNum" value="number(../nem:eProcedures.05) = number(../nem:eProcedures.05)"/>
			<sch:let name="eProcedures.05" value="if(../nem:eProcedures.05 = '' or not($numprocIsNum)) then (key('nemSch_key_elements', 'eProcedures.05', $nemSch_elements)) else ''"/>
			<sch:let name="eProcedures.06" value="if(../nem:eProcedures.06 = '') then (key('nemSch_key_elements', 'eProcedures.06', $nemSch_elements)) else ''"/>
			<sch:let name="eProcedures.07" value="if(../nem:eProcedures.07 = '') then (key('nemSch_key_elements', 'eProcedures.07', $nemSch_elements)) else ''"/>
			<sch:let name="eProcedures.08" value="if(../nem:eProcedures.08 = '') then (key('nemSch_key_elements', 'eProcedures.08', $nemSch_elements)) else ''"/>

			<sch:let name="nemsisElements" value="., ../nem:eProcedures.05[$eProcedures.05], ../nem:eProcedures.06[$eProcedures.06], ../nem:eProcedures.07[$eProcedures.07], ../nem:eProcedures.08[$eProcedures.08]"/>

			<!-- This assert is based on Rule 133, migrated from the v2 validations - eProcedure.05 must be recorded if eProcedure.03 is recorded. -->
			<sch:assert id="al_consistency_eProcedures.03_eProcedures.05" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eProcedures.03_PN or $eProcedures.02_yes or not($eProcedures.05)">
				<sch:value-of select="key('nemSch_key_elements', 'eProcedures.05', $nemSch_elements)"/> should be a numeric value since a Procedure was performed during this unit's EMS care.
			</sch:assert>
			
			<!-- This assert is based on Rule 134, migrated from the v2 validations - eProcedure.06 must be recorded if eProcedure.03 is recorded. -->
			<sch:assert id="al_consistency_eProcedures.03_eProcedures.06" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eProcedures.03_PN or $eProcedures.02_yes or not($eProcedures.06)">
				<sch:value-of select="key('nemSch_key_elements', 'eProcedures.06', $nemSch_elements)"/> should be recorded since a Procedure was performed during this unit's EMS care.
			</sch:assert>

			<sch:assert id="al_consistency_eProcedures.03_eProcedures.07" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eProcedures.03_PN or $eProcedures.02_yes or not($eProcedures.07)">
				<sch:value-of select="key('nemSch_key_elements', 'eProcedures.07', $nemSch_elements)"/> should be recorded since a Procedure was performed during this unit's EMS care. If no complication occurred, please select 'None.'
			</sch:assert>

			<sch:assert id="al_consistency_eProcedures.03_eProcedures.08" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eProcedures.03_PN or $eProcedures.02_yes or not($eProcedures.08)">
				<sch:value-of select="key('nemSch_key_elements', 'eProcedures.08', $nemSch_elements)"/> should be recorded since a Procedure was performed during this unit's EMS care.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eProcedures.03_eSituation.02">
		
		<sch:title>eSituation.02 should be 'Yes' if eProcedures.03 is a specific (injury related) value</sch:title>

		<sch:rule id="al_consistency_eProcedures.03_eSituation.02_rule_1" context="nem:eProcedures.ProcedureGroup[nem:eProcedures.03 = ('49689007', '58825001', '398041008', '426498007', '79321009', '182556001', '302488007', '449199004', '450591000124106', '707794004', '448970001', '133901003', '225358003', '372045002', '22206003', '26906007', '20655006', '225116006')][1]">
	
			<sch:let name="nemsisElements" value="nem:eProcedures.03, ancestor-or-self::nem:PatientCareReport/nem:eSituation/nem:eSituation.02"/>

			<!-- This assert is based on Rule 65, migrated from the v2 validations - eSituation.02 must be 'Yes' for certain values of eProtocols.03 -->
			<sch:assert id="al_consistency_eProcedures.03_eSituation.02_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="ancestor-or-self::nem:PatientCareReport/nem:eSituation/nem:eSituation.02 = '9922005'">
				<sch:value-of select="key('nemSch_key_elements', 'eSituation.02', $nemSch_elements)"/> should be 'Yes' based on the value of <sch:value-of select="key('nemSch_key_elements', 'eProcedures.03', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eResponse.05_eDispatch.01">
		
		<sch:title>eDispatch.01 should be 'Transfer/Interfacility/Palliative Care' or 'Airmedical Transport' if eResponse.05 is a specific (transport related) value</sch:title>

		<sch:rule id="al_consistency_eResponse.05_eDispatch.01_rule_1" context="nem:eResponse.ServiceGroup[nem:eResponse.05 = '2205005']">

			<sch:let name="dispatchComplaint" value="ancestor-or-self::nem:PatientCareReport/nem:eDispatch/nem:eDispatch.01"/>
			<sch:let name="nemsisElements" value="nem:eResponse.05, ancestor-or-self::nem:PatientCareReport/nem:eDispatch/nem:eDispatch.01"/>

			<!-- This assert is based on Rule 48, migrated from the v2 validations - eDispatch.01 must be 'Transfer/Interfacility/Palliative Care' or 'Airmedical Transport' for certain values of eResponse.05 -->
			<sch:assert id="al_consistency_eResponse.05_eDispatch.01_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$dispatchComplaint = '2301071' or $dispatchComplaint = '2301083'">
				<sch:value-of select="key('nemSch_key_elements', 'eDispatch.01', $nemSch_elements)"/> should be 'Transfer/Interfacility/Palliative Care' or 'Airmedical Transport'" based on the value of <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_sequence_eSituation.01_ePatient.17">

		<sch:title>Date/Time of Symptom Onset/Last Normal should not occur prior to patient Date of Birth</sch:title>

		<sch:rule id="al_sequence_eSituation.01_ePatient.17_rule_1" context="nem:eSituation.01[. != '']">
		
			<sch:let name="solnIsDate" value="substring(., 1, 10) castable as xs:date"/>
			<sch:let name="dobIsDate" value="string(ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.17) castable as xs:date"/>

			<sch:let name="nemsisElements" value="., ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.17"/>

			<!-- This assert is based on Rule 116, migrated from the v2 validations - ePatient.17 must proceed eSituation.01. -->
			<sch:assert id="al_sequence_eSituation.01_ePatient.17_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="if($solnIsDate and $dobIsDate) then(if(xs:date(substring(., 1, 10)) &gt;= xs:date(ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.17)) then(true()) else(false())) else(true())">
				<sch:value-of select="key('nemSch_key_elements', 'ePatient.17', $nemSch_elements)"/> should occur prior to <sch:value-of select="key('nemSch_key_elements', 'eSituation.01', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eSituation.11_ePatient.13">

		<sch:title>ePatient.13 (Gender) must be 'Female' if eSituation.11 (Providers Primary Impression) is one of a specific set of values.</sch:title>

		<sch:rule id="al_consistency_eSituation.11_ePatient.13_rule_1" context="nem:eSituation.11[. = ('N93.9', 'O03', 'O14.9', 'O21.9', 'O60.0', 'O60.1', 'O62.0', 'O71.9', 'O72', 'O72.1', 'O73.0', 'O75', 'O80')]">

			<sch:let name="nemsisElements" value="., ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.13"/>

			<!-- This assert is based on Rule 81, migrated from the v2 validations - ePatient.13 must be 'Female' if eSituation.11 is a pregnancy-related code. -->
			<sch:assert id="al_consistency_eSituation.11_ePatient.13_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.13 = '9906001'">
				<sch:value-of select="key('nemSch_key_elements', 'ePatient.13', $nemSch_elements)"/> should be 'Female' based on the value of <sch:value-of select="key('nemSch_key_elements', 'eSituation.11', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eSituation.12_ePatient.13">

		<sch:title>ePatient.13 (Gender) must be 'Female' if eSituation.12 (Providers Secondary Impression) is one of a specific set of values.</sch:title>

		<sch:rule id="al_consistency_eSituation.12_ePatient.13_rule_1" context="nem:eSituation.12[. = ('N93.9', 'O03', 'O14.9', 'O21.9', 'O60.0', 'O60.1', 'O62.0', 'O71.9', 'O72', 'O72.1', 'O73.0', 'O75', 'O80')]">

			<sch:let name="nemsisElements" value="., ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.13"/>

			<!-- This assert is based on Rule 150, migrated from the v2 validations - ePatient.13 must be 'Female' if eSituation.12 is a pregnancy-related code. -->
			<sch:assert id="al_consistency_eSituation.12_ePatient.13_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.13 = '9906001'">
				<sch:value-of select="key('nemSch_key_elements', 'ePatient.13', $nemSch_elements)"/> should be 'Female' based on the value of <sch:value-of select="key('nemSch_key_elements', 'eSituation.12', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eProcedures.03_ePatient.13">

		<sch:title>ePatient.13 (Gender) must be 'Female' if eProcedures.03 (Procedure) is one of a specific set of values.</sch:title>

		<sch:rule id="al_consistency_eProcedures.03_ePatient.13_rule_1" context="nem:eProcedures.03[. = ('236973005', '36708009')]">

			<sch:let name="nemsisElements" value="., ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.13"/>

			<!-- This assert is based on v3 Rule 8 - ePatient.13 must be 'Female' if eProcedure.03 is a pregnancy-related code. -->
			<sch:assert id="al_consistency_eProcedures.03_ePatient.13_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.13 = '9906001'">
				<sch:value-of select="key('nemSch_key_elements', 'ePatient.13', $nemSch_elements)"/> should be 'Female' based on the value of <sch:value-of select="key('nemSch_key_elements', 'eProcedures.03', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eProcedures.03_eProcedures.13">

		<sch:title>eProcedures.13 should be recorded properly based on whether or not eProcedures.03 is a specific (vascular related) value when procedure is performed during this EMS unit's care.</sch:title>

		<sch:rule id="al_consistency_eProcedures.03_eProcedures.13_rule_1" context="nem:PatientCareReport/nem:eProcedures/nem:eProcedures.ProcedureGroup">

			<!-- This assert flag establishes whether eProcedures.03 is or is not a vascular code -->
			<sch:let name="eProcedures.03_v" value="if(nem:eProcedures.03 = ('392247006', '233516009', '233519002', '422744007', '77938009', '55841001', '226005007', '86265008', '405427009', '392230005', '405442007', '430824005', '233526002', '405430002', '42340005', '42550007', '424287005', '396540005', '233550000')) then true() else false()"/>
			<sch:let name="eProcedures.03_PN" value="nem:eProcedures.03[@PN]"/>

			<!-- This assert flag is based on v3 Rule 3 - eProcedures.13: If eProcedures.03 is a vascular code -->
			<sch:let name="eProcedures.13_t" value="if($eProcedures.03_v and not($eProcedures.03_PN)) then(if(nem:eProcedures.13 != '') then false() else true()) else false()"/>

			<sch:let name="nemsisElements" value="nem:eProcedures.03, nem:eProcedures.13"/>

			<!-- This assert is based on v3 Rule 3 - eProcedures.13 must be recorded for certain (vascular related) values of eProcedures.03 -->
			<sch:assert id="al_consistency_eProcedures.03_eProcedures.13_t" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eProcedures.13_t) or nem:eProcedures.02[. = '9923003']">
				  <sch:value-of select="key('nemSch_key_elements', 'eProcedures.13', $nemSch_elements)"/> should be recorded based on the value of <sch:value-of select="key('nemSch_key_elements', 'eProcedures.03', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eProcedures.03_eArrest">

		<sch:title>eArrest.01, eArrest.02, and eArrest.03 should be recorded if eProcedures.03 is a specific (arrest related) value</sch:title>

		<sch:rule id="al_consistency_eProcedures.03_eArrest_rule_1" context="nem:eProcedures.ProcedureGroup[nem:eProcedures.03 = ('89666000', '429283006', '426220008', '450661000124102', '441893003')]">

			<!-- This assert flag is based on v3 Rule 7a - eArrest.01: If eProcedures.03 is an arrest code -->
			<sch:let name="eArrest.01" value="if(ancestor-or-self::nem:PatientCareReport/nem:eArrest/nem:eArrest.01 != '') then '' else key('nemSch_key_elements', 'eArrest.01', $nemSch_elements)"/>

			<!-- This assert flag is based on v3 Rule 7b - eArrest.02: If eProcedures.03 is an arrest code -->
			<sch:let name="eArrest.02" value="if(ancestor-or-self::nem:PatientCareReport/nem:eArrest/nem:eArrest.02 != '') then '' else key('nemSch_key_elements', 'eArrest.02', $nemSch_elements)"/>

			<!-- This assert flag is based on v3 Rule 7c - eArrest.03: If eProcedures.03 is an arrest code -->
			<sch:let name="eArrest.03" value="if(ancestor-or-self::nem:PatientCareReport/nem:eArrest/nem:eArrest.03 != '') then '' else key('nemSch_key_elements', 'eArrest.03', $nemSch_elements)"/>

			<sch:let name="nemsisElements" value="nem:eProcedures.03, ancestor-or-self::nem:PatientCareReport/nem:eArrest/nem:eArrest.01[$eArrest.01], ancestor-or-self::nem:PatientCareReport/nem:eArrest/nem:eArrest.02[$eArrest.02], ancestor-or-self::nem:PatientCareReport/nem:eArrest/nem:eArrest.03[$eArrest.03]"/>

			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eProcedures.03_eArrest_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eArrest.01 or $eArrest.02 or $eArrest.03)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eProcedures.03', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="string-join(($eArrest.01, $eArrest.02, $eArrest.03)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eProcedures.03_eArrest.03">
		
		<sch:title>eArrest.03 should be 'Initiated Chest Compression' if eProcedures.03 is a specific (resuscitation related) value</sch:title>

		<sch:rule id="al_consistency_eProcedures.03_eArrest.03_rule_1" context="nem:eProcedures.ProcedureGroup[nem:eProcedures.03 = ('89666000', '429283006', '441893003')]">

			<sch:let name="nemsisElements" value="nem:eProcedures.03, ancestor-or-self::nem:PatientCareReport/nem:eArrest/nem:eArrest.03"/>

			<!-- This assert is based on v3 Rule 12 - eArrest.03 should be 'Initiated Chest Compression' if eProcedures.03 is a specific (resuscitation related) value -->
			<sch:assert id="al_consistency_eProcedures.03_eArrest.03_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="ancestor-or-self::nem:PatientCareReport/nem:eArrest/nem:eArrest.03 = '3003005'">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eProcedures.03', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eArrest.03', $nemSch_elements)"/> should be 'Initiated Chest Compression'
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eProcedures.03_eProtocols.01">

		<sch:title>eProtocols.01 should not be a NV, 'Not Done', or 'Other' if eProcedures.03 is not a NV</sch:title>

		<sch:rule id="al_consistency_eProcedures.03_eProtocols.01_rule_1" context="nem:eProcedures.ProcedureGroup[nem:eProcedures.03 != '']">

			<sch:let name="nemsisElements" value="nem:eProcedures.03, ancestor-or-self::nem:PatientCareReport/nem:eProtocols/nem:eProtocols.ProtocolGroup/nem:eProtocols.01"/>

			<!-- This assert is based on v3 Rule 10 - eProtocols.01 should not be a NV, 'Not Done', or 'Other' (contain a non-negative value) if eProcedures.03 is not a NV -->
			<sch:assert id="al_consistency_eProcedures.03_eProtocols.01_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not(ancestor-or-self::nem:PatientCareReport/nem:eProtocols/nem:eProtocols.ProtocolGroup/nem:eProtocols.01[@NV]) and not(ancestor-or-self::nem:PatientCareReport/nem:eProtocols/nem:eProtocols.ProtocolGroup/nem:eProtocols.01 = ('9914153', '9914165'))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eProcedures.03', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eProtocols.01', $nemSch_elements)"/> should be recorded
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eProtocols.01_eProcedures.03_pattern">

		<sch:title>eProcedures.03 should not be a NV if eProtocols.01 is not a NV, or 'Not Done'</sch:title>

		<sch:rule id="al_consistency_eProtocols.01_eProcedures.03_rule_1" context="nem:eProtocols.ProtocolGroup">

			<sch:let name="eProtocols.01" value="nem:eProtocols.01 != '' and nem:eProtocols.01 != '9914153'"/>
			<sch:let name="eProcedures.03" value="ancestor-or-self::nem:PatientCareReport/nem:eProcedures/nem:eProcedures.ProcedureGroup/nem:eProcedures.03 != ''"/>

			<sch:let name="nemsisElements" value="nem:eProtocols.01, ancestor-or-self::nem:PatientCareReport/nem:eProcedures/nem:eProcedures.ProcedureGroup/nem:eProcedures.03"/>

			<!-- This assert is based on v3 Rule 9 - eProcedures.03 should not be a NV if eProtocols.01 is not a NV, or 'Not Done' (contains a non-negative value) -->
			<sch:assert id="al_consistency_eProtocols.01_eProcedures.03_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="if($eProtocols.01) then(if($eProcedures.03) then true() else false()) else true()">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eProtocols.01', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eProcedures.03', $nemSch_elements)"/> should be recorded
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eProtocols.01_eProtocols.02_pattern">

		<sch:title>eProtocols.01 and eProtocols.02 should both have a value or neither have a value unless eProtocols.01 is 'Not Done'</sch:title>

		<sch:rule id="al_consistency_eProtocols.01_eProtocols.02_rule_1" context="nem:eProtocols.ProtocolGroup">

			<sch:let name="nemsisElements" value="nem:eProtocols.01, nem:eProtocols.02"/>

			<sch:assert id="al_consistency_eProtocols.01_eProtocols.02_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eProtocols.01[@NV] or nem:eProtocols.01[. = '9914153'] or (nem:eProtocols.01[. != ''] and nem:eProtocols.02[. != ''])">
				If a Protocol Used other than 'Not Done' is recorded a Protocol Age Category must be recorded.
			</sch:assert>

			<sch:assert id="al_consistency_eProtocols.01_eProtocols.02_assert_2" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eProtocols.01[. != ''] or (nem:eProtocols.01[@NV] and nem:eProtocols.02[@NV])">
				If a Protocol Used is not recorded a Protocol Age Category cannot be recorded.
			</sch:assert>

			<sch:assert id="al_consistency_eProtocols.01_eProtocols.02_assert_3" role="[WARNING]" diagnostics="nemsisDiagnostic" test="if (nem:eProtocols.01[. != ''] or nem:eProtocols.02[. != '']) then true() else (nem:eProtocols.01/@NV = nem:eProtocols.02/@NV)">
				The Not Values for Protocol Used and Protocol Age Category do not match.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eSituation.09_eSituation.10">
		
		<sch:title>eSituation.10 should be 'Not Recorded' if eSituation.09 is 'Not Recorded'</sch:title>

		<sch:rule id="al_consistency_eSituation.09_eSituation.10_rule_1" context="nem:eSituation/nem:eSituation.09[@NV = '7701003']">

			<sch:let name="nemsisElements" value="., ../nem:eSituation.10"/>

			<!-- This assert is based on v3 Rule 6 - eSituation.10 should be 'Not Recorded' if eSituation.09 is 'Not Recorded' -->
			<sch:assert id="al_consistency_eSituation.09_eSituation.10_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="../nem:eSituation.10[@NV = '7701003']">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eSituation.09', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eSituation.10', $nemSch_elements)"/> should be 'Not Recorded'
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eExam.17_eExam.18">

		<sch:title>eExam.17 should be recorded if eExam.18 is not a PN or 'Not Done' (contains a non-negative value)</sch:title>

		<sch:rule id="al_consistency_eExam.17_eExam.18_rule_1" context="nem:eExam.AssessmentGroup/nem:eExam.EyeGroup">

			<sch:let name="eExam.18" value="nem:eExam.18 != '' and nem:eExam.18 != '3518039'"/>
			<sch:let name="eExam.17" value="nem:eExam.17 != ''"/>

			<sch:let name="nemsisElements" value="nem:eExam.18, nem:eExam.17"/>

			<!-- This assert is based on v3 Rule 18 - eExam.17 should be recorded if eExam.18 is not a PN or 'Not Done' -->
			<sch:assert id="al_consistency_eExam.17_eExam.18_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="if($eExam.18) then(if($eExam.17) then true() else false()) else true()">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eExam.18', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eExam.17', $nemSch_elements)"/> should be recorded
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_restriction_eScene.18">

		<sch:title>eScene.18 should be the value for Alabama</sch:title>

		<sch:rule id="al_restriction_eScene.18_rule_1" context="nem:eScene.18[. != '01']">

			<sch:let name="nemsisElements" value="."/>

			<!-- This assert is based on v3 Rule 20 - eScene.18 should be the value for Alabama -->
			<sch:assert id="al_restriction_eScene.18_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test=". = ''">
				<sch:value-of select="key('nemSch_key_elements', 'eScene.18', $nemSch_elements)"/> should be Alabama ('01')
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_restriction_eScene.21">

		<sch:title>eScene.21 should be the value for an Alabama County</sch:title>

		<sch:rule id="al_restriction_eScene.21_rule_1" context="nem:eScene/nem:eScene.21[. != '']">

			<!-- xsd will ensure that if there is a value, it is a 5 digit integer -->
			<!-- We must test to see if the first two characters are '01' (state of Alabama), and the last 3 characters are an odd nunber less than 133 (valid Alabama counties) -->

			<sch:let name="stateIsAL" value="substring(., 1, 2) = '01'"/>
			<sch:let name="coIsAL" value="if (substring(., 3, 3) castable as xs:integer) then ((number(substring(., 3, 3)) &lt;= 133) and (number(substring(., 3, 3)) mod 2 = 1)) else false()"/>

			<sch:let name="nemsisElements" value="."/>

			<!-- This assert is based on v3 Rule 19 - eScene.21 should be the value for a County that is within Alabama -->
			<sch:assert id="al_restriction_eScene.21_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$stateIsAL and $coIsAL">
				<sch:value-of select="key('nemSch_key_elements', 'eScene.21', $nemSch_elements)"/> should be an Alabama County
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_restriction_eProcedures.10">

		<sch:title>eProcedures.10 should not contain certain values (prohibited by Alabama)</sch:title>

		<sch:rule id="al_restriction_eProcedures.10_rule_1" context="nem:eProcedures.10[. != '']">

			<sch:let name="nemsisElements" value="."/>

			<!-- This assert is based on v3 Rule 1 - eProcedures.10 should not contain certain values -->
			<sch:assert id="al_restriction_eProcedures.10_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not(. = ('9905009', '9905013', '9905015', '9905017', '9905039'))">
				<sch:value-of select="key('nemSch_key_elements', 'eProcedures.10', $nemSch_elements)"/> should not contain the value <sch:value-of select="."/> 
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<!-- RESCUEAggregator-356 BEGIN -->
	<sch:pattern id="al_restriction_eProcedures.02_eProcedures.10">

		<sch:title>eProcedures.10 should only be certain values when performed during this Unit's EMS care.</sch:title>

		<sch:rule id="al_restriction_eProcedures.02_eProcedures.10_rule_1" context="nem:eProcedures.02[. = '9923001']">

			<sch:let name="nemsisElements" value="(., ../nem:eProcedures.10)"/>
			<sch:let name="is_air_transport_fixed_wing" value="ancestor-or-self::nem:PatientCareReport/nem:eResponse/nem:eResponse.07[. = '2207013']" />
			<sch:let name="is_air_transport_helicopter" value="ancestor-or-self::nem:PatientCareReport/nem:eResponse/nem:eResponse.07[. = '2207011']" />
			<sch:let name="has_valid_role" value="../nem:eProcedures.10[. = ('', '9905001', '9905003', '9905005', '9905007', '9905011', '9905031', '9905019', '9905029')]" />
			<sch:let name="registered_nurse" value="../nem:eProcedures.10[. = '9905041']" />
			
			<sch:assert id="al_restriction_eProcedures.02_eProcedures.10_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$has_valid_role or (($is_air_transport_fixed_wing or $is_air_transport_helicopter) and $registered_nurse)">
				<sch:value-of select="key('nemSch_key_elements', 'eProcedures.10', $nemSch_elements)"/> can only be Alabama recognized license levels when procedure is performed during this Unit's EMS care.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_restriction_eMedications.02_eMedications.10">

		<sch:title>eMedications.10 should only be certain values when performed during this Unit's EMS care.</sch:title>

		<sch:rule id="al_restriction_eMedications.02_eMedications.10_rule_1" context="nem:eMedications.02[. = '9923001']">

			<sch:let name="nemsisElements" value="(., ../nem:eMedications.10)"/>
			<sch:let name="is_air_transport_fixed_wing" value="ancestor-or-self::nem:PatientCareReport/nem:eResponse/nem:eResponse.07[. = '2207013']" />
			<sch:let name="is_air_transport_helicopter" value="ancestor-or-self::nem:PatientCareReport/nem:eResponse/nem:eResponse.07[. = '2207011']" />
			<sch:let name="has_valid_role" value="../nem:eMedications.10[. = ('', '9905001', '9905003', '9905005', '9905007', '9905011', '9905031', '9905019', '9905029')]" />
			<sch:let name="registered_nurse" value="../nem:eMedications.10[. = '9905041']" />
			
			<sch:assert id="al_restriction_eMedications.02_eMedications.10_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$has_valid_role or (($is_air_transport_fixed_wing or $is_air_transport_helicopter) and $registered_nurse)">
				<sch:value-of select="key('nemSch_key_elements', 'eMedications.10', $nemSch_elements)"/> can only be Alabama recognized license levels when medication is administered during this Unit's EMS care.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	<!-- RESCUEAggregator-356 END -->

<sch:pattern id="al_restriction_eResponse.15">

	<sch:title>eResponse.15 should not contain certain values (prohibited by Alabama)</sch:title>

	<sch:rule id="al_restriction_eResponse.15_rule_1" context="nem:eResponse.15[. != '']">

		<sch:let name="nemsisElements" value="."/>

		<!-- This assert is based on YouTrack issue RESCUEAggregator-3. Codes listed in the test are the only values allowed. -->
		<sch:assert id="al_restriction_eResponse.15_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test=". = ('2215013', '2215021', '2215003', '2215009', '2215011')">
			<sch:value-of select="key('nemSch_key_elements', 'eResponse.15', $nemSch_elements)"/> should not contain the value <sch:value-of select="."/> 
		</sch:assert>

	</sch:rule>

</sch:pattern>

<sch:pattern id="al_consistency_eInjury.01_eInjury.07">

	<sch:title>eInjury.07 should be recorded if eInjury.01 is an MVC, Traffic value</sch:title>
	
	<sch:rule id="al_consistency_eInjury.01_eInjury.07_rule_1" context="nem:eInjury[nem:eInjury.01 = ('V86.31', 'V79.9', 'V49.9', 'V69.9', 'V86.34', 'V29.9', 'V86.39', 'V89.9', 'V30.9', 'V59.9')]">
	
		<sch:let name="nemsisElements" value="(nem:eInjury.01, nem:eInjury.07)"/>
		<sch:let name="nemsisElementsMissing" value="'eInjury.07'"/>
		
		<sch:assert id="al_consistency_eInjury.01_eInjury.07_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eInjury.07 != ''">
			Based on <sch:value-of select="key('nemSch_key_elements', 'eInjury.01', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eInjury.07', $nemSch_elements)"/> should be recorded
		</sch:assert>
		
	</sch:rule>
	
</sch:pattern>
	
	<!-- PATTERNS modified from Utah EMSDataSet Official (Required (utr)) Schematron File (May 15, 2014) -->

	<sch:pattern id="al_utr_consistency_eArrest.01_eProcedures.03">
		<sch:title>Cardiac Arrest is "Yes" if Cardiac arrest-related procedures are performed.</sch:title>

		<sch:rule id="al_consistency_eArrest.01_eProcedures.03_rule_1" context="nem:PatientCareReport[nem:eProcedures/nem:eProcedures.ProcedureGroup/nem:eProcedures.03 = ('89666000', '429283006', '426220008', '450661000124102', '441893003')]/nem:eArrest">

			<sch:let name="nemsisElements" value="(nem:eArrest.01, ancestor-or-self::nem:PatientCareReport/nem:eProcedures/nem:eProcedures.ProcedureGroup/nem:eProcedures.03[. = ('89666000', '429283006', '426220008', '450661000124102', '441893003')])"/>

			<sch:assert id="al_consistency_eArrest.01_eProcedures.03_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eArrest.01 = ('3001003', '3001005')">
				Cardiac Arrest should be "Yes," since cardiac arrest-related procedures were performed.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_utr_consistency_eDispatch.01">
		<sch:title>Complaint Reported By Dispatch is not "No Other Appropriate Choice."</sch:title>

		<sch:rule id="al_consistency_eDispatch.01_rule_1" context="nem:eDispatch.01">

			<sch:let name="nemsisElements" value="."/>

			<sch:assert id="al_consistency_eDispatch.01_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test=". != 2301051">
			Complaint Reported by Dispatch should be recorded (with a value other than "No Other Appropriate Choice").
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_utr_consistency_eHistory.18_ePatient.13">
		<sch:title>Gender is "Female" if Pregnancy is "Possible" or "Yes."</sch:title>

		<sch:rule id="al_consistency_eHistory.18_ePatient.13_rule_2" context="nem:eHistory.18[number(.) &gt; 3118001]">

			<sch:let name="nemsisElements" value="(., ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.13)"/>

			<sch:assert id="al_consistency_eHistory.18_ePatient.13_assert_2" role="[ERROR]" diagnostics="nemsisDiagnostic" test="ancestor-or-self::nem:PatientCareReport/nem:ePatient/nem:ePatient.13 = '9906001'">
				Only females can be pregnant.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_utr_consistency_eInjury_vehicular">
		<sch:title>Vehicular injury information is recorded if Complaint Reported by Dispatch is "Traffic/Transportation Incident" and a patient is seen.</sch:title>

		<sch:rule id="al_consistency_eInjury_vehicular_rule_1" context="nem:PatientCareReport[nem:eDispatch/nem:eDispatch.01 = 2301069]/nem:eInjury">

			<sch:let name="nemsisElements" value="(nem:eInjury.04, nem:eInjury.07, nem:eInjury.08)"/>
			<sch:let name="nemsisElementsMissing" value="'eInjury.07 eInjury.08'"/>

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_consistency_eInjury_vehicular_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_patient or (nem:eInjury.07 and nem:eInjury.08 and (every $element in (nem:eInjury.04, nem:eInjury.07, nem:eInjury.08) satisfies $element != ''))">
				Vehicular injury information should be recorded, since Complaint Reported by Dispatch is "Traffic/Transportation Incident" and a patient was seen.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_utr_format_ePatient.12">
		<sch:title>Social Security Number is valid.</sch:title>

		<sch:rule id="al_format_ePatient.12_rule_1" context="nem:ePatient.12">

			<sch:let name="nemsisElements" value="."/>

			<sch:assert id="al_format_ePatient.12_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="matches(., '^\d{9}$') and not(matches(., '^(666|000|9)') or matches(., '^\d{3}00') or matches(., '0000$'))">
				Social Security Number should be a real Social Security Number. If it is unknown, leave it blank.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eArrest.01_eArrest.14">
		<sch:title>Date/Time of Cardiac Arrest is recorded if Cardiac Arrest is "Yes, After EMS Arrival."</sch:title>

		<sch:rule id="al_consistency_eArrest.01_eArrest.14_rule_1" context="nem:eArrest[nem:eArrest.01 = '3001005']">

			<sch:let name="nemsisElements" value="(nem:eArrest.01, nem:eArrest.14)"/>

			<sch:assert id="al_consistency_eArrest.01_eArrest.14_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eArrest.14 != ''">
				<sch:value-of select="key('nemSch_key_elements', 'eArrest.14', $nemSch_elements)"/> should be recorded, since <sch:value-of select="key('nemSch_key_elements', 'eArrest.01', $nemSch_elements)"/> occurred after EMS arrival.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eArrest.05_eArrest.06">
		<sch:title>Who Provided CPR Prior to EMS Arrival is recorded if CPR Care Provided Prior to EMS Arrival is "Yes."</sch:title>

		<sch:rule id="al_consistency_eArrest.05_eArrest.06_rule_1" context="nem:eArrest[nem:eArrest.05 = '9923003']">

			<sch:let name="nemsisElements" value="(nem:eArrest.05, nem:eArrest.06)"/>
			<sch:let name="nemsisElementsMissing" value="'eArrest.06'"/>

			<sch:assert id="al_consistency_eArrest.05_eArrest.06_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eArrest.06 != ''">
				<sch:value-of select="key('nemSch_key_elements', 'eArrest.06', $nemSch_elements)"/> should be recorded, since <sch:value-of select="key('nemSch_key_elements', 'eArrest.05', $nemSch_elements)"/> is "Yes."
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eArrest.07_eArrest.08">
		<sch:title>Who Used AED Prior to EMS Arrival is recorded if AED Use Prior to EMS Arrival is "Yes."</sch:title>

		<sch:rule id="al_consistency_eArrest.07_eArrest.08_rule_1" context="nem:eArrest[nem:eArrest.07 = ('3007003', '3007005')]">

			<sch:let name="nemsisElements" value="(nem:eArrest.07, nem:eArrest.08)"/>
			<sch:let name="nemsisElementsMissing" value="'eArrest.08'"/>

			<sch:assert id="al_consistency_eArrest.07_eArrest.08_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eArrest.08 != ''">
				<sch:value-of select="key('nemSch_key_elements', 'eArrest.08', $nemSch_elements)"/> should be recorded, since <sch:value-of select="key('nemSch_key_elements', 'eArrest.07', $nemSch_elements)"/> is "Yes."
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eArrest.15_eArrest.16">
		<sch:title>Date/Time of Cardiac Arrest and Reason CPR/Resuscitation Discontinued must be recorded together</sch:title>

		<sch:rule id="al_consistency_eArrest.15_eArrest.16_rule_1" context="nem:eArrest[nem:eArrest.15 != '']">

			<sch:let name="nemsisElements" value="(nem:eArrest.15, nem:eArrest.16)"/>

			<sch:assert id="al_consistency_eArrest.15_eArrest.16_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eArrest.16 != ''">
				<sch:value-of select="key('nemSch_key_elements', 'eArrest.16', $nemSch_elements)"/> should be recorded, since <sch:value-of select="key('nemSch_key_elements', 'eArrest.15', $nemSch_elements)"/> is recorded.
			</sch:assert>

		</sch:rule>

		<sch:rule id="al_consistency_eArrest.15_eArrest.16_rule_2" context="nem:eArrest[nem:eArrest.16 != '']">

			<sch:let name="nemsisElements" value="(nem:eArrest.15, nem:eArrest.16)"/>
			<sch:let name="nemsisElementsMissing" value="'eArrest.15'"/>

			<sch:assert id="al_consistency_eArrest.15_eArrest.16_assert_2" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eArrest.15 != ''">
				<sch:value-of select="key('nemSch_key_elements', 'eArrest.15', $nemSch_elements)"/> should be recorded, since <sch:value-of select="key('nemSch_key_elements', 'eArrest.16', $nemSch_elements)"/> is recorded.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<!-- PATTERNS modified from Utah EMSDataSet Optional (uto) Schematron File (May 15, 2014) -->

	<sch:pattern id="al_uto_consistency_eArrest">
		<sch:title>Cardiac arrest/CPR elements are recorded if Cardiac Arrest is "Yes."</sch:title>

		<sch:rule id="al_consistency_eArrest_rule_1" context="nem:eArrest[nem:eArrest.01 = ('3001003', '3001005')]">

			<sch:let name="nemsisElements" value="(nem:eArrest.01, (nem:eArrest.02, nem:eArrest.03, nem:eArrest.04, nem:eArrest.05, nem:eArrest.07, nem:eArrest.09, nem:eArrest.11, nem:eArrest.12, nem:eArrest.14, nem:eArrest.17, nem:eArrest.18)[. = ''])"/>

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_consistency_eArrest_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_patient or (every $element in (nem:eArrest.02, nem:eArrest.03, nem:eArrest.04, nem:eArrest.05, nem:eArrest.07, nem:eArrest.09, nem:eArrest.11, nem:eArrest.12, nem:eArrest.14, nem:eArrest.17, nem:eArrest.18) satisfies $element != '')">
				All cardiac arrest/CPR information should be recorded, since a cardiac arrest occurred.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_uto_consistency_eExam.03">
		<sch:title>Date/Time of Assessment is recorded for each Exam/Assessment.</sch:title>

		<sch:rule id="al_consistency_eExam.03_rule_1" context="nem:eExam.AssessmentGroup">

			<sch:let name="nemsisElementsMissing" value="'eExam.03'"/>

			<sch:assert id="al_consistency_eExam.03_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eExam.03">
				Date/Time of Assessment should be recorded for Exam/Assessment.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_uto_consistency_eMedications.03">
		<sch:title>Certain eMedications.MedciationGroup element values must be recorded for each Medication administered during this unit's EMS care.</sch:title>

		<sch:rule id="al_consistency_eMedications.03_rule_1" context="nem:eMedications.MedicationGroup[some $element in .//* satisfies normalize-space($element) != '']">
			
			<sch:let name="eMedications.03_PN" value="nem:eMedications.03[@PN]" />
			<sch:let name="eMedications.02_yes" value="if (nem:eMedications.02 = '9923003') then true() else false()"/>
			<sch:let name="eMedications.07" value="if(nem:eMedications.07 = '') then (key('nemSch_key_elements', 'eMedications.07', $nemSch_elements)) else ''"/>
			<sch:let name="eMedications.08" value="if(nem:eMedications.08 = '') then (key('nemSch_key_elements', 'eMedications.08', $nemSch_elements)) else ''"/>
			
			<sch:let name="nemsisElementsMissing" value="'eMedications.04'"/>
			<sch:let name="nemsisElements" value="nem:eMedications.07[$eMedications.07], nem:eMedications.08[$eMedications.08]"/>

			<sch:assert id="al_consistency_eMedications.03_eMedications.04" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eMedications.03_PN or $eMedications.02_yes or nem:eMedications.04">
				Medication Administered Route should be recorded for a medication administered during this unit's EMS care.
			</sch:assert>

			<sch:assert id="al_consistency_eMedications.03_eMedications.07" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eMedications.03_PN or $eMedications.02_yes or not($eMedications.07)">
				<sch:value-of select="key('nemSch_key_elements', 'eMedications.07', $nemSch_elements)"/> should be recorded since a Medication was administered during this unit's EMS care. If no complication occurred, please select 'None.'
			</sch:assert>

			<sch:assert id="al_consistency_eMedications.03_eMedications.08" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eMedications.03_PN or $eMedications.02_yes or not($eMedications.08)">
				<sch:value-of select="key('nemSch_key_elements', 'eMedications.08', $nemSch_elements)"/> should be recorded since a Medication was administered during this unit's EMS care.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eMedications.09_10">
		<sch:title>Medication Crew ID and Role/Type of Person Administering Medication is recorded for each Medication administered during this unit's EMS care.</sch:title>

		<sch:rule id="al_consistency_eMedications.09_10_rule_1" context="nem:eMedications.MedicationGroup[some $element in .//* satisfies normalize-space($element) != '']">

			<sch:let name="nemsisElements" value="(nem:eMedications.09, nem:eMedications.10)"/>
			<sch:let name="nemsisElementsMissing" value="'eMedications.09 eMedications.10'"/>

			<sch:assert id="al_consistency_eMedications.09_10_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="(nem:eMedications.02 = '9923003') or (every $element in (nem:eMedications.09, nem:eMedications.10) satisfies $element != '')">
				Medication Crew ID and Role/Type of Person Administering Medication should be recorded for a Medication administered during this unit's EMS care.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eMedications.DosageGroup">
		<sch:title>Medication Dosage and Medication Dosage Units are recorded for each Medication administered during this unit's EMS care.</sch:title>

		<sch:rule id="al_consistency_eMedications.DosageGroup_rule_1" context="nem:eMedications.MedicationGroup[some $element in .//* satisfies normalize-space($element) != '']/nem:eMedications.DosageGroup">
		
			<sch:let name="nemsisElements" value="*"/>
			<sch:let name="eMedications.03_PN" value="../nem:eMedications.03[@PN]" />

			<sch:assert id="al_consistency_eMedications.DosageGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eMedications.03_PN or (../nem:eMedications.02 = '9923003') or (every $element in * satisfies $element != '')">
				Medication Dosage and Medication Dosage Units should both be recorded for a Medication when adminstered during this unit's EMS care.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eMedications.MedicationGroup">
		<sch:title>At least one Medication is recorded if a patient is treated.</sch:title>

		<sch:rule id="al_consistency_eMedications.MedicationGroup_rule_1" context="nem:eMedications">

			<sch:let name="nemsisElementsMissing" value="'eMedications.03'"/>

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_consistency_eMedications.MedicationGroup_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_treatment or (some $element in nem:eMedications.MedicationGroup//* satisfies normalize-space($element) != '')">
				Medications should be recorded, since a patient was treated.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_ePatient_address">
		<sch:title>Patient home address information is complete if a patient is treated.</sch:title>

		<sch:rule id="al_consistency_ePatient_address_rule_1" context="nem:ePatient">

			<sch:let name="nemsisElements" value="(nem:ePatient.05, nem:ePatient.06, nem:ePatient.07, nem:ePatient.08, nem:ePatient.09)"/>
			<sch:let name="nemsisElementsMissing" value="'ePatient.05 ePatient.06'"/>

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_consistency_ePatient_address_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_treatment or (nem:ePatient.05 and nem:ePatient.06 and (every $element in (nem:ePatient.07, nem:ePatient.08, nem:ePatient.09) satisfies $element != ''))">
				All patient home address information should be recorded, since a patient was treated.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eProcedures.03_assessment">
		<sch:title>"Continuous Physical Assessment" procedure is recorded if a patient is treated.</sch:title>

		<sch:rule id="al_consistency_eProcedures.03_assessment_rule_1" context="nem:eProcedures">

			<sch:let name="nemsisElements" value="nem:eProcedures.ProcedureGroup/nem:eProcedures.03"/>

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_consistency_eProcedures.03_assessment_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_treatment or nem:eProcedures.ProcedureGroup/nem:eProcedures.03 = '422618004'">
				A "Continuous Physical Assessment" procedure should be recorded, since a patient was treated.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eProcedures.09_10">
		<sch:title>Procedure Crew ID and Role/Type of Person Performing the Procedure is recorded for each Procedure.</sch:title>

		<sch:rule id="al_consistency_eProcedures.09_10_rule_1" context="nem:eProcedures.ProcedureGroup[some $element in .//* satisfies normalize-space($element) != '']">

			<sch:let name="nemsisElements" value="(nem:eProcedures.09, nem:eProcedures.10)"/>
			<sch:let name="nemsisElementsMissing" value="'eProcedures.09 eProcedures.10'"/>

			<sch:assert id="al_consistency_eProcedures.09_10_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="(nem:eProcedures.02 = '9923003') or (every $element in (nem:eProcedures.09, nem:eProcedures.10) satisfies $element != '')">
				Procedure Crew ID and Role/Type of Person Performing the Procedure should be recorded for a Procedure performed during this unit's EMS care.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eProcedures.ProcedureGroup">
		<sch:title>At least one Procedure is recorded if a patient is treated.</sch:title>

		<sch:rule id="al_consistency_eProcedures.ProcedureGroup_rule_1" context="nem:eProcedures">

			<sch:let name="nemsisElementsMissing" value="'eProcedures.03'"/>

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_consistency_eProcedures.ProcedureGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_treatment or (some $element in nem:eProcedures.ProcedureGroup//* satisfies normalize-space($element) != '')">
				Procedures should be recorded, since a patient was treated.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eResponse.03">
		<sch:title>Incident Number is recorded.</sch:title>

		<sch:rule id="al_consistency_eResponse.03_rule_1" context="nem:eResponse.03">

			<sch:let name="nemsisElements" value="."/>

			<sch:assert id="al_consistency_eResponse.03_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test=". != ''">
				Incident number should be recorded.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eScene_address">
		<sch:title>Scene address information is complete if a patient is seen.</sch:title>

		<sch:rule id="al_consistency_eScene_address_rule_1" context="nem:eScene">

			<sch:let name="nemsisElements" value="(nem:eScene.14, nem:eScene.15, nem:eScene.17, nem:eScene.19)"/>
			<sch:let name="nemsisElementsMissing" value="'eScene.14 eScene.15 eScene.17'"/>

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_consistency_eScene_address_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_patient or (((nem:eScene.14 and nem:eScene.14 != '') or (nem:eScene.15 and nem:eScene.15 != '')) and nem:eScene.17 and (every $element in (nem:eScene.17, nem:eScene.19) satisfies $element != ''))">
				All scene address information should be recorded, since a patient was seen.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eTimes.06">
		<sch:title>Unit Arrived on Scene Date/Time is recorded if the unit arrives on scene.</sch:title>

		<sch:rule id="al_consistency_eTimes.06_rule_1" context="nem:eTimes.06">

			<sch:let name="nemsisElements" value="."/>

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_consistency_eTimes.06_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_scene or . != ''">
				Unit Arrived on Scene Date/Time should be recorded, since the unit arrived on scene.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_uto_consistency_eVitals.VitalGroup">
		<sch:title>At least one set of Vital Signs is recorded if a patient is seen.</sch:title>

		<sch:rule id="al_consistency_eVitals.VitalGroup_rule_1" context="nem:eVitals">

			<sch:let name="nemsisElementsMissing" value="'eVitals.03'"/>

			<sch:extends rule="al_abstract_rule_eDisposition.12"/>

			<sch:assert id="al_consistency_eVitals.VitalGroup_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$no_patient or (some $element in nem:eVitals.VitalGroup//* satisfies normalize-space($element) != '')">
				Vitals Signs should be recorded, since a patient was seen.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_na_pattern">
		<!-- This pattern validates that certain element values are not recorded, based on the Incident/Patient Disposition. -->
		
		<sch:title>Certain elements should be 'Not Applicable' or 'Not Recorded', based on the Incident/Patient Disposition.</sch:title>
		
		<sch:rule id="al_consistency_eDisposition.12_na_rule_1" context="nem:PatientCareReport"> <!-- This rule fires on each PatientCareReport. -->			
			<!-- *** Flag each of the following elements if it is not 'Not Applicable', contingent upon a flag that was set based on the Disposition *** -->
			
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. Also Patient Refused Evaluation/Care (Without Transport) -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[(. &gt; 4212005 and . &lt;= 4212011) or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			<!-- no_transport: No patient or Without Transport, No Treatment/Transport Required, Released, or Transferred. -->
			<sch:let name="no_transport" value="if($no_patient or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212015, 4212019, 4212021, 4212025, 4212027, 4212029, 4212031)]) then true() else false()"/>
			<!-- no_emstransport: No transport or Transported by Law Enforcement, Transported by Private Vehicle, Transport Non-Patient. -->
			<sch:let name="no_emstransport" value="if($no_transport or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212035, 4212037, 4212043)]) then true() else false()"/>

			<!-- This assert flag is based on Rule 90, migrated from the v2 validations - eArrest.01: If Disposition is no_patient -->
			<sch:let name="eArrest.01" value="if($no_patient) then (if(nem:eArrest/nem:eArrest.01 = '') then '' else key('nemSch_key_elements', 'eArrest.01', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 92, migrated from the v2 validations - eArrest.02: If Disposition is no_patient -->
			<sch:let name="eArrest.02" value="if($no_patient) then (if(nem:eArrest/nem:eArrest.02 = '') then '' else key('nemSch_key_elements', 'eArrest.02', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 94, migrated from the v2 validations - eArrest.03: If Disposition is no_patient -->
			<sch:let name="eArrest.03" value="if($no_patient) then (if(nem:eArrest/nem:eArrest.03 = '') then '' else key('nemSch_key_elements', 'eArrest.03', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 84, migrated from the v2 validations - eInjury.01: If Disposition is no_patient -->
			<sch:let name="eInjury.01" value="if($no_patient) then (if(nem:eInjury/nem:eInjury.01 = '') then '' else key('nemSch_key_elements', 'eInjury.01', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 86, migrated from the v2 validations - eInjury.02: If Disposition is no_patient -->
			<sch:let name="eInjury.02_np" value="if($no_patient) then (if(not(nem:eInjury/nem:eInjury.02) or nem:eInjury/nem:eInjury.02[@NV = ('7701001','7701003')]) then '' else key('nemSch_key_elements', 'eInjury.02', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 58, migrated from the v2 validations - ePayment.01: If Disposition is no_patient -->
			<sch:let name="ePayment.01" value="if($no_patient) then (if(nem:ePayment/nem:ePayment.01 = '') then '' else key('nemSch_key_elements', 'ePayment.01', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 64, migrated from the v2 validations - eSituation.02: If Disposition is no_patient -->
			<sch:let name="eSituation.02_np" value="if($no_patient) then (if(nem:eSituation/nem:eSituation.02 = '') then '' else key('nemSch_key_elements', 'eSituation.02', $nemSch_elements)) else ''"/>

			<!-- This assert flag is based on Rule 67, migrated from the v2 validations - eSituation.07: If Disposition is no_patient -->
			<sch:let name="eSituation.07_np" value="if($no_patient) then (if(nem:eSituation/nem:eSituation.07 = '') then '' else key('nemSch_key_elements', 'eSituation.07', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 69, migrated from the v2 validations - eSituation.08: If Disposition is no_patient -->
			<sch:let name="eSituation.08_np" value="if($no_patient) then (if(nem:eSituation/nem:eSituation.08 = '') then '' else key('nemSch_key_elements', 'eSituation.08', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 72, migrated from the v2 validations - eSituation.09: If Disposition is no_patient -->
			<sch:let name="eSituation.09_np" value="if($no_patient) then (if(nem:eSituation/nem:eSituation.09 = '') then '' else key('nemSch_key_elements', 'eSituation.09', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 76, migrated from the v2 validations - eSituation.10: If Disposition is no_patient -->
			<sch:let name="eSituation.10_np" value="if($no_patient) then (if(nem:eSituation/nem:eSituation.10 = '') then '' else key('nemSch_key_elements', 'eSituation.10', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 79, migrated from the v2 validations - eSituation.11: If Disposition is no_patient -->
			<sch:let name="eSituation.11_np" value="if($no_patient) then (if(nem:eSituation/nem:eSituation.11 = '') then '' else key('nemSch_key_elements', 'eSituation.11', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 82, migrated from the v2 validations - eSituation.12: If Disposition is no_patient -->
			<sch:let name="eSituation.12_np" value="if($no_patient) then (if(nem:eSituation/nem:eSituation.12 = '') then '' else key('nemSch_key_elements', 'eSituation.12', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 59, migrated from the v2 validations - ePayment.50: If Disposition is no_emstransport -->
			<sch:let name="ePayment.50" value="if($no_emstransport) then (if(nem:ePayment/nem:ePayment.50 = '') then '' else key('nemSch_key_elements', 'ePayment.50', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 60, migrated from the v2 validations - eScene.06: If Disposition is no_scene -->
			<sch:let name="eScene.06_ns" value="if($no_scene) then (if(nem:eScene/nem:eScene.06 = '') then '' else key('nemSch_key_elements', 'eScene.06', $nemSch_elements)) else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eDisposition/nem:eDisposition.12, nem:eArrest/nem:eArrest.01[$eArrest.01], nem:eArrest/nem:eArrest.02[$eArrest.02], nem:eArrest/nem:eArrest.03[$eArrest.03], nem:eInjury/nem:eInjury.01[$eInjury.01], nem:eInjury/nem:eInjury.02[$eInjury.02_np], nem:ePayment/nem:ePayment.01[$ePayment.01], nem:eSituation/nem:eSituation.02[$eSituation.02_np], nem:eSituation/nem:eSituation.07[$eSituation.07_np], nem:eSituation/nem:eSituation.08[$eSituation.08_np], nem:eSituation/nem:eSituation.09[$eSituation.09_np], nem:eSituation/nem:eSituation.10[$eSituation.10_np], nem:eSituation/nem:eSituation.11[$eSituation.11_np], nem:eSituation/nem:eSituation.12[$eSituation.12_np], nem:ePayment/nem:ePayment.50[$ePayment.50], nem:eScene/nem:eScene.06[$eScene.06_ns]"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_na" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eArrest.01 or $eArrest.02 or $eArrest.03 or $eInjury.01 or $eInjury.02_np or $ePayment.01 or $eSituation.02_np or $eSituation.07_np or $eSituation.08_np or $eSituation.09_np or $eSituation.10_np or $eSituation.11_np or $eSituation.12_np or $ePayment.50 or $eScene.06_ns)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should be 'Not Applicable' or 'Not Recorded':
				<sch:value-of select="string-join(($eArrest.01, $eArrest.02, $eArrest.03, $eInjury.01, $eInjury.02_np, $ePayment.01, $eSituation.02_np, $eSituation.07_np, $eSituation.08_np, $eSituation.09_np, $eSituation.10_np, $eSituation.11_np, $eSituation.12_np, $ePayment.50, $eScene.06_ns)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>
		
		<sch:rule id="al_consistency_eDisposition.12_na_rule_2" context="nem:eVitals.VitalGroup"> <!-- This rule fires on each VitalGroup. -->			
			<!-- *** Flag each of the following elements if it is not 'Not Applicable', contingent upon a flag that was set based on the Disposition *** -->
			
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. Also Patient Refused Evaluation/Care (Without Transport) -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[(. &gt; 4212005 and . &lt;= 4212011) or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on Rule 97, migrated from the v2 validations - eVitals.06: If Disposition is no_patient -->
			<sch:let name="eVitals.06" value="if($no_patient) then (if(nem:eVitals.BloodPressureGroup/nem:eVitals.06[@NV = ('7701001', '7701003')]) then '' else key('nemSch_key_elements', 'eVitals.06', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 99, migrated from the v2 validations - eVitals.10: If Disposition is no_patient -->
			<sch:let name="eVitals.10" value="if($no_patient) then (if(nem:eVitals.HeartRateGroup/nem:eVitals.10[@NV = ('7701001', '7701003')]) then '' else key('nemSch_key_elements', 'eVitals.10', $nemSch_elements)) else ''"/>
			
			<!-- This assert flag is based on Rule 100, migrated from the v2 validations - eVitals.14: If Disposition is no_patient -->
			<sch:let name="eVitals.14" value="if($no_patient) then (if(nem:eVitals.14[@NV = ('7701001', '7701003')]) then '' else key('nemSch_key_elements', 'eVitals.14', $nemSch_elements)) else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eVitals.BloodPressureGroup/nem:eVitals.06[$eVitals.06], nem:eVitals.HeartRateGroup/nem:eVitals.10[$eVitals.10], nem:eVitals.14[$eVitals.14]"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_na_assert_2" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eVitals.06 or $eVitals.10 or $eVitals.14)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should be 'Not Applicable' or 'Not Recorded':
				<sch:value-of select="string-join(($eVitals.06, $eVitals.10, $eVitals.14)[. != ''], ', ')"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_consistency_eDisposition.12_na_eInjury.07_rule_1" context="nem:eInjury">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. Also Patient Refused Evaluation/Care (Without Transport) -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[(. &gt; 4212005 and . &lt;= 4212011) or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- This assert flag is based on Rule 88, migrated from the v2 validations - eInjury.07: If Disposition is no_patient -->
			<sch:let name="eInjury.07" value="if($no_patient) then (if(not(nem:eInjury.07) or nem:eInjury.07[@NV = ('7701001', '7701003')]) then '' else key('nemSch_key_elements', 'eInjury.07', $nemSch_elements)) else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eInjury.07[$eInjury.07]"/>
			<sch:let name="nemsisElementsMissing" value="'eInjury.07'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_na_eInjury.07_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eInjury.07)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should be 'Not Applicable' or 'Not Recorded':
				<sch:value-of select="string-join(($eInjury.07)[. != ''], ', ')"/>
			</sch:assert>
			
		</sch:rule>
		
		<sch:rule id="al_consistency_eDisposition.12_na_eVitals.07_rule_1" context="nem:eVitals.BloodPressureGroup">
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. Also Patient Refused Evaluation/Care (Without Transport) -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[(. &gt; 4212005 and . &lt;= 4212011) or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- This assert flag is based on Rule 98, migrated from the v2 validations - eVitals.07: If Disposition is no_patient -->
			<sch:let name="eVitals.07" value="if($no_patient) then (if(not(nem:eVitals.07) or nem:eVitals.07[@NV = ('7701001', '7701003')]) then '' else key('nemSch_key_elements', 'eVitals.07', $nemSch_elements)) else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eVitals.07[$eVitals.07]"/>
			<sch:let name="nemsisElementsMissing" value="'eVitals.07'"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_na_eVitals.07_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eVitals.07)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should be 'Not Applicable' or 'Not Recorded':
				<sch:value-of select="string-join(($eVitals.07)[. != ''], ', ')"/>
			</sch:assert>
			
		</sch:rule>
		
	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_none">
		<!-- This pattern validates that certain element values are recorded as 'None', based on the Incident/Patient Disposition. -->
		
		<sch:title>Certain element values are recorded as 'None', based on the Incident/Patient Disposition.</sch:title>
		
		<sch:rule id="al_consistency_eDisposition.12_none_rule_1" context="nem:PatientCareReport"> <!-- This rule fires on each PatientCareReport. -->
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[(. &gt; 4212005 and . &lt;= 4212011) or . = (4212039, 4212041, 4212043)]) then true() else false()"/>
		
			<!-- *** Flag each of the following elements if it is not 'None', contingent upon a flag that was set based on the Disposition *** -->
			
			<!-- This assert flag is based on Rule 60, migrated from the v2 validations - eScene.06: If Disposition is no_patient (but not no_scene) -->
			<sch:let name="eScene.06_np" value="if($no_patient and not($no_scene)) then (if(nem:eScene/nem:eScene.06 = '2707003') then '' else key('nemSch_key_elements', 'eScene.06', $nemSch_elements)) else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eScene/nem:eScene.06[$eScene.06_np]"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_none_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eScene.06_np)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should be 'None':
				<sch:value-of select="string-join(($eScene.06_np)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>
		
	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_not_na">
		<!-- This pattern validates that certain element values are not recorded as 'Not Applicable', based on the Incident/Patient Disposition. -->
		
		<sch:title>Certain element values are not recorded as 'Not Applicable', based on the Incident/Patient Disposition.</sch:title>
		
		<sch:rule id="al_consistency_eDisposition.12_not_na_rule_2" context="nem:eVitals">
			<!-- *** Flag each of the following elements if it is 'Not Applicable', contingent upon a flag that was set based on the Disposition *** -->
			
			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= xs:dateTime('2018-01-01T00:00:00-06:00')) then true() else false()" />
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<sch:let name="completeGCS" value="if(not($no_patient)) then (if (every $element in nem:eVitals.VitalGroup satisfies (some $element2 in $element/nem:eVitals.GlasgowScoreGroup satisfies ($element2/*[. = ''] or not($element2/nem:eVitals.23)))) then true() else false()) else false()" />
			
			<sch:let name="nemsisElements" value="nem:eVitals.VitalGroup[1]//nem:eVitals.19, nem:eVitals.VitalGroup[1]//nem:eVitals.20, nem:eVitals.VitalGroup[1]//nem:eVitals.21, nem:eVitals.VitalGroup[1]//nem:eVitals.22, nem:eVitals.VitalGroup[1]//nem:eVitals.23"/>
			<sch:let name="nemsisElementsMissing" value="'eVitals.23'"/>
			<sch:let name="nemsisElementsMissingContext" value="nem:eVitals.VitalGroup[1]/nem:eVitals.GlasgowScoreGroup"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_not_na_assert_2" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or not($completeGCS)">
				Full Glasgow Coma Score with Qualifier should be recorded for at least 1 set of Vital Signs.
			</sch:assert>
			
		</sch:rule>
		
	</sch:pattern>
	
	<sch:pattern id="al_consistency_eDisposition.12_not_na_w">
		<!-- This pattern validates that certain element values are not recorded as 'Not Applicable', based on the Incident/Patient Disposition. -->
		
		<sch:title>Certain element values are not recorded as 'Not Applicable', based on the Incident/Patient Disposition.</sch:title>
		
		<sch:rule id="al_consistency_eDisposition.12_not_na_w_rule_1" context="nem:eVitals.VitalGroup"> <!-- This rule fires on each VitalGroup. -->
			<!-- *** Flag each of the following elements if it is 'Not Applicable', contingent upon a flag that was set based on the Disposition *** -->
			
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on v3 Rule 33 - eVitals.06: If Disposition is not no_patient -->
			<sch:let name="eVitals.06" value="if(not($no_patient)) then (if(nem:eVitals.BloodPressureGroup/nem:eVitals.06[@NV = ('7701001', '7701003')]) then key('nemSch_key_elements', 'eVitals.06', $nemSch_elements) else '') else ''"/>
			
			<!-- This assert flag is based on v3 Rule 34 - eVitals.07: If Disposition is not no_patient -->
			<sch:let name="eVitals.07" value="if(not($no_patient)) then (if(not(nem:eVitals.BloodPressureGroup/nem:eVitals.07) or nem:eVitals.BloodPressureGroup/nem:eVitals.07[@NV = ('7701001', '7701003')]) then key('nemSch_key_elements', 'eVitals.07', $nemSch_elements) else '') else ''"/>
			
			<!-- This assert flag is based on v3 Rule 35 - eVitals.10: If Disposition is not no_patient -->
			<sch:let name="eVitals.10" value="if(not($no_patient)) then (if(nem:eVitals.HeartRateGroup/nem:eVitals.10[@NV = ('7701001', '7701003')]) then key('nemSch_key_elements', 'eVitals.10', $nemSch_elements) else '') else ''"/>
			
			<!-- This assert flag is based on v3 Rule 36 - eVitals.14: If Disposition is not no_patient -->
			<sch:let name="eVitals.14" value="if(not($no_patient)) then (if(nem:eVitals.14[@NV = ('7701001', '7701003')]) then key('nemSch_key_elements', 'eVitals.14', $nemSch_elements) else '') else ''"/>

			<sch:let name="nemsisElements" value="nem:eVitals.BloodPressureGroup/nem:eVitals.06[$eVitals.06], nem:eVitals.BloodPressureGroup/nem:eVitals.07[$eVitals.07], nem:eVitals.HeartRateGroup/nem:eVitals.10[$eVitals.10], nem:eVitals.14[$eVitals.14]"/>
			<sch:let name="nemsisElementsMissing" value="'eVitals.07'"/>
			
			<!-- Assert (as warning) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_not_na_w_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($eVitals.06 or $eVitals.07 or $eVitals.10 or $eVitals.14)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="string-join(($eVitals.06, $eVitals.07, $eVitals.10, $eVitals.14)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>
		
	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_any_value">
		<!-- This pattern validates that certain element values are recorded with any valid data value, based on the Incident/Patient Disposition. -->
		
		<sch:title>Certain element values are recorded with any valid data value, based on the Incident/Patient Disposition.</sch:title>
		
		<sch:rule id="al_consistency_eDisposition.12_any_value_rule_1" context="nem:PatientCareReport"> <!-- This rule fires on each PatientCareReport. -->
		
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			<!-- no_transport: No patient or Without Transport, No Treatment/Transport Required, Released, or Transferred. -->
			<sch:let name="no_transport" value="if($no_patient or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212015, 4212019, 4212021, 4212025, 4212027, 4212029, 4212031)]) then true() else false()"/>
			<!-- no_emstransport: No transport or Transported by Law Enforcement, Transported by Private Vehicle, Transport Non-Patient. -->
			<sch:let name="no_emstransport" value="if($no_transport or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212035, 4212037, 4212043)]) then true() else false()"/>
			<!-- *** Flag each of the following elements if it does not contain a value, contingent upon a flag that was set based on the Disposition *** -->
			
			<!-- This assert flag is based on Rule 126, migrated from the v2 validations - ePatient.14: If Disposition is not no_patient -->
			<sch:let name="ePatient.14" value="if(not($no_patient)) then (if(nem:ePatient/nem:ePatient.14 != '') then '' else key('nemSch_key_elements', 'ePatient.14', $nemSch_elements)) else ''"/>

			<!-- This assert flag is based on Rule 176, migrated from the v2 validations - eSituation.02: If Disposition is not no_patient and patient is not dead and eResponse.05 is 911 Response (Scene) or Intercept -->
			<sch:let name="eSituation.02" value="if(not($no_patient) and nem:eDisposition/nem:eDisposition.12[. &lt; 4212013 or . &gt; 4212019] and nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. &lt;= 2205003]) then (if(nem:eSituation/nem:eSituation.02 != '') then '' else key('nemSch_key_elements', 'eSituation.02', $nemSch_elements)) else ''"/>
			
			<!-- *** New Rules *** -->
			
			<!-- This assert flag is based on v3 Rule 11 - eDisposition.07: If Disposition is not no_scene -->
			<sch:let name="eDisposition.07" value="if(not($no_emstransport)) then (if(nem:eDisposition/nem:eDisposition.DestinationGroup/nem:eDisposition.07 != '') then '' else key('nemSch_key_elements', 'eDisposition.07', $nemSch_elements)) else ''"/>

			<sch:let name="nemsisElements" value="nem:ePatient/nem:ePatient.14[$ePatient.14], nem:eSituation/nem:eSituation.02[$eSituation.02], nem:eDisposition/nem:eDisposition.DestinationGroup/nem:eDisposition.07[$eDisposition.07]"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_any_value_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ePatient.14 or $eSituation.02 or $eDisposition.07)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="string-join(($ePatient.14, $eSituation.02, $eDisposition.07)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>
		
	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_eVitals.26_pattern">

		<sch:title>Level of Responsiveness (AVPU) should be recorded for at least 1 set of Vital Signs.</sch:title>

		<sch:rule id="al_consistency_eDisposition.12_eVitals.26_rule" context="nem:eVitals">
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on Rule 130, migrated from the v2 validations - eVitals.26: If Disposition is not no_patient -->
			<sch:let name="eVitals.26" value="if(not($no_patient)) then (if(every $element in nem:eVitals.VitalGroup satisfies $element/nem:eVitals.26 = '') then false() else true()) else true()"/>

			<sch:let name="numberOfVitalGroup" value="count(nem:eVitals.VitalGroup)"/>
			
			<sch:let name="nemsisElements" value="nem:eVitals.VitalGroup[$numberOfVitalGroup]/nem:eVitals.26" />
			
			<sch:assert id="al_consistency_eDisposition.12_eVitals.26_assert" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eVitals.26">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eVitals.26', $nemSch_elements)"/> should be recorded for at least 1 set of Vital Signs.
			</sch:assert>
			
		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_eVitals.26_eSituation_pattern">

		<sch:title>Before 2/15/2019, certain element values are recorded with any valid data value, based on the Incident/Patient Disposition, Type of Service Requested, and Level of Responsiveness (AVPU).</sch:title>

		<sch:rule id="al_consistency_eDisposition.12_eVitals.26_eSituation_rule_1" context="nem:PatientCareReport">

			<!-- ruleIsActive: Before 02/15/2019 -->
			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &lt; xs:dateTime('2019-02-15T00:00:00-06:00')) then true() else false()" />
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			<!-- value_expected: There is a patient not dead and no eVitals.26 values are Unresponsive -->
			<sch:let name="value_expected" value="not($no_patient) and nem:eDisposition/nem:eDisposition.12[. &lt; 4212013 or . &gt; 4212019] and (every $element in nem:eVitals/nem:eVitals.VitalGroup satisfies $element/nem:eVitals.26[. != '3326007'])"/>
			<!-- service_requested_required: Type of Service Requested is 911 Response (Scene) or Intercept -->
			<sch:let name="service_requested_required" value="true() and nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. &lt;= 2205003]"/>
			<!-- service_requested_transport: Type of Service Requested is Interfacility Transport or Medical Transport -->
			<sch:let name="service_requested_requiredortransport" value="$service_requested_required or nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. = ('2205005', '2205007')]"/>

			<!-- patient_is_alert: Patient is recorded as ALERT in every eVitals.26 -->
			<sch:let name="patient_is_alert" value="every $element in nem:eVitals/nem:eVitals.VitalGroup satisfies $element/nem:eVitals.26[@NV or . = '3326001']"/>
			<!-- patient_is_verbalorpainful: Patient is recorded as VERBAL or PAINFUL in at least 1 eVitals.26 -->
			<sch:let name="patient_is_verbalorpainful" value="some $element in nem:eVitals/nem:eVitals.VitalGroup satisfies $element/nem:eVitals.26[. = ('3326003', '3326005')]"/>
			
			<sch:let name="eSituation.01" value="if(nem:eSituation/nem:eSituation.01[@NV] and $service_requested_required) then key('nemSch_key_elements', 'eSituation.01', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.07" value="if(nem:eSituation/nem:eSituation.07[@NV] and $service_requested_required) then key('nemSch_key_elements', 'eSituation.07', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.08" value="if(nem:eSituation/nem:eSituation.08[@NV] and $service_requested_required) then key('nemSch_key_elements', 'eSituation.08', $nemSch_elements) else ''"/>			

			<sch:let name="eSituation.09" value="if(nem:eSituation/nem:eSituation.09[@NV] and $service_requested_requiredortransport) then key('nemSch_key_elements', 'eSituation.09', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.11" value="if(nem:eSituation/nem:eSituation.11[@NV] and $service_requested_requiredortransport) then key('nemSch_key_elements', 'eSituation.11', $nemSch_elements) else ''"/>

			<sch:let name="nemsisElements" value="nem:eSituation/nem:eSituation.01[$value_expected and $eSituation.01], nem:eSituation/nem:eSituation.07[$value_expected and $eSituation.07], nem:eSituation/nem:eSituation.08[$value_expected and $eSituation.08], nem:eSituation/nem:eSituation.09[$value_expected and $eSituation.09], nem:eSituation/nem:eSituation.11[$value_expected and $eSituation.11]"/>

			<sch:assert id="al_consistency_eDisposition.12_eVitals.26_eSituation_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or not($value_expected) or not($patient_is_alert and ($eSituation.01 or $eSituation.07 or $eSituation.08 or $eSituation.09 or $eSituation.11))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.26', $nemSch_elements)"/>, the following should be Recorded:
				<sch:value-of select="string-join(($eSituation.01, $eSituation.07, $eSituation.08, $eSituation.09, $eSituation.11)[. != ''], ', ')"/>
			</sch:assert>

			<sch:assert id="al_consistency_eDisposition.12_eVitals.26_eSituation_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or not($value_expected) or not($patient_is_verbalorpainful and ($eSituation.01 or $eSituation.07 or $eSituation.08 or $eSituation.09 or $eSituation.11))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.26', $nemSch_elements)"/>, the following should be Recorded:
				<sch:value-of select="string-join(($eSituation.01, $eSituation.07, $eSituation.08, $eSituation.09, $eSituation.11)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_eVitals.20_eSituation_pattern">

		<sch:title>Starting 2/15/2019, certain element values are recorded with any valid data value, based on the Incident/Patient Disposition, Type of Service Requested, and Glascow Coma Score: Verbal.</sch:title>

		<sch:rule id="al_consistency_eDisposition.12_eVitals.20_eSituation_rule_1" context="nem:PatientCareReport">

			<!-- ruleIsActive: Starting 02/15/2019 -->
			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= xs:dateTime('2019-02-15T00:00:00-06:00')) then true() else false()" />
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			<!-- patient_is_adult: Patient is >= 18 years old. -->
			<sch:let name="patient_is_adult" value="if(not($no_patient) and nem:ePatient/nem:ePatient.AgeGroup/nem:ePatient.16[not(. = '') and not(@NV) and . = 2516009] and nem:ePatient/nem:ePatient.AgeGroup/nem:ePatient.15[not(. = '') and not(@NV) and . &gt;= 18]) then true() else false()"/>
			
			<!-- service_requested_required: Type of Service Requested is 911 Response (Scene) or Intercept -->
			<sch:let name="service_requested_required" value="true() and nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. &lt;= 2205003]"/>
			<!-- service_requested_transport: Type of Service Requested is Interfacility Transport or Medical Transport -->
			<sch:let name="service_requested_requiredortransport" value="$service_requested_required or nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. = ('2205005', '2205007')]"/>
			<!-- patient_is_oriented: Patient is recorded as ORIENTED in at least one GCS-Verbal element -->
			<sch:let name="patient_is_oriented" value="some $element in nem:eVitals/nem:eVitals.VitalGroup satisfies $element/nem:eVitals.GlasgowScoreGroup/nem:eVitals.20[. = '5']"/>
			<sch:let name="patient_is_adultandoriented" value="$patient_is_adult and $patient_is_oriented"/>
			<!-- value_expected: There is a patient not dead and eDisposition.12 value is less than 4212013 or greater than 4212019 -->
			<sch:let name="value_expected_error" value="not($no_patient) and nem:eDisposition/nem:eDisposition.12[. &lt; 4212013 or . &gt; 4212019] and $patient_is_adultandoriented"/>
			<!-- value_expected: There is a patient not dead and eDisposition.12 value is less than 4212013 or greater than 4212019 -->
			<sch:let name="value_expected_warning" value="not($no_patient) and nem:eDisposition/nem:eDisposition.12[. &lt; 4212013 or . &gt; 4212019] and not($patient_is_adultandoriented)"/>
			
			<sch:let name="eSituation.07" value="if(nem:eSituation/nem:eSituation.07[@NV] and $service_requested_required) then key('nemSch_key_elements', 'eSituation.07', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.08" value="if(nem:eSituation/nem:eSituation.08[@NV] and $service_requested_required) then key('nemSch_key_elements', 'eSituation.08', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.09" value="if(nem:eSituation/nem:eSituation.09[@NV] and $service_requested_requiredortransport) then key('nemSch_key_elements', 'eSituation.09', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.11" value="if(nem:eSituation/nem:eSituation.11[@NV] and $service_requested_requiredortransport) then key('nemSch_key_elements', 'eSituation.11', $nemSch_elements) else ''"/>

			<sch:let name="nemsisElements" value="nem:eSituation/nem:eSituation.07[($value_expected_error or $value_expected_warning) and $eSituation.07], nem:eSituation/nem:eSituation.08[($value_expected_error or $value_expected_warning) and $eSituation.08], nem:eSituation/nem:eSituation.09[($value_expected_error or $value_expected_warning) and $eSituation.09], nem:eSituation/nem:eSituation.11[($value_expected_error or $value_expected_warning) and $eSituation.11]"/>

			<sch:assert id="al_consistency_eDisposition.12_eVitals.20_eSituation_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or not($value_expected_error and ($eSituation.07 or $eSituation.08 or $eSituation.09 or $eSituation.11))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.20', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="string-join(($eSituation.07, $eSituation.08, $eSituation.09, $eSituation.11)[. != ''], ', ')"/>
			</sch:assert>

			<sch:assert id="al_consistency_eDisposition.12_eVitals.20_eSituation_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or not($value_expected_warning and ($eSituation.07 or $eSituation.08 or $eSituation.09 or $eSituation.11))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.20', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="string-join(($eSituation.07, $eSituation.08, $eSituation.09, $eSituation.11)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_eSituation.01_pattern">

		<sch:title>Starting 2/15/2019, Date/Time of Symptom Onset should be recorded when there is patient contact.</sch:title>

		<sch:rule id="al_consistency_eDisposition.12_eSituation.01_rule_1" context="nem:PatientCareReport">

			<!-- ruleIsActive: Starting 02/15/2019 -->
			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= xs:dateTime('2019-02-15T00:00:00-06:00')) then true() else false()" />
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>

			<!-- service_requested_required: Type of Service Requested is 911 Response (Scene) or Intercept -->
			<sch:let name="service_requested_required" value="true() and nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. &lt;= 2205003]"/>
						
			<sch:let name="eSituation.01" value="if(nem:eSituation/nem:eSituation.01[@NV] and $service_requested_required) then key('nemSch_key_elements', 'eSituation.01', $nemSch_elements) else ''"/>
			
			<sch:let name="nemsisElements" value="nem:eSituation/nem:eSituation.01[not($no_patient) and $eSituation.01]"/>

			<sch:assert id="al_consistency_eDisposition.12_eSituation.01_rule_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or $no_patient or not($eSituation.01)">
				Because there was patient contact, <sch:value-of select="$eSituation.01"/> should be recorded.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_eVitals.26_eSituation.PatientComplaintGroup_pattern">

		<sch:title>Before 2/15/2019, certain element values are recorded with any valid data value, based on the Incident/Patient Disposition, Type of Service Requested, and Level of Responsiveness (AVPU).</sch:title>

		<sch:rule id="al_consistency_eDisposition.12_eVitals.26_eSituation.PatientComplaintGroup_rule_1" context="nem:eSituation.PatientComplaintGroup">

			<!-- ruleIsActive: Before 02/15/2019 -->
			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &lt; xs:dateTime('2019-02-15T00:00:00-06:00')) then true() else false()" />
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			<!-- value_expected: There is a patient and patient is not dead and Type of Service Requested is 911 Response (Scene) or Intercept and NO eVitals.26 are recorded as UNRESPONSIVE -->
			<sch:let name="value_expected" value="not($no_patient) and (ancestor::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt; 4212013 or . &gt; 4212019]) and (ancestor::nem:PatientCareReport/nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. &lt;= 2205003]) and (every $element in ancestor::nem:PatientCareReport/nem:eVitals/nem:eVitals.VitalGroup satisfies $element/nem:eVitals.26[. != '3326007'])"/>

			<!-- patient_is_alert: Patient is recorded as ALERT in every eVitals.26 -->
			<sch:let name="patient_is_alert" value="every $element in ancestor::nem:PatientCareReport/nem:eVitals/nem:eVitals.VitalGroup satisfies $element/nem:eVitals.26[@NV or . = '3326001']"/>
			<!-- patient_is_verbalorpainful: Patient is recorded as VERBAL or PAINFUL in at least 1 eVitals.26 -->
			<sch:let name="patient_is_verbalorpainful" value="some $element in ancestor::nem:PatientCareReport/nem:eVitals/nem:eVitals.VitalGroup satisfies $element/nem:eVitals.26[. = ('3326003', '3326005')]"/>
			
			<sch:let name="eSituation.04" value="if(not(nem:eSituation.04) or nem:eSituation.04[@NV]) then key('nemSch_key_elements', 'eSituation.04', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.05" value="if(not(nem:eSituation.05) or nem:eSituation.05[@NV]) then key('nemSch_key_elements', 'eSituation.05', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.06" value="if(not(nem:eSituation.06) or nem:eSituation.06[@NV]) then key('nemSch_key_elements', 'eSituation.06', $nemSch_elements) else ''"/>

			<sch:let name="nemsisElements" value="nem:eSituation.04[$value_expected and $eSituation.04 and @NV], nem:eSituation.05[$value_expected and $eSituation.05 and @NV], nem:eSituation.06[$value_expected and $eSituation.06 and @NV]"/>
			<sch:let name="nemsisElementsMissing" value="string-join((.[$value_expected and not(nem:eSituation.04)]/'eSituation.04', .[$value_expected and not(nem:eSituation.05)]/'eSituation.05', .[$value_expected and not(nem:eSituation.06)]/'eSituation.06'), ' ')"/>

			<sch:assert id="al_consistency_eDisposition.12_eVitals.26_eSituation.PatientComplaintGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or not($value_expected) or not($patient_is_alert and ($eSituation.04 or $eSituation.05 or $eSituation.06))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.26', $nemSch_elements)"/>, the following should be Recorded:
				<sch:value-of select="string-join(($eSituation.04, $eSituation.05, $eSituation.06)[. != ''], ', ')"/>
			</sch:assert>

			<sch:assert id="al_consistency_eDisposition.12_eVitals.26_eSituation.PatientComplaintGroup_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or not($value_expected) or not($patient_is_verbalorpainful and ($eSituation.04 or $eSituation.05 or $eSituation.06))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.26', $nemSch_elements)"/>, the following should be Recorded:
				<sch:value-of select="string-join(($eSituation.04, $eSituation.05, $eSituation.06)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_consistency_eDisposition.12_eVitals.20_eSituation.PatientComplaintGroup_pattern">

		<sch:title>Starting 2/15/2019, certain element values are recorded with any valid data value, based on the Incident/Patient Disposition, Type of Service Requested, and Glascow Coma Score-Verbal.</sch:title>

		<sch:rule id="al_consistency_eDisposition.12_eVitals.20_eSituation.PatientComplaintGroup_rule_1" context="nem:eSituation.PatientComplaintGroup">

			<!-- ruleIsActive: After 02/15/2019 -->
			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= xs:dateTime('2019-02-15T00:00:00-06:00')) then true() else false()" />
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			<!-- patient_is_adult: Patient is >= 18 years old. -->
			<sch:let name="patient_is_adult" value="if(not($no_patient) and ancestor::nem:PatientCareReport/nem:ePatient/nem:ePatient.AgeGroup/nem:ePatient.16[not(. = '') and not(@NV) and . = 2516009] and ancestor::nem:PatientCareReport/nem:ePatient/nem:ePatient.AgeGroup/nem:ePatient.15[not(. = '') and not(@NV) and . &gt;= 18]) then true() else false()"/>
			<!-- patient_is_alert: Patient is recorded as ORIENTED in at least one eVitals.20 -->
			<sch:let name="patient_is_oriented" value="some $element in ancestor::nem:PatientCareReport/nem:eVitals/nem:eVitals.VitalGroup satisfies $element/nem:eVitals.GlasgowScoreGroup/nem:eVitals.20[. = '5']"/>
			<sch:let name="patient_is_adultandoriented" value="$patient_is_adult and $patient_is_oriented"/>
			<!-- value_expected: There is a patient that is not dead and Type of Service Requested is 911 Response (Scene) or Intercept. Error if patient is adult and oriented, warning otherwise -->
			<sch:let name="value_expected_error" value="not($no_patient) and (ancestor::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt; 4212013 or . &gt; 4212019]) and (ancestor::nem:PatientCareReport/nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. &lt;= 2205003]) and $patient_is_adultandoriented"/>
			<sch:let name="value_expected_warning" value="not($no_patient) and (ancestor::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt; 4212013 or . &gt; 4212019]) and (ancestor::nem:PatientCareReport/nem:eResponse/nem:eResponse.ServiceGroup/nem:eResponse.05[. &lt;= 2205003]) and not($patient_is_adultandoriented)"/>
			
			<sch:let name="eSituation.04" value="if(not(nem:eSituation.04) or nem:eSituation.04[@NV]) then key('nemSch_key_elements', 'eSituation.04', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.05" value="if(not(nem:eSituation.05) or nem:eSituation.05[@NV]) then key('nemSch_key_elements', 'eSituation.05', $nemSch_elements) else ''"/>
			<sch:let name="eSituation.06" value="if(not(nem:eSituation.06) or nem:eSituation.06[@NV]) then key('nemSch_key_elements', 'eSituation.06', $nemSch_elements) else ''"/>

			<sch:let name="nemsisElements" value="nem:eSituation.04[($value_expected_error or $value_expected_warning) and $eSituation.04 and @NV], nem:eSituation.05[($value_expected_error or $value_expected_warning) and $eSituation.05 and @NV], nem:eSituation.06[($value_expected_error or $value_expected_warning) and $eSituation.06 and @NV]"/>
			<sch:let name="nemsisElementsMissing" value="string-join((.[($value_expected_error or $value_expected_warning) and not(nem:eSituation.04)]/'eSituation.04', .[($value_expected_error or $value_expected_warning) and not(nem:eSituation.05)]/'eSituation.05', .[($value_expected_error or $value_expected_warning) and not(nem:eSituation.06)]/'eSituation.06'), ' ')"/>
			
			<sch:assert id="al_consistency_eDisposition.12_eVitals.20_eSituation.PatientComplaintGroup_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or not($value_expected_error and ($eSituation.04 or $eSituation.05 or $eSituation.06))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.20', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="string-join(($eSituation.04, $eSituation.05, $eSituation.06)[. != ''], ', ')"/>
			</sch:assert>

			<sch:assert id="al_consistency_eDisposition.12_eVitals.20_eSituation.PatientComplaintGroup_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive) or not($value_expected_warning and ($eSituation.04 or $eSituation.05 or $eSituation.06))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eResponse.05', $nemSch_elements)"/>, and <sch:value-of select="key('nemSch_key_elements', 'eVitals.20', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="string-join(($eSituation.04, $eSituation.05, $eSituation.06)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
	<sch:pattern id="al_consistency_eDisposition.12_any_value_w">
		<!-- This pattern validates that certain element values are recorded with any valid data value, based on the Incident/Patient Disposition. -->
		
		<sch:title>Certain element values are recorded with any valid data value, based on the Incident/Patient Disposition.</sch:title>
		
		<sch:rule id="al_consistency_eDisposition.12_any_value_w_rule_1" context="nem:PatientCareReport"> <!-- This rule fires on each PatientCareReport. -->
			<!-- *** Flag each of the following elements if it does not contain a value, contingent upon a flag that was set based on the Disposition *** -->
			
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on v3 Rule 17 - ePatient.12: If Disposition is not no_patient -->
			<sch:let name="ePatient.12" value="if(not($no_patient)) then (if(nem:ePatient/nem:ePatient.12 != '') then '' else key('nemSch_key_elements', 'ePatient.12', $nemSch_elements)) else ''"/>

			<sch:let name="nemsisElements" value="nem:ePatient/nem:ePatient.12[$ePatient.12]"/>
			<sch:let name="nemsisElementsMissing" value="'ePatient.12'"/>
			<sch:let name="nemsisElementsMissingContext" value="nem:ePatient"/>
			
			<!-- Assert (as warning) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_any_value_w_assert_1" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($ePatient.12)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, the following should be recorded:
				<sch:value-of select="string-join(($ePatient.12)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>
		
	</sch:pattern>

	<sch:pattern id="al_required_eScene.01">

		<sch:title>Starting 04/01/2018, First EMS Unit on Scene must be recorded when Incident/Patient Disposition is not Canceled, Transport Non-Patient, or Standby values.</sch:title>

		<sch:rule id="al_required_eScene.01_rule" context="nem:eScene">

			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= xs:dateTime('2018-04-01T00:00:00-05:00')) then true() else false()" />

			<sch:let name="applicableDisposition" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212005 or (. &gt;= 4212013 and . &lt;= 4212037)]) then true() else false()" />

			<sch:let name="nemsisElements" value="nem:eScene.01"/>
			
			<sch:assert id="al_required_eScene.01_assert" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive and $applicableDisposition) or nem:eScene.01[. != '']">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eScene.01', $nemSch_elements)"/> must be recorded.
			</sch:assert>

		</sch:rule>

	</sch:pattern>

	<sch:pattern id="al_required_eScene.01_eScene.ResponderGroup">

		<sch:title>Starting 04/01/2018, at least one Other EMS or Public Safety Agency must be recorded when unit is not First EMS Unit on Scene.</sch:title>

		<sch:rule id="al_required_eScene.01_eScene.ResponderGroup_rule" context="nem:eScene">

			<sch:let name="ruleIsActive" value="if(xs:dateTime(ancestor-or-self::nem:PatientCareReport/nem:eTimes/nem:eTimes.03) &gt;= xs:dateTime('2018-04-01T00:00:00-05:00')) then true() else false()" />

			<sch:let name="applicableDisposition" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212005 or (. &gt;= 4212013 and . &lt;= 4212037)]) then true() else false()" />

			<sch:let name="eScene01No" value="if (nem:eScene.01[. = '9923001']) then true() else false()" />

			<sch:let name="nemsisElementsMissing" value="'eScene.02 eScene.04'"/>
			<sch:let name="nemsisElementsMissingContext" value="nem:eScene.ResponderGroup"/>
			
			<sch:assert id="al_required_eScene.01_eScene.ResponderGroup_assert" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ruleIsActive and $applicableDisposition and $eScene01No) or (nem:eScene.ResponderGroup and (every $element in nem:eScene.ResponderGroup satisfies ($element/nem:eScene.02 and $element/nem:eScene.04)))">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/> and <sch:value-of select="key('nemSch_key_elements', 'eScene.01', $nemSch_elements)"/> being 'No',  <sch:value-of select="key('nemSch_key_elements', 'eScene.02', $nemSch_elements)"/> and <sch:value-of select="key('nemSch_key_elements', 'eScene.04', $nemSch_elements)"/> must be recorded.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
			
	<sch:pattern id="al_consistency_eDisposition.12_specific_value">
		<!-- This pattern validates that certain element values are recorded with a specific data value, based on the Incident/Patient Disposition. -->
		
		<sch:title>Certain element values are recorded with a specific data value, based on the Incident/Patient Disposition.</sch:title>
		
		<sch:rule id="al_consistency_eDisposition.12_specific_value_rule_1" context="nem:PatientCareReport"> <!-- This rule fires on each PatientCareReport. -->
			<!-- *** Flag each of the following elements if it does not contain a specific value, contingent upon a flag that was set based on the Disposition *** -->
			
			<!-- no_scene: Canceled (Prior to Arrival at Scene). -->
			<sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()"/>
			<!-- no_patient: No scene or Assist, Canceled on Scene (No Patient), Standby, or Transport of Body Parts or Organs Only. -->
			<sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212025, 4212039, 4212041, 4212043)]) then true() else false()"/>
			
			<!-- This assert flag is based on Rule 125, migrated from the v2 validations - ePatient.13: If Disposition is not no_patient -->
			<sch:let name="ePatient.13" value="if(not($no_patient)) then (if(nem:ePatient/nem:ePatient.13 != '') then '' else key('nemSch_key_elements', 'ePatient.13', $nemSch_elements)) else ''"/>
			<sch:let name="ePatient.13_unknown" value="if(not($no_patient)) then (if(nem:ePatient/nem:ePatient.13 != '9906005') then '' else key('nemSch_key_elements', 'ePatient.13', $nemSch_elements)) else ''"/>

			<sch:let name="nemsisElements" value="nem:ePatient/nem:ePatient.13[$ePatient.13 or $ePatient.13_unknown]"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_specific_value_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($ePatient.13)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'ePatient.13', $nemSch_elements)"/> should be recorded.
			</sch:assert>

			<sch:assert id="al_consistency_eDisposition.12_specific_value_assert_2" role="[WARNING]" diagnostics="nemsisDiagnostic" test="$ePatient.13 or not($ePatient.13_unknown)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'ePatient.13', $nemSch_elements)"/> should be recorded as 'Male' or 'Female'.
			</sch:assert>

		</sch:rule>
		
	</sch:pattern>
	
	<sch:pattern id="al_consistency_eDisposition.12_eNarrative.01">
		<!-- This pattern validates that eNarrative.01 is appropriately recorded (more than 30 characters if a patient is involved, more than 10 characters otherwise), based on the Incident/Patient Disposition. -->
		
		<sch:title>eNarrative.01 is appropriately recorded (more than 30 characters if a patient is involved, more than 10 characters otherwise), based on the Incident/Patient Disposition.</sch:title>
		
		<!-- Make sure Narrative exists -->
		<sch:rule id="al_always_required_eNarrative_rule_1" context="nem:PatientCareReport">
					
			<sch:let name="nemsisElementsMissing" value="'eNarrative.01'"/>
			<sch:let name="nemsisElementsMissingContext" value="ancestor-or-self::nem:PatientCareReport/nem:eNarrative" />
		
			<sch:assert id="al_always_required_eNarrative_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="nem:eNarrative">
				<sch:value-of select="key('nemSch_key_elements', 'eNarrative.01', $nemSch_elements)"/> is required.
			</sch:assert>
		
		</sch:rule>
		
		<sch:rule id="al_consistency_eDisposition.12_eNarrative.01_rule_1" context="nem:eNarrative"> <!-- This rule fires on each PatientCareReport. -->
		
			<sch:let name="nemsisElements" value="nem:eNarrative/nem:eNarrative.01"/>
			<sch:let name="nemsisElementsMissing" value="'eNarrative.01'"/>
			
			<sch:extends rule="al_abstract_rule_eDisposition.12"/>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_eNarrative.01_assert_1" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$no_patient or (not($no_patient) and string-length(nem:eNarrative.01) &gt;= 30)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eNarrative.01', $nemSch_elements)"/> should have at least 30 characters.
			</sch:assert>
			
			<!-- Assert (as error) that none of the elements above should be flagged. If the assert fails, list the flagged elements. -->
			<sch:assert id="al_consistency_eDisposition.12_eNarrative.01_assert_2" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($no_patient) or ($no_patient and string-length(nem:eNarrative.01) &gt;= 10)">
				Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)"/>, <sch:value-of select="key('nemSch_key_elements', 'eNarrative.01', $nemSch_elements)"/> should have at least 10 characters.
			</sch:assert>

		</sch:rule>
		
	</sch:pattern>	
	
	<sch:pattern id="alSch_uniqueness_EMSDataSet">

	<!-- This pattern validates that values for certain recurring Patient Care Report elements are unique within a list.  -->

		<sch:title>Certain recurring patient care report data elements are unique within a list.</sch:title>
		
		<sch:rule id="nemSch_uniqueness_EMSDataSet_abstract" abstract="true">

			<sch:let name="nemsisElements" value="../*[local-name() = local-name(current())]"/>

			<!-- Assert that "None" (negating value that is mutually exclusive with any other values) should be the only value recorded for the element.  -->

			<sch:assert id="nemSch_uniqueness_EMSDataSet_none" role="[WARNING]" diagnostics="nemsisDiagnostic" test="count(../*[local-name() = local-name(current())]) = 1">
				When <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> is "<sch:value-of select="$none_label"/>", no other <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be recorded.
			</sch:assert>

		</sch:rule>
		
		<!-- This rule is based on Rule 10, migrated from the v2 validations - eArrest.03 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eArrest.03_na-cf" context="nem:eArrest.03[. = '3003007']">

		<!-- This rule fires when there is an instance of eArrest.03 is set to 'Not Attempted-Considered Futile'. -->

			<sch:let name="none_label" value="'Not Attempted-Considered Futile'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>
		
		<!-- This rule is based on Rule 10, migrated from the v2 validations - eArrest.03 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eArrest.03_na-dnr" context="nem:eArrest.03[. = '3003009']">

		<!-- This rule fires when there is an instance of eArrest.03 is set to 'Not Attempted-DNR Orders'. -->

			<sch:let name="none_label" value="'Not Attempted-DNR Orders'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>
		
		<!-- This rule is based on Rule 10, migrated from the v2 validations - eArrest.03 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eArrest.03_na-soc" context="nem:eArrest.03[. = '3003011']">

		<!-- This rule fires when there is an instance of eArrest.03 is set to 'Not Attempted-Signs of Circulation'. -->

			<sch:let name="none_label" value="'Not Attempted-Signs of Circulation'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>

		<!-- This rule is based on Rule 6, migrated from the v2 validations - eInjury.07 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eInjury.07" context="nem:eInjury.07[. = '2907015']">

		<!-- This rule fires when there is an instance of eInjury.07 is set to 'None'. -->

			<sch:let name="none_label" value="'None'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>
		
		<!-- This rule is based on Rule 8, migrated from the v2 validations - eInjury.08 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eInjury.08_nad" context="nem:eInjury.08[. = '2908007']">

		<!-- This rule fires when there is an instance of eInjury.08 is set to 'No Airbag Deployed'. -->

			<sch:let name="none_label" value="'No Airbag Deployed'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>
		
		<!-- This rule is based on Rule 8, migrated from the v2 validations - eInjury.08 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eInjury.08_nap" context="nem:eInjury.08[. = '2908009']">

		<!-- This rule fires when there is an instance of eInjury.08 is set to 'No Airbag Present'. -->

			<sch:let name="none_label" value="'No Airbag Present'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>

		<!-- This rule is based on Rule 141, migrated from the v2 validations - eExam.04 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eExam.04" context="nem:eExam.AssessmentGroup/nem:eExam.04[. = '3504023']">

		<!-- This rule fires when there is an instance of eExam.04 is set to 'Not Done'. -->

			<sch:let name="none_label" value="'Not Done'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>
		
		<!-- This rule is based on Rule 146, migrated from the v2 validations - eExam.18 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eExam.18" context="nem:eExam.AssessmentGroup/nem:eExam.EyeGroup/nem:eExam.18[. = '3518039']">

		<!-- This rule fires when there is an instance of eExam.18 is set to 'Not Done'. -->

			<sch:let name="none_label" value="'Not Done'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>
		
		<!-- This rule is based on Rule 143, migrated from the v2 validations - eExam.19 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eExam.19" context="nem:eExam.AssessmentGroup/nem:eExam.19[. = '3519009']">

		<!-- This rule fires when there is an instance of eExam.19 is set to 'Not Done'. -->

			<sch:let name="none_label" value="'Not Done'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>
		
		<!-- This rule is based on Rule 144, migrated from the v2 validations - eExam.20 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eExam.20" context="nem:eExam.AssessmentGroup/nem:eExam.20[. = '3520023']">

		<!-- This rule fires when there is an instance of eExam.20 is set to 'Not Done'. -->

			<sch:let name="none_label" value="'Not Done'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>
		
		<!-- This rule is based on Rule 37, migrated from the v2 validations - eProtocols.01 negating value must be the only value recorded. -->
		<sch:rule id="alSch_uniqueness_EMSDataSet_eProtocols.01" context="nem:eProtocols.ProtocolGroup/nem:eProtocols.01[. = '9514153']">

		<!-- This rule fires when there is an instance of eProtocols.01 is set to 'Not Done'. -->

			<sch:let name="none_label" value="'Not Done'"/>

			<sch:extends rule="nemSch_uniqueness_EMSDataSet_abstract"/>

		</sch:rule>

	</sch:pattern>

		<!-- PATTERNS modified from NEMSIS National EMS (PCR/Event) Dataset Schematron File -->
	
	<sch:pattern id="nemSch_sequence_time">
		<sch:title>The sequence of date/time elements is appropriate.</sch:title>

		<!-- Copied from national pattern nemSch_sequence_time, with [WARNING] changed to [ERROR] -->
		<!-- This pattern validates the sequence of date/time elements. Each date/time element in a record should have a value that is not too early or too late compared to certain other elements in the record. -->

		<sch:rule id="nemSch_sequence_time_eTimes" context="nem:eTimes">

			<!-- Flag each of the following elements if it occurs too early in the sequence of date/times. -->

			<!-- eAirway.10: Date/Time Decision to Manage the Patient with an Invasive Airway should not occur prior to: 
				- eTimes.03 - Unit Notified by Dispatch Date/Time. -->

			<sch:let name="eAirway.10" value="if(not(../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10) or (every $element in (nem:eTimes.03)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10))) then '' else key('nemSch_key_elements', 'eAirway.10', $nemSch_elements)"/>

			<!-- eAirway.11: Date/Time Invasive Airway Placement Attempts Abandoned should not occur prior to: 
				- eAirway.10 - Date/Time Decision to Manage the Patient with an Invasive Airway, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:let name="eAirway.11" value="if(not(../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.11) or (every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10, nem:eTimes.03, nem:eTimes.04, nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.11))) then '' else key('nemSch_key_elements', 'eAirway.11', $nemSch_elements)"/>

			<!-- eArrest.14: Date/Time of Cardiac Arrest: No sequence constraints. -->

			<!-- eArrest.15: Date/Time Resuscitation Discontinued: No sequence constraints. -->

			<!-- eArrest.19: Date/Time of Initial CPR: No sequence constraints. -->

			<!-- eOutcome.11: Date/Time of Hospital Admission should not occur prior to: 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time, 
				- eTimes.06 - Unit Arrived on Scene Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time, 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.09 - Unit Left Scene Date/Time, 
				- eTimes.10 - Arrival at Destination Landing Area Date/Time, 
				- eTimes.11 - Patient Arrived at Destination Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time. -->

			<sch:let name="eOutcome.11" value="if(not(../nem:eOutcome/nem:eOutcome.11) or (every $element in (nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11, nem:eTimes.12)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(../nem:eOutcome/nem:eOutcome.11))) then '' else key('nemSch_key_elements', 'eOutcome.11', $nemSch_elements)"/>

			<!-- eOutcome.16: Date/Time of Hospital Discharge should not occur prior to: 
				- eOutcome.11 - Date/Time of Hospital Admission, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time, 
				- eTimes.06 - Unit Arrived on Scene Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time, 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.09 - Unit Left Scene Date/Time, 
				- eTimes.10 - Arrival at Destination Landing Area Date/Time, 
				- eTimes.11 - Patient Arrived at Destination Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time. -->

			<sch:let name="eOutcome.16" value="if(not(../nem:eOutcome/nem:eOutcome.16) or (every $element in (../nem:eOutcome/nem:eOutcome.11, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11, nem:eTimes.12)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(../nem:eOutcome/nem:eOutcome.16))) then '' else key('nemSch_key_elements', 'eOutcome.16', $nemSch_elements)"/>

			<!-- ePayment.03: Date Physician Certification Statement Signed: No sequence constraints. -->

			<!-- eScene.05: Date/Time Initial Responder Arrived on Scene: No sequence constraints. -->

			<!-- eSituation.01: Date/Time of Symptom Onset: No sequence constraints. -->

			<!-- eSituation.18: Date/Time Last Known Well: No sequence constraints. -->

			<!-- eTimes.01: PSAP Call Date/Time: No sequence constraints. -->

			<!-- eTimes.02: Dispatch Notified Date/Time should not occur prior to: 
                - eTimes.01 - PSAP Call Date/Time. -->

			<sch:let name="eTimes.02" value="if(not(nem:eTimes.02) or (every $element in (nem:eTimes.01)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.02))) then '' else key('nemSch_key_elements', 'eTimes.02', $nemSch_elements)"/>

			<!-- eTimes.03: Unit Notified by Dispatch Date/Time should not occur prior to: 
				- eTimes.01 - PSAP Call Date/Time, 
				- eTimes.04 - Dispatch Notified Date/Time. -->

			<sch:let name="eTimes.03" value="if((every $element in (nem:eTimes.01, nem:eTimes.02)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.03))) then '' else key('nemSch_key_elements', 'eTimes.03', $nemSch_elements)"/>

			<!-- eTimes.04: Dispatch Acknowledged Date/Time should not occur prior to: 
				- eTimes.03 - Unit Notified by Dispatch Date/Time. -->

			<sch:let name="eTimes.04" value="if(not(nem:eTimes.04) or (every $element in (nem:eTimes.03)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.04))) then '' else key('nemSch_key_elements', 'eTimes.04', $nemSch_elements)"/>

			<!-- eTimes.05: Unit En Route Date/Time should not occur prior to: 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time. -->

			<sch:let name="eTimes.05" value="if(nem:eTimes.05 = '' or (every $element in (nem:eTimes.03, nem:eTimes.04)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.05))) then '' else key('nemSch_key_elements', 'eTimes.05', $nemSch_elements)"/>

			<!-- eTimes.06: Unit Arrived on Scene Date/Time should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time. -->

			<sch:let name="eTimes.06" value="if(nem:eTimes.06 = '' or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.06))) then '' else key('nemSch_key_elements', 'eTimes.06', $nemSch_elements)"/>

			<!-- eTimes.07: Arrived at Patient Date/Time should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time. 
				- (It may occur prior to eTimes.05 - Unit En Route Date/Time or eTimes.06 - Unit Arrived on Scene Date/Time in cases where a crew member arrived before the unit arrived.) -->

			<sch:let name="eTimes.07" value="if(nem:eTimes.07 = '' or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.07))) then '' else key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>

			<!-- eTimes.08: Transfer of EMS Patient Care Date/Time should not occur prior to: 
				- eAirway.10 - Date/Time Decision to Manage the Patient with an Invasive Airway, 
				- eAirway.11 - Date/Time Invasive Airway Placement Attempts Abandoned, 
				- eArrest.14 - Date/Time of Cardiac Arrest, 
				- eArrest.15 - Date/Time Resuscitation Discontinued, 
				- eArrest.19 - Date/Time of Initial CPR, 
				- eHistory.19 - Last Oral Intake, 
				- eInjury.14 - Date/Time of ACN Incident, 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eSituation.01 - Date/Time of Symptom Onset, 
				- eSituation.18 - Date/Time Last Known Well, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time, 
				- eTimes.06 - Unit Arrived on Scene Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:let name="eTimes.08" value="if(not(nem:eTimes.08) or nem:eTimes.08 = '' or (every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/(nem:eAirway.10, nem:eAirway.11), ../nem:eArrest/(nem:eArrest.14, nem:eArrest.15, nem:eArrest.19), ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eScene/nem:eScene.05, ../nem:eSituation/(nem:eSituation.01, nem:eSituation.18), nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.08))) then '' else key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)"/>

			<!-- eTimes.09: Unit Left Scene Date/Time should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time, 
				- eTimes.06 - Unit Arrived on Scene Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time. 
				- (It may occur prior to eTimes.08 - Transfer of EMS Patient Care Date/Time if the unit transported the patient to a rendezvous point prior to transferring care.) -->

			<sch:let name="eTimes.09" value="if(nem:eTimes.09 = '' or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.09))) then '' else key('nemSch_key_elements', 'eTimes.09', $nemSch_elements)"/>

			<!-- eTimes.10: Arrival at Destination Landing Area Date/Time should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time, 
				- eTimes.06 - Unit Arrived on Scene Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time, 
				- eTimes.09 - Unit Left Scene Date/Time. -->

			<sch:let name="eTimes.10" value="if(not(nem:eTimes.10) or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.09)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.10))) then '' else key('nemSch_key_elements', 'eTimes.10', $nemSch_elements)"/>

			<!-- eTimes.11: Patient Arrived at Destination Date/Time should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time, 
				- eTimes.06 - Unit Arrived on Scene Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time, 
				- eTimes.09 - Unit Left Scene Date/Time, 
				- eTimes.10 - Arrival at Destination Landing Area Date/Time. -->

			<sch:let name="eTimes.11" value="if(nem:eTimes.11 = '' or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.09, nem:eTimes.10)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.11))) then '' else key('nemSch_key_elements', 'eTimes.11', $nemSch_elements)"/>

			<!-- eTimes.12: Destination Patient Transfer of Care Date/Time should not occur prior to: 
				- eAirway.10 - Date/Time Decision to Manage the Patient with an Invasive Airway, 
				- eAirway.11 - Date/Time Invasive Airway Placement Attempts Abandoned, 
				- eArrest.14 - Date/Time of Cardiac Arrest, 
				- eArrest.15 - Date/Time Resuscitation Discontinued, 
				- eArrest.19 - Date/Time of Initial CPR, 
				- eHistory.19 - Last Oral Intake, 
				- eInjury.14 - Date/Time of ACN Incident, 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eSituation.01 - Date/Time of Symptom Onset, 
				- eSituation.18 - Date/Time Last Known Well, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time, 
				- eTimes.06 - Unit Arrived on Scene Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time, 
				- eTimes.09 - Unit Left Scene Date/Time, 
				- eTimes.10 - Arrival at Destination Landing Area Date/Time. -->

			<sch:let name="eTimes.12" value="if(nem:eTimes.12 = '' or (every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/(nem:eAirway.10, nem:eAirway.11), ../nem:eArrest/(nem:eArrest.14, nem:eArrest.15, nem:eArrest.19), ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eScene/nem:eScene.05, ../nem:eSituation/(nem:eSituation.01, nem:eSituation.18), nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.12))) then '' else key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)"/>

			<!-- eTimes.13: Unit Back in Service Date/Time should not occur prior to: 
				- eAirway.10 - Date/Time Decision to Manage the Patient with an Invasive Airway, 
				- eAirway.11 - Date/Time Invasive Airway Placement Attempts Abandoned, 
				- eArrest.14 - Date/Time of Cardiac Arrest, 
				- eArrest.15 - Date/Time Resuscitation Discontinued, 
				- eArrest.19 - Date/Time of Initial CPR, 
				- eHistory.19 - Last Oral Intake, 
				- eInjury.14 - Date/Time of ACN Incident, 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eSituation.01 - Date/Time of Symptom Onset, 
				- eSituation.18 - Date/Time Last Known Well, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time, 
				- eTimes.06 - Unit Arrived on Scene Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time, 
				- eTimes.09 - Unit Left Scene Date/Time, 
				- eTimes.10 - Arrival at Destination Landing Area Date/Time, 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time, 
				- eTimes.14 - Unit Canceled Date/Time. -->

			<sch:let name="eTimes.13" value="if((every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/(nem:eAirway.10, nem:eAirway.11), ../nem:eArrest/(nem:eArrest.14, nem:eArrest.15, nem:eArrest.19), ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eScene/nem:eScene.05, ../nem:eSituation/(nem:eSituation.01, nem:eSituation.18), nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11, nem:eTimes.12, nem:eTimes.14)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.13))) then '' else key('nemSch_key_elements', 'eTimes.13', $nemSch_elements)"/>

			<!-- eTimes.14: Unit Canceled Date/Time should not occur prior to:
				- eTimes.03 - Unit Notified by Dispatch Date/Time. -->

			<sch:let name="eTimes.14" value="if(not(nem:eTimes.14) or (every $element in (nem:eTimes.03)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.14))) then '' else key('nemSch_key_elements', 'eTimes.14', $nemSch_elements)"/>

			<!-- eTimes.15: Unit Back at Home Location Date/Time should not occur prior to: 
				- eAirway.10 - Date/Time Decision to Manage the Patient with an Invasive Airway, 
				- eAirway.11 - Date/Time Invasive Airway Placement Attempts Abandoned, 
				- eArrest.14 - Date/Time of Cardiac Arrest, 
				- eArrest.15 - Date/Time Resuscitation Discontinued, 
				- eArrest.19 - Date/Time of Initial CPR, 
				- eDisposition.25 - Date/Time of Destination Prearrival Alert or Activation, 
				- eHistory.19 - Last Oral Intake, 
				- eInjury.14 - Date/Time of ACN Incident, 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eSituation.01 - Date/Time of Symptom Onset, 
				- eSituation.18 - Date/Time Last Known Well, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.05 - Unit En Route Date/Time, 
				- eTimes.06 - Unit Arrived on Scene Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time, 
				- eTimes.09 - Unit Left Scene Date/Time, 
				- eTimes.10 - Arrival at Destination Landing Area Date/Time, 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time, 
				- eTimes.14 - Unit Canceled Date/Time. -->

			<sch:let name="eTimes.15" value="if(not(nem:eTimes.15) or (every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/(nem:eAirway.10, nem:eAirway.11), ../nem:eArrest/(nem:eArrest.14, nem:eArrest.15, nem:eArrest.19), ../nem:eDisposition/nem:eDisposition.HospitalTeamActivationGroup/nem:eDisposition.25, ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eScene/nem:eScene.05, ../nem:eSituation/(nem:eSituation.01, nem:eSituation.18), nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11, nem:eTimes.12, nem:eTimes.14)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.15))) then '' else key('nemSch_key_elements', 'eTimes.15', $nemSch_elements)"/>

			<!-- eTimes.16: EMS Call Completed Date/Time should not occur prior to: 
				- eTimes.13 - Unit Back in Service Date/Time. -->

			<sch:let name="eTimes.16" value="if(not(nem:eTimes.16) or (every $element in (nem:eTimes.13)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.16))) then '' else key('nemSch_key_elements', 'eTimes.16', $nemSch_elements)"/>

			<sch:let name="nemsisElements" value="(../nem:eAirway/nem:eAirway.AirwayGroup/(nem:eAirway.10, nem:eAirway.11), ../nem:eArrest/(nem:eArrest.14, nem:eArrest.15, nem:eArrest.19), ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eOutcome/nem:eOutcome.11, ../nem:eOutcome/nem:eOutcome.16, ../nem:eScene/nem:eScene.05, ../nem:eSituation/(nem:eSituation.01, nem:eSituation.18), *)[. != '']"/>

			<!-- eTimes.13: Unit Back in Service Date/Time should not occur after the current date/time. A window of up to one hour is allowed in case client and server clocks might be slightly off from each other.. -->

			<sch:let name="eTimes.13_current" value="if(xs:dateTime(nem:eTimes.13) &lt; current-dateTime() + xs:dayTimeDuration('PT1H')) then '' else concat(key('nemSch_key_elements', 'eTimes.13', $nemSch_elements), ' (and possibly other Date/Times)')"/>

			<!-- eTimes.15: Unit Back at Home Location Date/Time should not occur after the current date/time. A window of up to one hour is allowed in case client and server clocks might be slightly off from each other.. -->

			<sch:let name="eTimes.15_current" value="if(not(nem:eTimes.15) or xs:dateTime(nem:eTimes.15) &lt; current-dateTime() + xs:dayTimeDuration('PT1H')) then '' else key('nemSch_key_elements', 'eTimes.15', $nemSch_elements)"/>

			<!-- eTimes.16: EMS Call Completed Date/Time should not occur after the current date/time. A window of up to one hour is allowed in case client and server clocks might be slightly off from each other.. -->

			<sch:let name="eTimes.16_current" value="if(not(nem:eTimes.16) or xs:dateTime(nem:eTimes.16) &lt; current-dateTime() + xs:dayTimeDuration('PT1H')) then '' else key('nemSch_key_elements', 'eTimes.16', $nemSch_elements)"/>

			<!-- Assert that none of the elements above should be flagged. If the assert fails, list the flagged elements.  -->

			<sch:assert id="nemSch_sequence_time_eTimes_order" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eAirway.10 or $eAirway.11 or $eOutcome.11 or $eOutcome.16 or $eTimes.02 or $eTimes.03 or $eTimes.04 or $eTimes.05 or $eTimes.06 or $eTimes.07 or $eTimes.08 or $eTimes.09 or $eTimes.10 or $eTimes.11 or $eTimes.12 or $eTimes.13 or $eTimes.14 or $eTimes.15 or $eTimes.16)">
				Date/Times should be in order. The following times are too early:
				<sch:value-of select="string-join(($eAirway.10, $eAirway.11, $eOutcome.11, $eOutcome.16, $eTimes.02, $eTimes.03, $eTimes.04, $eTimes.05, $eTimes.06, $eTimes.07, $eTimes.08, $eTimes.09, $eTimes.10, $eTimes.11, $eTimes.12, $eTimes.13, $eTimes.14, $eTimes.15, $eTimes.16)[. != ''], ', ')"/>
			</sch:assert>

			<!-- Assert that none of the "_current" elements above should be flagged. If the assert fails, list the flagged elements.  -->

			<sch:assert id="nemSch_sequence_time_eTimes_current" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eTimes.13_current or $eTimes.15_current or $eTimes.16_current)">
				Date/Times should not be in the future (the current time according to this system is <sch:value-of select="format-dateTime(current-dateTime(),'[MNn] [D1], [Y0001], [H01]:[m01] [ZN]')"/>). The following times are too late:
				<sch:value-of select="string-join(($eTimes.13_current, $eTimes.15_current, $eTimes.16_current)[. != ''], ', ')"/>
			</sch:assert>

		</sch:rule>

		<!-- eAirway.02: Date/Time Airway Device Placement Confirmation: No sequence constraints. -->

		<sch:rule id="nemSch_sequence_time_eDevice.02" context="nem:eDevice.02[. != '']">

			<sch:let name="nemsisElements" value="(., ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']"/>

			<!-- eDevice.02: Date/Time of Event (per Medical Device) should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eDevice.02_after" role="[ERROR]" diagnostics="nemsisDiagnostic" test="every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.)">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>.
			</sch:assert>

			<!-- eDevice.02: Date/Time of Event (per Medical Device) should not occur after: 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time, 
				- eTimes.13 - Unit Back in Service Date/Time, 
				- eTimes.15 - Unit Back at Home Location Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eDevice.02_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)"/> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

		<sch:rule id="nemSch_sequence_time_eDisposition.25" context="nem:eDisposition.25[. != '']">

		<sch:let name="nemsisElements" value="(., ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']"/>

			<!-- eDisposition.25: Date/Time of Destination Prearrival Alert or Activation should not occur prior to: 
				- eTimes.03 - Unit Notified by Dispatch Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eDisposition.25_after" role="[ERROR]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.)">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>.
			</sch:assert>

			<!-- eDisposition.25: Date/Time of Destination Prearrival Alert or Activation should not occur after: 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time, 
				- eTimes.13 - Unit Back in Service Date/Time, 
				- eTimes.15 - Unit Back at Home Location Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eDisposition.25_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)"/> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

		<sch:rule id="nemSch_sequence_time_eExam.03" context="nem:eExam.03[. != '']">

			<sch:let name="nemsisElements" value="(., ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']"/>

			<!-- eExam.03: Date/Time of Assessment should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eExam.03_after" role="[ERROR]" diagnostics="nemsisDiagnostic" test="every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.)">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>.
			</sch:assert>

			<!-- eExam.03: Date/Time of Assessment should not occur after: 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time, 
				- eTimes.13 - Unit Back in Service Date/Time, 
				- eTimes.15 - Unit Back at Home Location Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eExam.03_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)"/> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

		<sch:rule id="nemSch_sequence_time_eLabs.01" context="nem:eLabs.01[. != '']">

			<sch:let name="eLabs.01_prior" value="if(../nem:eLabs.02 != '9923003' or (every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.))) then false() else true()"/>

			<sch:let name="nemsisElements" value="(., ../nem:eLabs.02, ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']"/>

			<!-- eLabs.01: When eLabs.02 Study/Result Prior to this Unit's EMS Care is not "Yes", Date/Time of Laboratory or Imaging Result should not occur prior to: 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eLabs.01_after" role="[ERROR]" diagnostics="nemsisDiagnostic" test="../nem:eLabs.02 = '9923003' or (every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.))">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>, unless <sch:value-of select="key('nemSch_key_elements', 'eLabs.02', $nemSch_elements)"/> is "Yes".
			</sch:assert>

			<!-- eLabs.01: When eLabs.02 Study/Result Prior to this Unit's EMS Care is "Yes", Date/Time of Laboratory or Imaging Result should not occur after: 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eLabs.01_prior_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eLabs.01_prior)">
				When <sch:value-of select="key('nemSch_key_elements', 'eLabs.02', $nemSch_elements)"/> is "Yes," <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>.
			</sch:assert>

			<!-- eLabs.01: Unless the previous assertion failed, Date/Time of Laboratory or Imaging Result should not occur after: 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time, 
				- eTimes.13 - Unit Back in Service Date/Time, 
				- eTimes.15 - Unit Back at Home Location Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eLabs.01_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eLabs.01_prior or (every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.))">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)"/> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

		<sch:rule id="nemSch_sequence_time_eMedications.01" context="nem:eMedications.01[. != '']">

			<sch:let name="eMedications.01_prior" value="if(../nem:eMedications.02 != '9923003' or (every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.))) then false() else true()"/>

			<sch:let name="nemsisElements" value="(., ../nem:eMedications.02, ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']"/>

			<!-- eMedications.01: Unless eMedications.02 Medication Administered Prior to this Unit's EMS Care is "Yes", Date/Time Medication Administered should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eMedications.01_after" role="[ERROR]" diagnostics="nemsisDiagnostic" test="../nem:eMedications.02 = '9923003' or (every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.))">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>, unless <sch:value-of select="key('nemSch_key_elements', 'eMedications.02', $nemSch_elements)"/> is "Yes".
			</sch:assert>

			<!-- eMedications.01: When eMedications.02 Medication Administered Prior to this Unit's EMS Care is "Yes", Date/Time Medication Administered should not occur after: 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eMedications.01_prior_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eMedications.01_prior)">
				When <sch:value-of select="key('nemSch_key_elements', 'eMedications.02', $nemSch_elements)"/> is "Yes," <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>.
			</sch:assert>

			<!-- eMedications.01: Unless the previous assertion failed, Date/Time Medication Administered should not occur after: 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time, 
				- eTimes.13 - Unit Back in Service Date/Time, 
				- eTimes.15 - Unit Back at Home Location Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eMedications.01_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eMedications.01_prior or (every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.))">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)"/> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

		<!-- eOther.19: Date/Time of Signature: No sequence constraints. -->

		<sch:rule id="nemSch_sequence_time_eProcedures.01" context="nem:eProcedures.01[. != '']">

			<sch:let name="eProcedures.01_prior" value="if(../nem:eProcedures.02 != '9923003' or (every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.))) then false() else true()"/>

			<sch:let name="nemsisElements" value="(., ../nem:eProcedures.02, ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']"/>

			<!-- eProcedures.01: Unless eProcedures.02 Procedure Performed Prior to this Unit's EMS Care is "Yes", Date/Time Procedure Performed should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eProcedures.01_after" role="[ERROR]" diagnostics="nemsisDiagnostic" test="../nem:eProcedures.02 = '9923003' or (every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.))">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/> or <sch:value-of select="key('nemSch_key_elements', 'eScene.05', $nemSch_elements)"/>, unless <sch:value-of select="key('nemSch_key_elements', 'eProcedures.02', $nemSch_elements)"/> is "Yes".
			</sch:assert>

			<!-- eProcedures.01: When eProcedures.02 Procedure Performed Prior to this Unit's EMS Care is "Yes", Date/Time Procedure Performed should not occur after: 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eProcedures.01_prior_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eProcedures.01_prior)">
				When <sch:value-of select="key('nemSch_key_elements', 'eProcedures.02', $nemSch_elements)"/> is "Yes," <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>.
			</sch:assert>

			<!-- eProcedures.01: Unless the previous assertion failed, Date/Time Procedure Performed should not occur after: 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time, 
				- eTimes.13 - Unit Back in Service Date/Time, 
				- eTimes.15 - Unit Back at Home Location Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eProcedures.01_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eProcedures.01_prior or (every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.))">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)"/> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

		<sch:rule id="nemSch_sequence_time_eVitals.01" context="nem:eVitals.01[. != '']">

			<sch:let name="eVitals.01_prior" value="if(../nem:eVitals.02 != '9923003' or (every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.))) then false() else true()"/>

			<sch:let name="nemsisElements" value="(., ../nem:eVitals.02, ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13))[. != '']"/>

			<!-- eVitals.01: Unless eVitals.02 Obtained Prior to this Unit's EMS Care is "Yes", Date/Time Vital Signs Taken should not occur prior to: 
				- eScene.05 - Date/Time Initial Responder Arrived on Scene, 
				- eTimes.03 - Unit Notified by Dispatch Date/Time, 
				- eTimes.04 - Dispatch Acknowledged Date/Time, 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eVitals.01_after" role="[ERROR]" diagnostics="nemsisDiagnostic" test="../nem:eVitals.02 = '9923003' or (every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.))">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>, unless <sch:value-of select="key('nemSch_key_elements', 'eVitals.02', $nemSch_elements)"/> is "Yes".
			</sch:assert>

			<!-- eVitals.01: When eVitals.02 Obtained Prior to this Unit's EMS Care is "Yes", Date/Time Vital Signs Taken should not occur after: 
				- eTimes.07 - Arrived at Patient Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eVitals.01_prior_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not($eVitals.01_prior)">
				When <sch:value-of select="key('nemSch_key_elements', 'eVitals.02', $nemSch_elements)"/> is "Yes," <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)"/>.
			</sch:assert>

			<!-- eVitals.01: Unless the previous assertion failed, Date/Time Vital Signs Taken should not occur after: 
				- eTimes.08 - Transfer of EMS Patient Care Date/Time, 
				- eTimes.12 - Destination Patient Transfer of Care Date/Time, 
				- eTimes.13 - Unit Back in Service Date/Time, 
				- eTimes.15 - Unit Back at Home Location Date/Time. -->

			<sch:assert id="nemSch_sequence_time_eVitals.01_before" role="[ERROR]" diagnostics="nemsisDiagnostic" test="$eVitals.01_prior or (every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.))">
				<sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)"/> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)"/> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)"/>.
			</sch:assert>

		</sch:rule>

	</sch:pattern>
	
  <!-- DIAGNOSTICS -->

  <sch:diagnostics>

    <sch:diagnostic id="nemsisDiagnostic" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <!-- This is the NEMSIS national diagnostic. It must exist in every NEMSIS Schematron document, 
       and it should be referenced by every assert and report. It provides nationally-
       standardized, structured data to communicate which data elements are of interest in a 
       failed assert or successful report. -->

  <nemsisDiagnostic xmlns="http://www.nemsis.org" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <!-- Elements that uniquely identify the record where the problem happened. -->

    <record>
      <xsl:copy-of select="ancestor-or-self::*:DemographicReport/*:dAgency/(*:dAgency.01 | *:dAgency.02 | *:dAgency.04)"/>
      <xsl:copy-of select="ancestor-or-self::*:Header/*:DemographicGroup/*"/>
      <xsl:copy-of select="ancestor-or-self::*:PatientCareReport/*:eRecord/*:eRecord.01"/>
    </record>

    <!-- Elements that the user may want to revisit to resolve the problem, along with their values. -->

    <elements>
      <xsl:for-each select="$nemsisElements">
        <xsl:element name="element">
          <xsl:attribute name="location">
            <xsl:apply-templates select="." mode="schematron-get-full-path"/>
          </xsl:attribute>
          <xsl:for-each select ="@*">
            <xsl:attribute name="{name()}">
              <xsl:value-of select="."/>
            </xsl:attribute>
          </xsl:for-each>
          <xsl:if test="not(*)">
            <xsl:value-of select="."/>
          </xsl:if>
        </xsl:element>
      </xsl:for-each>
    </elements>

    <!-- Elements that were missing, that the user may want to visit to resolve the problem. -->

    <elementsMissing>
      <xsl:variable name="default_context" select="."/>
      <xsl:for-each select="tokenize($nemsisElementsMissing, ' ')">
        <xsl:variable name="parent" select="$nemsisElementsMissingContext[contains(local-name(), substring-before(current(), '.'))][1]"/>
        <element>
          <xsl:attribute name="parentLocation">
            <xsl:choose>
              <xsl:when test="$parent">
                <xsl:apply-templates select="$parent" mode="schematron-get-full-path"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates select="$default_context" mode="schematron-get-full-path"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:attribute name="name">
            <xsl:value-of select="."/>
          </xsl:attribute>
        </element>
      </xsl:for-each>
    </elementsMissing>

  </nemsisDiagnostic>

</sch:diagnostic>

  </sch:diagnostics>

</sch:schema>